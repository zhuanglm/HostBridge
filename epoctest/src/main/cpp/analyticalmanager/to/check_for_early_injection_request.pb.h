// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: check_for_early_injection_request.proto

#ifndef PROTOBUF_check_5ffor_5fearly_5finjection_5frequest_2eproto__INCLUDED
#define PROTOBUF_check_5ffor_5fearly_5finjection_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "sensor_readings.pb.h"
// @@protoc_insertion_point(includes)

namespace to {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto();
void protobuf_AssignDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto();
void protobuf_ShutdownFile_check_5ffor_5fearly_5finjection_5frequest_2eproto();

class CheckForEarlyInjectionRequest;

// ===================================================================

class CheckForEarlyInjectionRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:to.CheckForEarlyInjectionRequest) */ {
 public:
  CheckForEarlyInjectionRequest();
  virtual ~CheckForEarlyInjectionRequest();

  CheckForEarlyInjectionRequest(const CheckForEarlyInjectionRequest& from);

  inline CheckForEarlyInjectionRequest& operator=(const CheckForEarlyInjectionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CheckForEarlyInjectionRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CheckForEarlyInjectionRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CheckForEarlyInjectionRequest* other);

  // implements Message ----------------------------------------------

  inline CheckForEarlyInjectionRequest* New() const { return New(NULL); }

  CheckForEarlyInjectionRequest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CheckForEarlyInjectionRequest& from);
  void MergeFrom(const CheckForEarlyInjectionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckForEarlyInjectionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .to.SensorReadings hematocritReadings = 1;
  bool has_hematocritreadings() const;
  void clear_hematocritreadings();
  static const int kHematocritReadingsFieldNumber = 1;
  const ::to::SensorReadings& hematocritreadings() const;
  ::to::SensorReadings* mutable_hematocritreadings();
  ::to::SensorReadings* release_hematocritreadings();
  void set_allocated_hematocritreadings(::to::SensorReadings* hematocritreadings);

  // optional .to.SensorReadings topHeaterReadings = 2;
  bool has_topheaterreadings() const;
  void clear_topheaterreadings();
  static const int kTopHeaterReadingsFieldNumber = 2;
  const ::to::SensorReadings& topheaterreadings() const;
  ::to::SensorReadings* mutable_topheaterreadings();
  ::to::SensorReadings* release_topheaterreadings();
  void set_allocated_topheaterreadings(::to::SensorReadings* topheaterreadings);

  // optional int32 previousReturnCode = 3;
  void clear_previousreturncode();
  static const int kPreviousReturnCodeFieldNumber = 3;
  ::google::protobuf::int32 previousreturncode() const;
  void set_previousreturncode(::google::protobuf::int32 value);

  // optional double airAfterFluidThreshold = 4;
  void clear_airafterfluidthreshold();
  static const int kAirAfterFluidThresholdFieldNumber = 4;
  double airafterfluidthreshold() const;
  void set_airafterfluidthreshold(double value);

  // optional float lastRecordedTime = 5;
  void clear_lastrecordedtime();
  static const int kLastRecordedTimeFieldNumber = 5;
  float lastrecordedtime() const;
  void set_lastrecordedtime(float value);

  // optional double firstFluid = 6;
  void clear_firstfluid();
  static const int kFirstFluidFieldNumber = 6;
  double firstfluid() const;
  void set_firstfluid(double value);

  // @@protoc_insertion_point(class_scope:to.CheckForEarlyInjectionRequest)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::to::SensorReadings* hematocritreadings_;
  ::to::SensorReadings* topheaterreadings_;
  double airafterfluidthreshold_;
  ::google::protobuf::int32 previousreturncode_;
  float lastrecordedtime_;
  double firstfluid_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto();
  #endif
  friend void protobuf_AssignDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto();
  friend void protobuf_ShutdownFile_check_5ffor_5fearly_5finjection_5frequest_2eproto();

  void InitAsDefaultInstance();
  static CheckForEarlyInjectionRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckForEarlyInjectionRequest

// optional .to.SensorReadings hematocritReadings = 1;
inline bool CheckForEarlyInjectionRequest::has_hematocritreadings() const {
  return !_is_default_instance_ && hematocritreadings_ != NULL;
}
inline void CheckForEarlyInjectionRequest::clear_hematocritreadings() {
  if (GetArenaNoVirtual() == NULL && hematocritreadings_ != NULL) delete hematocritreadings_;
  hematocritreadings_ = NULL;
}
inline const ::to::SensorReadings& CheckForEarlyInjectionRequest::hematocritreadings() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.hematocritReadings)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return hematocritreadings_ != NULL ? *hematocritreadings_ : *default_instance().hematocritreadings_;
#else
  return hematocritreadings_ != NULL ? *hematocritreadings_ : *default_instance_->hematocritreadings_;
#endif
}
inline ::to::SensorReadings* CheckForEarlyInjectionRequest::mutable_hematocritreadings() {
  
  if (hematocritreadings_ == NULL) {
    hematocritreadings_ = new ::to::SensorReadings;
  }
  // @@protoc_insertion_point(field_mutable:to.CheckForEarlyInjectionRequest.hematocritReadings)
  return hematocritreadings_;
}
inline ::to::SensorReadings* CheckForEarlyInjectionRequest::release_hematocritreadings() {
  // @@protoc_insertion_point(field_release:to.CheckForEarlyInjectionRequest.hematocritReadings)
  
  ::to::SensorReadings* temp = hematocritreadings_;
  hematocritreadings_ = NULL;
  return temp;
}
inline void CheckForEarlyInjectionRequest::set_allocated_hematocritreadings(::to::SensorReadings* hematocritreadings) {
  delete hematocritreadings_;
  hematocritreadings_ = hematocritreadings;
  if (hematocritreadings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.CheckForEarlyInjectionRequest.hematocritReadings)
}

// optional .to.SensorReadings topHeaterReadings = 2;
inline bool CheckForEarlyInjectionRequest::has_topheaterreadings() const {
  return !_is_default_instance_ && topheaterreadings_ != NULL;
}
inline void CheckForEarlyInjectionRequest::clear_topheaterreadings() {
  if (GetArenaNoVirtual() == NULL && topheaterreadings_ != NULL) delete topheaterreadings_;
  topheaterreadings_ = NULL;
}
inline const ::to::SensorReadings& CheckForEarlyInjectionRequest::topheaterreadings() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.topHeaterReadings)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return topheaterreadings_ != NULL ? *topheaterreadings_ : *default_instance().topheaterreadings_;
#else
  return topheaterreadings_ != NULL ? *topheaterreadings_ : *default_instance_->topheaterreadings_;
#endif
}
inline ::to::SensorReadings* CheckForEarlyInjectionRequest::mutable_topheaterreadings() {
  
  if (topheaterreadings_ == NULL) {
    topheaterreadings_ = new ::to::SensorReadings;
  }
  // @@protoc_insertion_point(field_mutable:to.CheckForEarlyInjectionRequest.topHeaterReadings)
  return topheaterreadings_;
}
inline ::to::SensorReadings* CheckForEarlyInjectionRequest::release_topheaterreadings() {
  // @@protoc_insertion_point(field_release:to.CheckForEarlyInjectionRequest.topHeaterReadings)
  
  ::to::SensorReadings* temp = topheaterreadings_;
  topheaterreadings_ = NULL;
  return temp;
}
inline void CheckForEarlyInjectionRequest::set_allocated_topheaterreadings(::to::SensorReadings* topheaterreadings) {
  delete topheaterreadings_;
  topheaterreadings_ = topheaterreadings;
  if (topheaterreadings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.CheckForEarlyInjectionRequest.topHeaterReadings)
}

// optional int32 previousReturnCode = 3;
inline void CheckForEarlyInjectionRequest::clear_previousreturncode() {
  previousreturncode_ = 0;
}
inline ::google::protobuf::int32 CheckForEarlyInjectionRequest::previousreturncode() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.previousReturnCode)
  return previousreturncode_;
}
inline void CheckForEarlyInjectionRequest::set_previousreturncode(::google::protobuf::int32 value) {
  
  previousreturncode_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionRequest.previousReturnCode)
}

// optional double airAfterFluidThreshold = 4;
inline void CheckForEarlyInjectionRequest::clear_airafterfluidthreshold() {
  airafterfluidthreshold_ = 0;
}
inline double CheckForEarlyInjectionRequest::airafterfluidthreshold() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.airAfterFluidThreshold)
  return airafterfluidthreshold_;
}
inline void CheckForEarlyInjectionRequest::set_airafterfluidthreshold(double value) {
  
  airafterfluidthreshold_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionRequest.airAfterFluidThreshold)
}

// optional float lastRecordedTime = 5;
inline void CheckForEarlyInjectionRequest::clear_lastrecordedtime() {
  lastrecordedtime_ = 0;
}
inline float CheckForEarlyInjectionRequest::lastrecordedtime() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.lastRecordedTime)
  return lastrecordedtime_;
}
inline void CheckForEarlyInjectionRequest::set_lastrecordedtime(float value) {
  
  lastrecordedtime_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionRequest.lastRecordedTime)
}

// optional double firstFluid = 6;
inline void CheckForEarlyInjectionRequest::clear_firstfluid() {
  firstfluid_ = 0;
}
inline double CheckForEarlyInjectionRequest::firstfluid() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.firstFluid)
  return firstfluid_;
}
inline void CheckForEarlyInjectionRequest::set_firstfluid(double value) {
  
  firstfluid_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionRequest.firstFluid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_check_5ffor_5fearly_5finjection_5frequest_2eproto__INCLUDED
