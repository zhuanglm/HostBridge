// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_readings.proto

#ifndef PROTOBUF_sensor_5freadings_2eproto__INCLUDED
#define PROTOBUF_sensor_5freadings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "reading.pb.h"
#include "sensor_info.pb.h"
#include "levels.pb.h"
// @@protoc_insertion_point(includes)

namespace to {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sensor_5freadings_2eproto();
void protobuf_AssignDesc_sensor_5freadings_2eproto();
void protobuf_ShutdownFile_sensor_5freadings_2eproto();

class SensorReadings;

// ===================================================================

class SensorReadings : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:to.SensorReadings) */ {
 public:
  SensorReadings();
  virtual ~SensorReadings();

  SensorReadings(const SensorReadings& from);

  inline SensorReadings& operator=(const SensorReadings& from) {
    CopyFrom(from);
    return *this;
  }

  static const SensorReadings& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SensorReadings* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SensorReadings* other);

  // implements Message ----------------------------------------------

  inline SensorReadings* New() const { return New(NULL); }

  SensorReadings* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SensorReadings& from);
  void MergeFrom(const SensorReadings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorReadings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool requirementsFailedQC = 1;
  void clear_requirementsfailedqc();
  static const int kRequirementsFailedQCFieldNumber = 1;
  bool requirementsfailedqc() const;
  void set_requirementsfailedqc(bool value);

  // optional int32 returnCode = 2;
  void clear_returncode();
  static const int kReturnCodeFieldNumber = 2;
  ::google::protobuf::int32 returncode() const;
  void set_returncode(::google::protobuf::int32 value);

  // optional int32 sensorType = 3;
  void clear_sensortype();
  static const int kSensorTypeFieldNumber = 3;
  ::google::protobuf::int32 sensortype() const;
  void set_sensortype(::google::protobuf::int32 value);

  // optional int32 sensorDescriptorNumber = 4;
  void clear_sensordescriptornumber();
  static const int kSensorDescriptorNumberFieldNumber = 4;
  ::google::protobuf::int32 sensordescriptornumber() const;
  void set_sensordescriptornumber(::google::protobuf::int32 value);

  // optional int32 channelType = 5;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 5;
  ::google::protobuf::int32 channeltype() const;
  void set_channeltype(::google::protobuf::int32 value);

  // optional int32 analyte = 6;
  void clear_analyte();
  static const int kAnalyteFieldNumber = 6;
  ::google::protobuf::int32 analyte() const;
  void set_analyte(::google::protobuf::int32 value);

  // optional string analyteString = 7;
  void clear_analytestring();
  static const int kAnalyteStringFieldNumber = 7;
  const ::std::string& analytestring() const;
  void set_analytestring(const ::std::string& value);
  void set_analytestring(const char* value);
  void set_analytestring(const char* value, size_t size);
  ::std::string* mutable_analytestring();
  ::std::string* release_analytestring();
  void set_allocated_analytestring(::std::string* analytestring);

  // repeated .to.Reading readings = 8;
  int readings_size() const;
  void clear_readings();
  static const int kReadingsFieldNumber = 8;
  const ::to::Reading& readings(int index) const;
  ::to::Reading* mutable_readings(int index);
  ::to::Reading* add_readings();
  ::google::protobuf::RepeatedPtrField< ::to::Reading >*
      mutable_readings();
  const ::google::protobuf::RepeatedPtrField< ::to::Reading >&
      readings() const;

  // optional int32 readingPointer = 9;
  void clear_readingpointer();
  static const int kReadingPointerFieldNumber = 9;
  ::google::protobuf::int32 readingpointer() const;
  void set_readingpointer(::google::protobuf::int32 value);

  // optional int32 numThisTypeReading = 10;
  void clear_numthistypereading();
  static const int kNumThisTypeReadingFieldNumber = 10;
  ::google::protobuf::int32 numthistypereading() const;
  void set_numthistypereading(::google::protobuf::int32 value);

  // optional double result = 11;
  void clear_result();
  static const int kResultFieldNumber = 11;
  double result() const;
  void set_result(double value);

  // optional double multiplicationFactor = 12;
  void clear_multiplicationfactor();
  static const int kMultiplicationFactorFieldNumber = 12;
  double multiplicationfactor() const;
  void set_multiplicationfactor(double value);

  // optional .to.SensorInfo sensorDescriptor = 13;
  bool has_sensordescriptor() const;
  void clear_sensordescriptor();
  static const int kSensorDescriptorFieldNumber = 13;
  const ::to::SensorInfo& sensordescriptor() const;
  ::to::SensorInfo* mutable_sensordescriptor();
  ::to::SensorInfo* release_sensordescriptor();
  void set_allocated_sensordescriptor(::to::SensorInfo* sensordescriptor);

  // optional int32 realTimeQCPassed = 14;
  void clear_realtimeqcpassed();
  static const int kRealTimeQCPassedFieldNumber = 14;
  ::google::protobuf::int32 realtimeqcpassed() const;
  void set_realtimeqcpassed(::google::protobuf::int32 value);

  // optional int32 realTimeQCFailedEver = 15;
  void clear_realtimeqcfailedever();
  static const int kRealTimeQCFailedEverFieldNumber = 15;
  ::google::protobuf::int32 realtimeqcfailedever() const;
  void set_realtimeqcfailedever(::google::protobuf::int32 value);

  // optional bool checkRealtimeQC = 16;
  void clear_checkrealtimeqc();
  static const int kCheckRealtimeQCFieldNumber = 16;
  bool checkrealtimeqc() const;
  void set_checkrealtimeqc(bool value);

  // optional double reportableLow = 17;
  void clear_reportablelow();
  static const int kReportableLowFieldNumber = 17;
  double reportablelow() const;
  void set_reportablelow(double value);

  // optional double reportableHigh = 18;
  void clear_reportablehigh();
  static const int kReportableHighFieldNumber = 18;
  double reportablehigh() const;
  void set_reportablehigh(double value);

  // optional .to.Levels levels = 19;
  bool has_levels() const;
  void clear_levels();
  static const int kLevelsFieldNumber = 19;
  const ::to::Levels& levels() const;
  ::to::Levels* mutable_levels();
  ::to::Levels* release_levels();
  void set_allocated_levels(::to::Levels* levels);

  // optional int32 humidityPassed = 20;
  void clear_humiditypassed();
  static const int kHumidityPassedFieldNumber = 20;
  ::google::protobuf::int32 humiditypassed() const;
  void set_humiditypassed(::google::protobuf::int32 value);

  // optional double insanityLow = 21;
  void clear_insanitylow();
  static const int kInsanityLowFieldNumber = 21;
  double insanitylow() const;
  void set_insanitylow(double value);

  // optional double insanityHigh = 22;
  void clear_insanityhigh();
  static const int kInsanityHighFieldNumber = 22;
  double insanityhigh() const;
  void set_insanityhigh(double value);

  // optional double insanityQALow = 23;
  void clear_insanityqalow();
  static const int kInsanityQALowFieldNumber = 23;
  double insanityqalow() const;
  void set_insanityqalow(double value);

  // optional double insanityQAHigh = 24;
  void clear_insanityqahigh();
  static const int kInsanityQAHighFieldNumber = 24;
  double insanityqahigh() const;
  void set_insanityqahigh(double value);

  // optional int32 RealTimeQCFailureTotal = 25;
  void clear_realtimeqcfailuretotal();
  static const int kRealTimeQCFailureTotalFieldNumber = 25;
  ::google::protobuf::int32 realtimeqcfailuretotal() const;
  void set_realtimeqcfailuretotal(::google::protobuf::int32 value);

  // optional int32 HumidityQCFailureTotal = 26;
  void clear_humidityqcfailuretotal();
  static const int kHumidityQCFailureTotalFieldNumber = 26;
  ::google::protobuf::int32 humidityqcfailuretotal() const;
  void set_humidityqcfailuretotal(::google::protobuf::int32 value);

  // optional int32 AirQCFailureTotal = 27;
  void clear_airqcfailuretotal();
  static const int kAirQCFailureTotalFieldNumber = 27;
  ::google::protobuf::int32 airqcfailuretotal() const;
  void set_airqcfailuretotal(::google::protobuf::int32 value);

  // optional string RealTimeQCFailureOccuranceString = 28;
  void clear_realtimeqcfailureoccurancestring();
  static const int kRealTimeQCFailureOccuranceStringFieldNumber = 28;
  const ::std::string& realtimeqcfailureoccurancestring() const;
  void set_realtimeqcfailureoccurancestring(const ::std::string& value);
  void set_realtimeqcfailureoccurancestring(const char* value);
  void set_realtimeqcfailureoccurancestring(const char* value, size_t size);
  ::std::string* mutable_realtimeqcfailureoccurancestring();
  ::std::string* release_realtimeqcfailureoccurancestring();
  void set_allocated_realtimeqcfailureoccurancestring(::std::string* realtimeqcfailureoccurancestring);

  // optional string HumidityQCFailureOccuranceString = 29;
  void clear_humidityqcfailureoccurancestring();
  static const int kHumidityQCFailureOccuranceStringFieldNumber = 29;
  const ::std::string& humidityqcfailureoccurancestring() const;
  void set_humidityqcfailureoccurancestring(const ::std::string& value);
  void set_humidityqcfailureoccurancestring(const char* value);
  void set_humidityqcfailureoccurancestring(const char* value, size_t size);
  ::std::string* mutable_humidityqcfailureoccurancestring();
  ::std::string* release_humidityqcfailureoccurancestring();
  void set_allocated_humidityqcfailureoccurancestring(::std::string* humidityqcfailureoccurancestring);

  // optional string AirQCFailureOccuranceString = 30;
  void clear_airqcfailureoccurancestring();
  static const int kAirQCFailureOccuranceStringFieldNumber = 30;
  const ::std::string& airqcfailureoccurancestring() const;
  void set_airqcfailureoccurancestring(const ::std::string& value);
  void set_airqcfailureoccurancestring(const char* value);
  void set_airqcfailureoccurancestring(const char* value, size_t size);
  ::std::string* mutable_airqcfailureoccurancestring();
  ::std::string* release_airqcfailureoccurancestring();
  void set_allocated_airqcfailureoccurancestring(::std::string* airqcfailureoccurancestring);

  // optional string extraString = 31;
  void clear_extrastring();
  static const int kExtraStringFieldNumber = 31;
  const ::std::string& extrastring() const;
  void set_extrastring(const ::std::string& value);
  void set_extrastring(const char* value);
  void set_extrastring(const char* value, size_t size);
  ::std::string* mutable_extrastring();
  ::std::string* release_extrastring();
  void set_allocated_extrastring(::std::string* extrastring);

  // optional string resultString = 32;
  void clear_resultstring();
  static const int kResultStringFieldNumber = 32;
  const ::std::string& resultstring() const;
  void set_resultstring(const ::std::string& value);
  void set_resultstring(const char* value);
  void set_resultstring(const char* value, size_t size);
  ::std::string* mutable_resultstring();
  ::std::string* release_resultstring();
  void set_allocated_resultstring(::std::string* resultstring);

  // @@protoc_insertion_point(class_scope:to.SensorReadings)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 returncode_;
  ::google::protobuf::int32 sensortype_;
  ::google::protobuf::int32 sensordescriptornumber_;
  ::google::protobuf::int32 channeltype_;
  ::google::protobuf::internal::ArenaStringPtr analytestring_;
  ::google::protobuf::int32 analyte_;
  bool requirementsfailedqc_;
  bool checkrealtimeqc_;
  ::google::protobuf::RepeatedPtrField< ::to::Reading > readings_;
  ::google::protobuf::int32 readingpointer_;
  ::google::protobuf::int32 numthistypereading_;
  double result_;
  double multiplicationfactor_;
  ::to::SensorInfo* sensordescriptor_;
  ::google::protobuf::int32 realtimeqcpassed_;
  ::google::protobuf::int32 realtimeqcfailedever_;
  double reportablelow_;
  double reportablehigh_;
  ::to::Levels* levels_;
  double insanitylow_;
  double insanityhigh_;
  ::google::protobuf::int32 humiditypassed_;
  ::google::protobuf::int32 realtimeqcfailuretotal_;
  double insanityqalow_;
  double insanityqahigh_;
  ::google::protobuf::int32 humidityqcfailuretotal_;
  ::google::protobuf::int32 airqcfailuretotal_;
  ::google::protobuf::internal::ArenaStringPtr realtimeqcfailureoccurancestring_;
  ::google::protobuf::internal::ArenaStringPtr humidityqcfailureoccurancestring_;
  ::google::protobuf::internal::ArenaStringPtr airqcfailureoccurancestring_;
  ::google::protobuf::internal::ArenaStringPtr extrastring_;
  ::google::protobuf::internal::ArenaStringPtr resultstring_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sensor_5freadings_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sensor_5freadings_2eproto();
  #endif
  friend void protobuf_AssignDesc_sensor_5freadings_2eproto();
  friend void protobuf_ShutdownFile_sensor_5freadings_2eproto();

  void InitAsDefaultInstance();
  static SensorReadings* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorReadings

// optional bool requirementsFailedQC = 1;
inline void SensorReadings::clear_requirementsfailedqc() {
  requirementsfailedqc_ = false;
}
inline bool SensorReadings::requirementsfailedqc() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.requirementsFailedQC)
  return requirementsfailedqc_;
}
inline void SensorReadings::set_requirementsfailedqc(bool value) {
  
  requirementsfailedqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.requirementsFailedQC)
}

// optional int32 returnCode = 2;
inline void SensorReadings::clear_returncode() {
  returncode_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::returncode() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.returnCode)
  return returncode_;
}
inline void SensorReadings::set_returncode(::google::protobuf::int32 value) {
  
  returncode_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.returnCode)
}

// optional int32 sensorType = 3;
inline void SensorReadings::clear_sensortype() {
  sensortype_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::sensortype() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.sensorType)
  return sensortype_;
}
inline void SensorReadings::set_sensortype(::google::protobuf::int32 value) {
  
  sensortype_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.sensorType)
}

// optional int32 sensorDescriptorNumber = 4;
inline void SensorReadings::clear_sensordescriptornumber() {
  sensordescriptornumber_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::sensordescriptornumber() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.sensorDescriptorNumber)
  return sensordescriptornumber_;
}
inline void SensorReadings::set_sensordescriptornumber(::google::protobuf::int32 value) {
  
  sensordescriptornumber_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.sensorDescriptorNumber)
}

// optional int32 channelType = 5;
inline void SensorReadings::clear_channeltype() {
  channeltype_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::channeltype() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.channelType)
  return channeltype_;
}
inline void SensorReadings::set_channeltype(::google::protobuf::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.channelType)
}

// optional int32 analyte = 6;
inline void SensorReadings::clear_analyte() {
  analyte_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::analyte() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.analyte)
  return analyte_;
}
inline void SensorReadings::set_analyte(::google::protobuf::int32 value) {
  
  analyte_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.analyte)
}

// optional string analyteString = 7;
inline void SensorReadings::clear_analytestring() {
  analytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorReadings::analytestring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.analyteString)
  return analytestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_analytestring(const ::std::string& value) {
  
  analytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.analyteString)
}
inline void SensorReadings::set_analytestring(const char* value) {
  
  analytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.analyteString)
}
inline void SensorReadings::set_analytestring(const char* value, size_t size) {
  
  analytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.analyteString)
}
inline ::std::string* SensorReadings::mutable_analytestring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.analyteString)
  return analytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorReadings::release_analytestring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.analyteString)
  
  return analytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_allocated_analytestring(::std::string* analytestring) {
  if (analytestring != NULL) {
    
  } else {
    
  }
  analytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), analytestring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.analyteString)
}

// repeated .to.Reading readings = 8;
inline int SensorReadings::readings_size() const {
  return readings_.size();
}
inline void SensorReadings::clear_readings() {
  readings_.Clear();
}
inline const ::to::Reading& SensorReadings::readings(int index) const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.readings)
  return readings_.Get(index);
}
inline ::to::Reading* SensorReadings::mutable_readings(int index) {
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.readings)
  return readings_.Mutable(index);
}
inline ::to::Reading* SensorReadings::add_readings() {
  // @@protoc_insertion_point(field_add:to.SensorReadings.readings)
  return readings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::to::Reading >*
SensorReadings::mutable_readings() {
  // @@protoc_insertion_point(field_mutable_list:to.SensorReadings.readings)
  return &readings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::to::Reading >&
SensorReadings::readings() const {
  // @@protoc_insertion_point(field_list:to.SensorReadings.readings)
  return readings_;
}

// optional int32 readingPointer = 9;
inline void SensorReadings::clear_readingpointer() {
  readingpointer_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::readingpointer() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.readingPointer)
  return readingpointer_;
}
inline void SensorReadings::set_readingpointer(::google::protobuf::int32 value) {
  
  readingpointer_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.readingPointer)
}

// optional int32 numThisTypeReading = 10;
inline void SensorReadings::clear_numthistypereading() {
  numthistypereading_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::numthistypereading() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.numThisTypeReading)
  return numthistypereading_;
}
inline void SensorReadings::set_numthistypereading(::google::protobuf::int32 value) {
  
  numthistypereading_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.numThisTypeReading)
}

// optional double result = 11;
inline void SensorReadings::clear_result() {
  result_ = 0;
}
inline double SensorReadings::result() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.result)
  return result_;
}
inline void SensorReadings::set_result(double value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.result)
}

// optional double multiplicationFactor = 12;
inline void SensorReadings::clear_multiplicationfactor() {
  multiplicationfactor_ = 0;
}
inline double SensorReadings::multiplicationfactor() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.multiplicationFactor)
  return multiplicationfactor_;
}
inline void SensorReadings::set_multiplicationfactor(double value) {
  
  multiplicationfactor_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.multiplicationFactor)
}

// optional .to.SensorInfo sensorDescriptor = 13;
inline bool SensorReadings::has_sensordescriptor() const {
  return !_is_default_instance_ && sensordescriptor_ != NULL;
}
inline void SensorReadings::clear_sensordescriptor() {
  if (GetArenaNoVirtual() == NULL && sensordescriptor_ != NULL) delete sensordescriptor_;
  sensordescriptor_ = NULL;
}
inline const ::to::SensorInfo& SensorReadings::sensordescriptor() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.sensorDescriptor)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sensordescriptor_ != NULL ? *sensordescriptor_ : *default_instance().sensordescriptor_;
#else
  return sensordescriptor_ != NULL ? *sensordescriptor_ : *default_instance_->sensordescriptor_;
#endif
}
inline ::to::SensorInfo* SensorReadings::mutable_sensordescriptor() {
  
  if (sensordescriptor_ == NULL) {
    sensordescriptor_ = new ::to::SensorInfo;
  }
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.sensorDescriptor)
  return sensordescriptor_;
}
inline ::to::SensorInfo* SensorReadings::release_sensordescriptor() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.sensorDescriptor)
  
  ::to::SensorInfo* temp = sensordescriptor_;
  sensordescriptor_ = NULL;
  return temp;
}
inline void SensorReadings::set_allocated_sensordescriptor(::to::SensorInfo* sensordescriptor) {
  delete sensordescriptor_;
  sensordescriptor_ = sensordescriptor;
  if (sensordescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.sensorDescriptor)
}

// optional int32 realTimeQCPassed = 14;
inline void SensorReadings::clear_realtimeqcpassed() {
  realtimeqcpassed_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::realtimeqcpassed() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.realTimeQCPassed)
  return realtimeqcpassed_;
}
inline void SensorReadings::set_realtimeqcpassed(::google::protobuf::int32 value) {
  
  realtimeqcpassed_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.realTimeQCPassed)
}

// optional int32 realTimeQCFailedEver = 15;
inline void SensorReadings::clear_realtimeqcfailedever() {
  realtimeqcfailedever_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::realtimeqcfailedever() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.realTimeQCFailedEver)
  return realtimeqcfailedever_;
}
inline void SensorReadings::set_realtimeqcfailedever(::google::protobuf::int32 value) {
  
  realtimeqcfailedever_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.realTimeQCFailedEver)
}

// optional bool checkRealtimeQC = 16;
inline void SensorReadings::clear_checkrealtimeqc() {
  checkrealtimeqc_ = false;
}
inline bool SensorReadings::checkrealtimeqc() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.checkRealtimeQC)
  return checkrealtimeqc_;
}
inline void SensorReadings::set_checkrealtimeqc(bool value) {
  
  checkrealtimeqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.checkRealtimeQC)
}

// optional double reportableLow = 17;
inline void SensorReadings::clear_reportablelow() {
  reportablelow_ = 0;
}
inline double SensorReadings::reportablelow() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.reportableLow)
  return reportablelow_;
}
inline void SensorReadings::set_reportablelow(double value) {
  
  reportablelow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.reportableLow)
}

// optional double reportableHigh = 18;
inline void SensorReadings::clear_reportablehigh() {
  reportablehigh_ = 0;
}
inline double SensorReadings::reportablehigh() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.reportableHigh)
  return reportablehigh_;
}
inline void SensorReadings::set_reportablehigh(double value) {
  
  reportablehigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.reportableHigh)
}

// optional .to.Levels levels = 19;
inline bool SensorReadings::has_levels() const {
  return !_is_default_instance_ && levels_ != NULL;
}
inline void SensorReadings::clear_levels() {
  if (GetArenaNoVirtual() == NULL && levels_ != NULL) delete levels_;
  levels_ = NULL;
}
inline const ::to::Levels& SensorReadings::levels() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.levels)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return levels_ != NULL ? *levels_ : *default_instance().levels_;
#else
  return levels_ != NULL ? *levels_ : *default_instance_->levels_;
#endif
}
inline ::to::Levels* SensorReadings::mutable_levels() {
  
  if (levels_ == NULL) {
    levels_ = new ::to::Levels;
  }
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.levels)
  return levels_;
}
inline ::to::Levels* SensorReadings::release_levels() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.levels)
  
  ::to::Levels* temp = levels_;
  levels_ = NULL;
  return temp;
}
inline void SensorReadings::set_allocated_levels(::to::Levels* levels) {
  delete levels_;
  levels_ = levels;
  if (levels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.levels)
}

// optional int32 humidityPassed = 20;
inline void SensorReadings::clear_humiditypassed() {
  humiditypassed_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::humiditypassed() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.humidityPassed)
  return humiditypassed_;
}
inline void SensorReadings::set_humiditypassed(::google::protobuf::int32 value) {
  
  humiditypassed_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.humidityPassed)
}

// optional double insanityLow = 21;
inline void SensorReadings::clear_insanitylow() {
  insanitylow_ = 0;
}
inline double SensorReadings::insanitylow() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.insanityLow)
  return insanitylow_;
}
inline void SensorReadings::set_insanitylow(double value) {
  
  insanitylow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.insanityLow)
}

// optional double insanityHigh = 22;
inline void SensorReadings::clear_insanityhigh() {
  insanityhigh_ = 0;
}
inline double SensorReadings::insanityhigh() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.insanityHigh)
  return insanityhigh_;
}
inline void SensorReadings::set_insanityhigh(double value) {
  
  insanityhigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.insanityHigh)
}

// optional double insanityQALow = 23;
inline void SensorReadings::clear_insanityqalow() {
  insanityqalow_ = 0;
}
inline double SensorReadings::insanityqalow() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.insanityQALow)
  return insanityqalow_;
}
inline void SensorReadings::set_insanityqalow(double value) {
  
  insanityqalow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.insanityQALow)
}

// optional double insanityQAHigh = 24;
inline void SensorReadings::clear_insanityqahigh() {
  insanityqahigh_ = 0;
}
inline double SensorReadings::insanityqahigh() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.insanityQAHigh)
  return insanityqahigh_;
}
inline void SensorReadings::set_insanityqahigh(double value) {
  
  insanityqahigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.insanityQAHigh)
}

// optional int32 RealTimeQCFailureTotal = 25;
inline void SensorReadings::clear_realtimeqcfailuretotal() {
  realtimeqcfailuretotal_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::realtimeqcfailuretotal() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.RealTimeQCFailureTotal)
  return realtimeqcfailuretotal_;
}
inline void SensorReadings::set_realtimeqcfailuretotal(::google::protobuf::int32 value) {
  
  realtimeqcfailuretotal_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.RealTimeQCFailureTotal)
}

// optional int32 HumidityQCFailureTotal = 26;
inline void SensorReadings::clear_humidityqcfailuretotal() {
  humidityqcfailuretotal_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::humidityqcfailuretotal() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.HumidityQCFailureTotal)
  return humidityqcfailuretotal_;
}
inline void SensorReadings::set_humidityqcfailuretotal(::google::protobuf::int32 value) {
  
  humidityqcfailuretotal_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.HumidityQCFailureTotal)
}

// optional int32 AirQCFailureTotal = 27;
inline void SensorReadings::clear_airqcfailuretotal() {
  airqcfailuretotal_ = 0;
}
inline ::google::protobuf::int32 SensorReadings::airqcfailuretotal() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.AirQCFailureTotal)
  return airqcfailuretotal_;
}
inline void SensorReadings::set_airqcfailuretotal(::google::protobuf::int32 value) {
  
  airqcfailuretotal_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.AirQCFailureTotal)
}

// optional string RealTimeQCFailureOccuranceString = 28;
inline void SensorReadings::clear_realtimeqcfailureoccurancestring() {
  realtimeqcfailureoccurancestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorReadings::realtimeqcfailureoccurancestring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.RealTimeQCFailureOccuranceString)
  return realtimeqcfailureoccurancestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_realtimeqcfailureoccurancestring(const ::std::string& value) {
  
  realtimeqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.RealTimeQCFailureOccuranceString)
}
inline void SensorReadings::set_realtimeqcfailureoccurancestring(const char* value) {
  
  realtimeqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.RealTimeQCFailureOccuranceString)
}
inline void SensorReadings::set_realtimeqcfailureoccurancestring(const char* value, size_t size) {
  
  realtimeqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.RealTimeQCFailureOccuranceString)
}
inline ::std::string* SensorReadings::mutable_realtimeqcfailureoccurancestring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.RealTimeQCFailureOccuranceString)
  return realtimeqcfailureoccurancestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorReadings::release_realtimeqcfailureoccurancestring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.RealTimeQCFailureOccuranceString)
  
  return realtimeqcfailureoccurancestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_allocated_realtimeqcfailureoccurancestring(::std::string* realtimeqcfailureoccurancestring) {
  if (realtimeqcfailureoccurancestring != NULL) {
    
  } else {
    
  }
  realtimeqcfailureoccurancestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realtimeqcfailureoccurancestring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.RealTimeQCFailureOccuranceString)
}

// optional string HumidityQCFailureOccuranceString = 29;
inline void SensorReadings::clear_humidityqcfailureoccurancestring() {
  humidityqcfailureoccurancestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorReadings::humidityqcfailureoccurancestring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.HumidityQCFailureOccuranceString)
  return humidityqcfailureoccurancestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_humidityqcfailureoccurancestring(const ::std::string& value) {
  
  humidityqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.HumidityQCFailureOccuranceString)
}
inline void SensorReadings::set_humidityqcfailureoccurancestring(const char* value) {
  
  humidityqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.HumidityQCFailureOccuranceString)
}
inline void SensorReadings::set_humidityqcfailureoccurancestring(const char* value, size_t size) {
  
  humidityqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.HumidityQCFailureOccuranceString)
}
inline ::std::string* SensorReadings::mutable_humidityqcfailureoccurancestring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.HumidityQCFailureOccuranceString)
  return humidityqcfailureoccurancestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorReadings::release_humidityqcfailureoccurancestring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.HumidityQCFailureOccuranceString)
  
  return humidityqcfailureoccurancestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_allocated_humidityqcfailureoccurancestring(::std::string* humidityqcfailureoccurancestring) {
  if (humidityqcfailureoccurancestring != NULL) {
    
  } else {
    
  }
  humidityqcfailureoccurancestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), humidityqcfailureoccurancestring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.HumidityQCFailureOccuranceString)
}

// optional string AirQCFailureOccuranceString = 30;
inline void SensorReadings::clear_airqcfailureoccurancestring() {
  airqcfailureoccurancestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorReadings::airqcfailureoccurancestring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.AirQCFailureOccuranceString)
  return airqcfailureoccurancestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_airqcfailureoccurancestring(const ::std::string& value) {
  
  airqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.AirQCFailureOccuranceString)
}
inline void SensorReadings::set_airqcfailureoccurancestring(const char* value) {
  
  airqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.AirQCFailureOccuranceString)
}
inline void SensorReadings::set_airqcfailureoccurancestring(const char* value, size_t size) {
  
  airqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.AirQCFailureOccuranceString)
}
inline ::std::string* SensorReadings::mutable_airqcfailureoccurancestring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.AirQCFailureOccuranceString)
  return airqcfailureoccurancestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorReadings::release_airqcfailureoccurancestring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.AirQCFailureOccuranceString)
  
  return airqcfailureoccurancestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_allocated_airqcfailureoccurancestring(::std::string* airqcfailureoccurancestring) {
  if (airqcfailureoccurancestring != NULL) {
    
  } else {
    
  }
  airqcfailureoccurancestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), airqcfailureoccurancestring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.AirQCFailureOccuranceString)
}

// optional string extraString = 31;
inline void SensorReadings::clear_extrastring() {
  extrastring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorReadings::extrastring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.extraString)
  return extrastring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_extrastring(const ::std::string& value) {
  
  extrastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.extraString)
}
inline void SensorReadings::set_extrastring(const char* value) {
  
  extrastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.extraString)
}
inline void SensorReadings::set_extrastring(const char* value, size_t size) {
  
  extrastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.extraString)
}
inline ::std::string* SensorReadings::mutable_extrastring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.extraString)
  return extrastring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorReadings::release_extrastring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.extraString)
  
  return extrastring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_allocated_extrastring(::std::string* extrastring) {
  if (extrastring != NULL) {
    
  } else {
    
  }
  extrastring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extrastring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.extraString)
}

// optional string resultString = 32;
inline void SensorReadings::clear_resultstring() {
  resultstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorReadings::resultstring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.resultString)
  return resultstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_resultstring(const ::std::string& value) {
  
  resultstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.resultString)
}
inline void SensorReadings::set_resultstring(const char* value) {
  
  resultstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.resultString)
}
inline void SensorReadings::set_resultstring(const char* value, size_t size) {
  
  resultstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.resultString)
}
inline ::std::string* SensorReadings::mutable_resultstring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.resultString)
  return resultstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorReadings::release_resultstring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.resultString)
  
  return resultstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorReadings::set_allocated_resultstring(::std::string* resultstring) {
  if (resultstring != NULL) {
    
  } else {
    
  }
  resultstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultstring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.resultString)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sensor_5freadings_2eproto__INCLUDED
