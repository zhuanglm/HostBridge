// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perform_realtime_qc_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perform_realtime_qc_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace to {

void protobuf_ShutdownFile_perform_5frealtime_5fqc_5frequest_2eproto() {
  delete PerformRealTimeQCRequest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::to::protobuf_AddDesc_sensor_5freadings_2eproto();
  ::to::protobuf_AddDesc_realtime_5fqc_2eproto();
  PerformRealTimeQCRequest::default_instance_ = new PerformRealTimeQCRequest();
  PerformRealTimeQCRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perform_5frealtime_5fqc_5frequest_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto_once_);
void protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto_once_,
                 &protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perform_5frealtime_5fqc_5frequest_2eproto {
  StaticDescriptorInitializer_perform_5frealtime_5fqc_5frequest_2eproto() {
    protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto();
  }
} static_descriptor_initializer_perform_5frealtime_5fqc_5frequest_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerformRealTimeQCRequest::kTestReadingsFieldNumber;
const int PerformRealTimeQCRequest::kQcStructFieldNumber;
const int PerformRealTimeQCRequest::kLastRecordedTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerformRealTimeQCRequest::PerformRealTimeQCRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:to.PerformRealTimeQCRequest)
}

void PerformRealTimeQCRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  qcstruct_ = const_cast< ::to::RealTimeQC*>(
      ::to::RealTimeQC::internal_default_instance());
#else
  qcstruct_ = const_cast< ::to::RealTimeQC*>(&::to::RealTimeQC::default_instance());
#endif
}

PerformRealTimeQCRequest::PerformRealTimeQCRequest(const PerformRealTimeQCRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:to.PerformRealTimeQCRequest)
}

void PerformRealTimeQCRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  qcstruct_ = NULL;
  lastrecordedtime_ = 0;
}

PerformRealTimeQCRequest::~PerformRealTimeQCRequest() {
  // @@protoc_insertion_point(destructor:to.PerformRealTimeQCRequest)
  SharedDtor();
}

void PerformRealTimeQCRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete qcstruct_;
  }
}

void PerformRealTimeQCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerformRealTimeQCRequest& PerformRealTimeQCRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto();
#endif
  return *default_instance_;
}

PerformRealTimeQCRequest* PerformRealTimeQCRequest::default_instance_ = NULL;

PerformRealTimeQCRequest* PerformRealTimeQCRequest::New(::google::protobuf::Arena* arena) const {
  PerformRealTimeQCRequest* n = new PerformRealTimeQCRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerformRealTimeQCRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:to.PerformRealTimeQCRequest)
  if (GetArenaNoVirtual() == NULL && qcstruct_ != NULL) delete qcstruct_;
  qcstruct_ = NULL;
  lastrecordedtime_ = 0;
  testreadings_.Clear();
}

bool PerformRealTimeQCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to.PerformRealTimeQCRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .to.SensorReadings testReadings = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_testReadings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_testreadings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_testReadings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_qcStruct;
        break;
      }

      // optional .to.RealTimeQC qcStruct = 2;
      case 2: {
        if (tag == 18) {
         parse_qcStruct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qcstruct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_lastRecordedTime;
        break;
      }

      // optional float lastRecordedTime = 3;
      case 3: {
        if (tag == 29) {
         parse_lastRecordedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastrecordedtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to.PerformRealTimeQCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to.PerformRealTimeQCRequest)
  return false;
#undef DO_
}

void PerformRealTimeQCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to.PerformRealTimeQCRequest)
  // repeated .to.SensorReadings testReadings = 1;
  for (unsigned int i = 0, n = this->testreadings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->testreadings(i), output);
  }

  // optional .to.RealTimeQC qcStruct = 2;
  if (this->has_qcstruct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->qcstruct_, output);
  }

  // optional float lastRecordedTime = 3;
  if (this->lastrecordedtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lastrecordedtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:to.PerformRealTimeQCRequest)
}

int PerformRealTimeQCRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:to.PerformRealTimeQCRequest)
  int total_size = 0;

  // optional .to.RealTimeQC qcStruct = 2;
  if (this->has_qcstruct()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qcstruct_);
  }

  // optional float lastRecordedTime = 3;
  if (this->lastrecordedtime() != 0) {
    total_size += 1 + 4;
  }

  // repeated .to.SensorReadings testReadings = 1;
  total_size += 1 * this->testreadings_size();
  for (int i = 0; i < this->testreadings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->testreadings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerformRealTimeQCRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerformRealTimeQCRequest*>(&from));
}

void PerformRealTimeQCRequest::MergeFrom(const PerformRealTimeQCRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to.PerformRealTimeQCRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  testreadings_.MergeFrom(from.testreadings_);
  if (from.has_qcstruct()) {
    mutable_qcstruct()->::to::RealTimeQC::MergeFrom(from.qcstruct());
  }
  if (from.lastrecordedtime() != 0) {
    set_lastrecordedtime(from.lastrecordedtime());
  }
}

void PerformRealTimeQCRequest::CopyFrom(const PerformRealTimeQCRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to.PerformRealTimeQCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformRealTimeQCRequest::IsInitialized() const {

  return true;
}

void PerformRealTimeQCRequest::Swap(PerformRealTimeQCRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerformRealTimeQCRequest::InternalSwap(PerformRealTimeQCRequest* other) {
  testreadings_.UnsafeArenaSwap(&other->testreadings_);
  std::swap(qcstruct_, other->qcstruct_);
  std::swap(lastrecordedtime_, other->lastrecordedtime_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerformRealTimeQCRequest::GetTypeName() const {
  return "to.PerformRealTimeQCRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerformRealTimeQCRequest

// repeated .to.SensorReadings testReadings = 1;
int PerformRealTimeQCRequest::testreadings_size() const {
  return testreadings_.size();
}
void PerformRealTimeQCRequest::clear_testreadings() {
  testreadings_.Clear();
}
const ::to::SensorReadings& PerformRealTimeQCRequest::testreadings(int index) const {
  // @@protoc_insertion_point(field_get:to.PerformRealTimeQCRequest.testReadings)
  return testreadings_.Get(index);
}
::to::SensorReadings* PerformRealTimeQCRequest::mutable_testreadings(int index) {
  // @@protoc_insertion_point(field_mutable:to.PerformRealTimeQCRequest.testReadings)
  return testreadings_.Mutable(index);
}
::to::SensorReadings* PerformRealTimeQCRequest::add_testreadings() {
  // @@protoc_insertion_point(field_add:to.PerformRealTimeQCRequest.testReadings)
  return testreadings_.Add();
}
::google::protobuf::RepeatedPtrField< ::to::SensorReadings >*
PerformRealTimeQCRequest::mutable_testreadings() {
  // @@protoc_insertion_point(field_mutable_list:to.PerformRealTimeQCRequest.testReadings)
  return &testreadings_;
}
const ::google::protobuf::RepeatedPtrField< ::to::SensorReadings >&
PerformRealTimeQCRequest::testreadings() const {
  // @@protoc_insertion_point(field_list:to.PerformRealTimeQCRequest.testReadings)
  return testreadings_;
}

// optional .to.RealTimeQC qcStruct = 2;
bool PerformRealTimeQCRequest::has_qcstruct() const {
  return !_is_default_instance_ && qcstruct_ != NULL;
}
void PerformRealTimeQCRequest::clear_qcstruct() {
  if (GetArenaNoVirtual() == NULL && qcstruct_ != NULL) delete qcstruct_;
  qcstruct_ = NULL;
}
const ::to::RealTimeQC& PerformRealTimeQCRequest::qcstruct() const {
  // @@protoc_insertion_point(field_get:to.PerformRealTimeQCRequest.qcStruct)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return qcstruct_ != NULL ? *qcstruct_ : *default_instance().qcstruct_;
#else
  return qcstruct_ != NULL ? *qcstruct_ : *default_instance_->qcstruct_;
#endif
}
::to::RealTimeQC* PerformRealTimeQCRequest::mutable_qcstruct() {
  
  if (qcstruct_ == NULL) {
    qcstruct_ = new ::to::RealTimeQC;
  }
  // @@protoc_insertion_point(field_mutable:to.PerformRealTimeQCRequest.qcStruct)
  return qcstruct_;
}
::to::RealTimeQC* PerformRealTimeQCRequest::release_qcstruct() {
  // @@protoc_insertion_point(field_release:to.PerformRealTimeQCRequest.qcStruct)
  
  ::to::RealTimeQC* temp = qcstruct_;
  qcstruct_ = NULL;
  return temp;
}
void PerformRealTimeQCRequest::set_allocated_qcstruct(::to::RealTimeQC* qcstruct) {
  delete qcstruct_;
  qcstruct_ = qcstruct;
  if (qcstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.PerformRealTimeQCRequest.qcStruct)
}

// optional float lastRecordedTime = 3;
void PerformRealTimeQCRequest::clear_lastrecordedtime() {
  lastrecordedtime_ = 0;
}
 float PerformRealTimeQCRequest::lastrecordedtime() const {
  // @@protoc_insertion_point(field_get:to.PerformRealTimeQCRequest.lastRecordedTime)
  return lastrecordedtime_;
}
 void PerformRealTimeQCRequest::set_lastrecordedtime(float value) {
  
  lastrecordedtime_ = value;
  // @@protoc_insertion_point(field_set:to.PerformRealTimeQCRequest.lastRecordedTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)
