// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: realtime_qc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "realtime_qc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace to {

void protobuf_ShutdownFile_realtime_5fqc_2eproto() {
  delete RealTimeQC::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_realtime_5fqc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_realtime_5fqc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_realtime_5fqc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::to::protobuf_AddDesc_humidity_5fstruct_2eproto();
  RealTimeQC::default_instance_ = new RealTimeQC();
  RealTimeQC::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_realtime_5fqc_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_realtime_5fqc_2eproto_once_);
void protobuf_AddDesc_realtime_5fqc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_realtime_5fqc_2eproto_once_,
                 &protobuf_AddDesc_realtime_5fqc_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_realtime_5fqc_2eproto {
  StaticDescriptorInitializer_realtime_5fqc_2eproto() {
    protobuf_AddDesc_realtime_5fqc_2eproto();
  }
} static_descriptor_initializer_realtime_5fqc_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealTimeQC::kEnabledFieldNumber;
const int RealTimeQC::kStartTimeFieldNumber;
const int RealTimeQC::kIntervalTimeFieldNumber;
const int RealTimeQC::kTypeFieldNumber;
const int RealTimeQC::kNumPointsFieldNumber;
const int RealTimeQC::kExtra1FieldNumber;
const int RealTimeQC::kExtra2FieldNumber;
const int RealTimeQC::kExtra3FieldNumber;
const int RealTimeQC::kExtra4FieldNumber;
const int RealTimeQC::kExtra5FieldNumber;
const int RealTimeQC::kExtra6FieldNumber;
const int RealTimeQC::kContinueIfFailedFieldNumber;
const int RealTimeQC::kHumidityUntilFieldNumber;
const int RealTimeQC::kHumidityConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealTimeQC::RealTimeQC()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:to.RealTimeQC)
}

void RealTimeQC::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RealTimeQC::RealTimeQC(const RealTimeQC& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:to.RealTimeQC)
}

void RealTimeQC::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  enabled_ = false;
  starttime_ = 0;
  intervaltime_ = 0;
  type_ = 0;
  numpoints_ = 0;
  extra1_ = 0;
  extra2_ = 0;
  extra3_ = 0;
  extra4_ = 0;
  extra5_ = 0;
  extra6_ = 0;
  continueiffailed_ = false;
  humidityuntil_ = 0;
}

RealTimeQC::~RealTimeQC() {
  // @@protoc_insertion_point(destructor:to.RealTimeQC)
  SharedDtor();
}

void RealTimeQC::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RealTimeQC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RealTimeQC& RealTimeQC::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_realtime_5fqc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fqc_2eproto();
#endif
  return *default_instance_;
}

RealTimeQC* RealTimeQC::default_instance_ = NULL;

RealTimeQC* RealTimeQC::New(::google::protobuf::Arena* arena) const {
  RealTimeQC* n = new RealTimeQC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealTimeQC::Clear() {
// @@protoc_insertion_point(message_clear_start:to.RealTimeQC)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RealTimeQC, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RealTimeQC*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(starttime_, enabled_);
  ZR_(continueiffailed_, extra6_);

#undef ZR_HELPER_
#undef ZR_

  humidityconfig_.Clear();
}

bool RealTimeQC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to.RealTimeQC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startTime;
        break;
      }

      // optional int32 startTime = 2;
      case 2: {
        if (tag == 16) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_intervalTime;
        break;
      }

      // optional int32 intervalTime = 3;
      case 3: {
        if (tag == 24) {
         parse_intervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intervaltime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numPoints;
        break;
      }

      // optional int32 numPoints = 5;
      case 5: {
        if (tag == 40) {
         parse_numPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numpoints_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_extra1;
        break;
      }

      // optional double extra1 = 6;
      case 6: {
        if (tag == 49) {
         parse_extra1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extra1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_extra2;
        break;
      }

      // optional double extra2 = 7;
      case 7: {
        if (tag == 57) {
         parse_extra2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extra2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_extra3;
        break;
      }

      // optional double extra3 = 8;
      case 8: {
        if (tag == 65) {
         parse_extra3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extra3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_extra4;
        break;
      }

      // optional double extra4 = 9;
      case 9: {
        if (tag == 73) {
         parse_extra4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extra4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_extra5;
        break;
      }

      // optional double extra5 = 10;
      case 10: {
        if (tag == 81) {
         parse_extra5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extra5_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_extra6;
        break;
      }

      // optional double extra6 = 11;
      case 11: {
        if (tag == 89) {
         parse_extra6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extra6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_continueIfFailed;
        break;
      }

      // optional bool continueIfFailed = 12;
      case 12: {
        if (tag == 96) {
         parse_continueIfFailed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continueiffailed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_humidityUntil;
        break;
      }

      // optional int32 humidityUntil = 13;
      case 13: {
        if (tag == 104) {
         parse_humidityUntil:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &humidityuntil_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_humidityConfig;
        break;
      }

      // repeated .to.HumidityStruct humidityConfig = 14;
      case 14: {
        if (tag == 114) {
         parse_humidityConfig:
          DO_(input->IncrementRecursionDepth());
         parse_loop_humidityConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_humidityconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_humidityConfig;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to.RealTimeQC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to.RealTimeQC)
  return false;
#undef DO_
}

void RealTimeQC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to.RealTimeQC)
  // optional bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional int32 startTime = 2;
  if (this->starttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starttime(), output);
  }

  // optional int32 intervalTime = 3;
  if (this->intervaltime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->intervaltime(), output);
  }

  // optional int32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 numPoints = 5;
  if (this->numpoints() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numpoints(), output);
  }

  // optional double extra1 = 6;
  if (this->extra1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->extra1(), output);
  }

  // optional double extra2 = 7;
  if (this->extra2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->extra2(), output);
  }

  // optional double extra3 = 8;
  if (this->extra3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->extra3(), output);
  }

  // optional double extra4 = 9;
  if (this->extra4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->extra4(), output);
  }

  // optional double extra5 = 10;
  if (this->extra5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->extra5(), output);
  }

  // optional double extra6 = 11;
  if (this->extra6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->extra6(), output);
  }

  // optional bool continueIfFailed = 12;
  if (this->continueiffailed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->continueiffailed(), output);
  }

  // optional int32 humidityUntil = 13;
  if (this->humidityuntil() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->humidityuntil(), output);
  }

  // repeated .to.HumidityStruct humidityConfig = 14;
  for (unsigned int i = 0, n = this->humidityconfig_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->humidityconfig(i), output);
  }

  // @@protoc_insertion_point(serialize_end:to.RealTimeQC)
}

int RealTimeQC::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:to.RealTimeQC)
  int total_size = 0;

  // optional bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 startTime = 2;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->starttime());
  }

  // optional int32 intervalTime = 3;
  if (this->intervaltime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->intervaltime());
  }

  // optional int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 numPoints = 5;
  if (this->numpoints() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numpoints());
  }

  // optional double extra1 = 6;
  if (this->extra1() != 0) {
    total_size += 1 + 8;
  }

  // optional double extra2 = 7;
  if (this->extra2() != 0) {
    total_size += 1 + 8;
  }

  // optional double extra3 = 8;
  if (this->extra3() != 0) {
    total_size += 1 + 8;
  }

  // optional double extra4 = 9;
  if (this->extra4() != 0) {
    total_size += 1 + 8;
  }

  // optional double extra5 = 10;
  if (this->extra5() != 0) {
    total_size += 1 + 8;
  }

  // optional double extra6 = 11;
  if (this->extra6() != 0) {
    total_size += 1 + 8;
  }

  // optional bool continueIfFailed = 12;
  if (this->continueiffailed() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 humidityUntil = 13;
  if (this->humidityuntil() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->humidityuntil());
  }

  // repeated .to.HumidityStruct humidityConfig = 14;
  total_size += 1 * this->humidityconfig_size();
  for (int i = 0; i < this->humidityconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->humidityconfig(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeQC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RealTimeQC*>(&from));
}

void RealTimeQC::MergeFrom(const RealTimeQC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to.RealTimeQC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  humidityconfig_.MergeFrom(from.humidityconfig_);
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.starttime() != 0) {
    set_starttime(from.starttime());
  }
  if (from.intervaltime() != 0) {
    set_intervaltime(from.intervaltime());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.numpoints() != 0) {
    set_numpoints(from.numpoints());
  }
  if (from.extra1() != 0) {
    set_extra1(from.extra1());
  }
  if (from.extra2() != 0) {
    set_extra2(from.extra2());
  }
  if (from.extra3() != 0) {
    set_extra3(from.extra3());
  }
  if (from.extra4() != 0) {
    set_extra4(from.extra4());
  }
  if (from.extra5() != 0) {
    set_extra5(from.extra5());
  }
  if (from.extra6() != 0) {
    set_extra6(from.extra6());
  }
  if (from.continueiffailed() != 0) {
    set_continueiffailed(from.continueiffailed());
  }
  if (from.humidityuntil() != 0) {
    set_humidityuntil(from.humidityuntil());
  }
}

void RealTimeQC::CopyFrom(const RealTimeQC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to.RealTimeQC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeQC::IsInitialized() const {

  return true;
}

void RealTimeQC::Swap(RealTimeQC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealTimeQC::InternalSwap(RealTimeQC* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(starttime_, other->starttime_);
  std::swap(intervaltime_, other->intervaltime_);
  std::swap(type_, other->type_);
  std::swap(numpoints_, other->numpoints_);
  std::swap(extra1_, other->extra1_);
  std::swap(extra2_, other->extra2_);
  std::swap(extra3_, other->extra3_);
  std::swap(extra4_, other->extra4_);
  std::swap(extra5_, other->extra5_);
  std::swap(extra6_, other->extra6_);
  std::swap(continueiffailed_, other->continueiffailed_);
  std::swap(humidityuntil_, other->humidityuntil_);
  humidityconfig_.UnsafeArenaSwap(&other->humidityconfig_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RealTimeQC::GetTypeName() const {
  return "to.RealTimeQC";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealTimeQC

// optional bool enabled = 1;
void RealTimeQC::clear_enabled() {
  enabled_ = false;
}
 bool RealTimeQC::enabled() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.enabled)
  return enabled_;
}
 void RealTimeQC::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.enabled)
}

// optional int32 startTime = 2;
void RealTimeQC::clear_starttime() {
  starttime_ = 0;
}
 ::google::protobuf::int32 RealTimeQC::starttime() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.startTime)
  return starttime_;
}
 void RealTimeQC::set_starttime(::google::protobuf::int32 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.startTime)
}

// optional int32 intervalTime = 3;
void RealTimeQC::clear_intervaltime() {
  intervaltime_ = 0;
}
 ::google::protobuf::int32 RealTimeQC::intervaltime() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.intervalTime)
  return intervaltime_;
}
 void RealTimeQC::set_intervaltime(::google::protobuf::int32 value) {
  
  intervaltime_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.intervalTime)
}

// optional int32 type = 4;
void RealTimeQC::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 RealTimeQC::type() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.type)
  return type_;
}
 void RealTimeQC::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.type)
}

// optional int32 numPoints = 5;
void RealTimeQC::clear_numpoints() {
  numpoints_ = 0;
}
 ::google::protobuf::int32 RealTimeQC::numpoints() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.numPoints)
  return numpoints_;
}
 void RealTimeQC::set_numpoints(::google::protobuf::int32 value) {
  
  numpoints_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.numPoints)
}

// optional double extra1 = 6;
void RealTimeQC::clear_extra1() {
  extra1_ = 0;
}
 double RealTimeQC::extra1() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.extra1)
  return extra1_;
}
 void RealTimeQC::set_extra1(double value) {
  
  extra1_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.extra1)
}

// optional double extra2 = 7;
void RealTimeQC::clear_extra2() {
  extra2_ = 0;
}
 double RealTimeQC::extra2() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.extra2)
  return extra2_;
}
 void RealTimeQC::set_extra2(double value) {
  
  extra2_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.extra2)
}

// optional double extra3 = 8;
void RealTimeQC::clear_extra3() {
  extra3_ = 0;
}
 double RealTimeQC::extra3() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.extra3)
  return extra3_;
}
 void RealTimeQC::set_extra3(double value) {
  
  extra3_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.extra3)
}

// optional double extra4 = 9;
void RealTimeQC::clear_extra4() {
  extra4_ = 0;
}
 double RealTimeQC::extra4() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.extra4)
  return extra4_;
}
 void RealTimeQC::set_extra4(double value) {
  
  extra4_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.extra4)
}

// optional double extra5 = 10;
void RealTimeQC::clear_extra5() {
  extra5_ = 0;
}
 double RealTimeQC::extra5() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.extra5)
  return extra5_;
}
 void RealTimeQC::set_extra5(double value) {
  
  extra5_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.extra5)
}

// optional double extra6 = 11;
void RealTimeQC::clear_extra6() {
  extra6_ = 0;
}
 double RealTimeQC::extra6() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.extra6)
  return extra6_;
}
 void RealTimeQC::set_extra6(double value) {
  
  extra6_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.extra6)
}

// optional bool continueIfFailed = 12;
void RealTimeQC::clear_continueiffailed() {
  continueiffailed_ = false;
}
 bool RealTimeQC::continueiffailed() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.continueIfFailed)
  return continueiffailed_;
}
 void RealTimeQC::set_continueiffailed(bool value) {
  
  continueiffailed_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.continueIfFailed)
}

// optional int32 humidityUntil = 13;
void RealTimeQC::clear_humidityuntil() {
  humidityuntil_ = 0;
}
 ::google::protobuf::int32 RealTimeQC::humidityuntil() const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.humidityUntil)
  return humidityuntil_;
}
 void RealTimeQC::set_humidityuntil(::google::protobuf::int32 value) {
  
  humidityuntil_ = value;
  // @@protoc_insertion_point(field_set:to.RealTimeQC.humidityUntil)
}

// repeated .to.HumidityStruct humidityConfig = 14;
int RealTimeQC::humidityconfig_size() const {
  return humidityconfig_.size();
}
void RealTimeQC::clear_humidityconfig() {
  humidityconfig_.Clear();
}
const ::to::HumidityStruct& RealTimeQC::humidityconfig(int index) const {
  // @@protoc_insertion_point(field_get:to.RealTimeQC.humidityConfig)
  return humidityconfig_.Get(index);
}
::to::HumidityStruct* RealTimeQC::mutable_humidityconfig(int index) {
  // @@protoc_insertion_point(field_mutable:to.RealTimeQC.humidityConfig)
  return humidityconfig_.Mutable(index);
}
::to::HumidityStruct* RealTimeQC::add_humidityconfig() {
  // @@protoc_insertion_point(field_add:to.RealTimeQC.humidityConfig)
  return humidityconfig_.Add();
}
::google::protobuf::RepeatedPtrField< ::to::HumidityStruct >*
RealTimeQC::mutable_humidityconfig() {
  // @@protoc_insertion_point(field_mutable_list:to.RealTimeQC.humidityConfig)
  return &humidityconfig_;
}
const ::google::protobuf::RepeatedPtrField< ::to::HumidityStruct >&
RealTimeQC::humidityconfig() const {
  // @@protoc_insertion_point(field_list:to.RealTimeQC.humidityConfig)
  return humidityconfig_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)
