// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compute_corrected_results_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compute_corrected_results_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace to {

void protobuf_ShutdownFile_compute_5fcorrected_5fresults_5frequest_2eproto() {
  delete ComputeCorrectedResultsRequest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::to::protobuf_AddDesc_final_5fresult_2eproto();
  ComputeCorrectedResultsRequest::default_instance_ = new ComputeCorrectedResultsRequest();
  ComputeCorrectedResultsRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compute_5fcorrected_5fresults_5frequest_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto_once_);
void protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto_once_,
                 &protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compute_5fcorrected_5fresults_5frequest_2eproto {
  StaticDescriptorInitializer_compute_5fcorrected_5fresults_5frequest_2eproto() {
    protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto();
  }
} static_descriptor_initializer_compute_5fcorrected_5fresults_5frequest_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputeCorrectedResultsRequest::kMeasuredResultsFieldNumber;
const int ComputeCorrectedResultsRequest::kCorrectedResultsFieldNumber;
const int ComputeCorrectedResultsRequest::kTemperatureFieldNumber;
const int ComputeCorrectedResultsRequest::kPressureFieldNumber;
const int ComputeCorrectedResultsRequest::kFiO2FieldNumber;
const int ComputeCorrectedResultsRequest::kRQFieldNumber;
const int ComputeCorrectedResultsRequest::kCalculateAlveolarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputeCorrectedResultsRequest::ComputeCorrectedResultsRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:to.ComputeCorrectedResultsRequest)
}

void ComputeCorrectedResultsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ComputeCorrectedResultsRequest::ComputeCorrectedResultsRequest(const ComputeCorrectedResultsRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:to.ComputeCorrectedResultsRequest)
}

void ComputeCorrectedResultsRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  temperature_ = 0;
  pressure_ = 0;
  fio2_ = 0;
  rq_ = 0;
  calculatealveolar_ = false;
}

ComputeCorrectedResultsRequest::~ComputeCorrectedResultsRequest() {
  // @@protoc_insertion_point(destructor:to.ComputeCorrectedResultsRequest)
  SharedDtor();
}

void ComputeCorrectedResultsRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ComputeCorrectedResultsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ComputeCorrectedResultsRequest& ComputeCorrectedResultsRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compute_5fcorrected_5fresults_5frequest_2eproto();
#endif
  return *default_instance_;
}

ComputeCorrectedResultsRequest* ComputeCorrectedResultsRequest::default_instance_ = NULL;

ComputeCorrectedResultsRequest* ComputeCorrectedResultsRequest::New(::google::protobuf::Arena* arena) const {
  ComputeCorrectedResultsRequest* n = new ComputeCorrectedResultsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputeCorrectedResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:to.ComputeCorrectedResultsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ComputeCorrectedResultsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ComputeCorrectedResultsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(temperature_, calculatealveolar_);

#undef ZR_HELPER_
#undef ZR_

  measuredresults_.Clear();
  correctedresults_.Clear();
}

bool ComputeCorrectedResultsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to.ComputeCorrectedResultsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .to.FinalResult measuredResults = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_measuredResults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_measuredresults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_measuredResults;
        if (input->ExpectTag(18)) goto parse_loop_correctedResults;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .to.FinalResult correctedResults = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_correctedResults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_correctedresults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_correctedResults;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(25)) goto parse_temperature;
        break;
      }

      // optional double temperature = 3;
      case 3: {
        if (tag == 25) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pressure;
        break;
      }

      // optional double pressure = 4;
      case 4: {
        if (tag == 33) {
         parse_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pressure_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_FiO2;
        break;
      }

      // optional double FiO2 = 5;
      case 5: {
        if (tag == 41) {
         parse_FiO2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fio2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_RQ;
        break;
      }

      // optional double RQ = 6;
      case 6: {
        if (tag == 49) {
         parse_RQ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_calculateAlveolar;
        break;
      }

      // optional bool calculateAlveolar = 7;
      case 7: {
        if (tag == 56) {
         parse_calculateAlveolar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calculatealveolar_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to.ComputeCorrectedResultsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to.ComputeCorrectedResultsRequest)
  return false;
#undef DO_
}

void ComputeCorrectedResultsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to.ComputeCorrectedResultsRequest)
  // repeated .to.FinalResult measuredResults = 1;
  for (unsigned int i = 0, n = this->measuredresults_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->measuredresults(i), output);
  }

  // repeated .to.FinalResult correctedResults = 2;
  for (unsigned int i = 0, n = this->correctedresults_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->correctedresults(i), output);
  }

  // optional double temperature = 3;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->temperature(), output);
  }

  // optional double pressure = 4;
  if (this->pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pressure(), output);
  }

  // optional double FiO2 = 5;
  if (this->fio2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fio2(), output);
  }

  // optional double RQ = 6;
  if (this->rq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rq(), output);
  }

  // optional bool calculateAlveolar = 7;
  if (this->calculatealveolar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->calculatealveolar(), output);
  }

  // @@protoc_insertion_point(serialize_end:to.ComputeCorrectedResultsRequest)
}

int ComputeCorrectedResultsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:to.ComputeCorrectedResultsRequest)
  int total_size = 0;

  // optional double temperature = 3;
  if (this->temperature() != 0) {
    total_size += 1 + 8;
  }

  // optional double pressure = 4;
  if (this->pressure() != 0) {
    total_size += 1 + 8;
  }

  // optional double FiO2 = 5;
  if (this->fio2() != 0) {
    total_size += 1 + 8;
  }

  // optional double RQ = 6;
  if (this->rq() != 0) {
    total_size += 1 + 8;
  }

  // optional bool calculateAlveolar = 7;
  if (this->calculatealveolar() != 0) {
    total_size += 1 + 1;
  }

  // repeated .to.FinalResult measuredResults = 1;
  total_size += 1 * this->measuredresults_size();
  for (int i = 0; i < this->measuredresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->measuredresults(i));
  }

  // repeated .to.FinalResult correctedResults = 2;
  total_size += 1 * this->correctedresults_size();
  for (int i = 0; i < this->correctedresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->correctedresults(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputeCorrectedResultsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComputeCorrectedResultsRequest*>(&from));
}

void ComputeCorrectedResultsRequest::MergeFrom(const ComputeCorrectedResultsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to.ComputeCorrectedResultsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  measuredresults_.MergeFrom(from.measuredresults_);
  correctedresults_.MergeFrom(from.correctedresults_);
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.pressure() != 0) {
    set_pressure(from.pressure());
  }
  if (from.fio2() != 0) {
    set_fio2(from.fio2());
  }
  if (from.rq() != 0) {
    set_rq(from.rq());
  }
  if (from.calculatealveolar() != 0) {
    set_calculatealveolar(from.calculatealveolar());
  }
}

void ComputeCorrectedResultsRequest::CopyFrom(const ComputeCorrectedResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to.ComputeCorrectedResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeCorrectedResultsRequest::IsInitialized() const {

  return true;
}

void ComputeCorrectedResultsRequest::Swap(ComputeCorrectedResultsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputeCorrectedResultsRequest::InternalSwap(ComputeCorrectedResultsRequest* other) {
  measuredresults_.UnsafeArenaSwap(&other->measuredresults_);
  correctedresults_.UnsafeArenaSwap(&other->correctedresults_);
  std::swap(temperature_, other->temperature_);
  std::swap(pressure_, other->pressure_);
  std::swap(fio2_, other->fio2_);
  std::swap(rq_, other->rq_);
  std::swap(calculatealveolar_, other->calculatealveolar_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ComputeCorrectedResultsRequest::GetTypeName() const {
  return "to.ComputeCorrectedResultsRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputeCorrectedResultsRequest

// repeated .to.FinalResult measuredResults = 1;
int ComputeCorrectedResultsRequest::measuredresults_size() const {
  return measuredresults_.size();
}
void ComputeCorrectedResultsRequest::clear_measuredresults() {
  measuredresults_.Clear();
}
const ::to::FinalResult& ComputeCorrectedResultsRequest::measuredresults(int index) const {
  // @@protoc_insertion_point(field_get:to.ComputeCorrectedResultsRequest.measuredResults)
  return measuredresults_.Get(index);
}
::to::FinalResult* ComputeCorrectedResultsRequest::mutable_measuredresults(int index) {
  // @@protoc_insertion_point(field_mutable:to.ComputeCorrectedResultsRequest.measuredResults)
  return measuredresults_.Mutable(index);
}
::to::FinalResult* ComputeCorrectedResultsRequest::add_measuredresults() {
  // @@protoc_insertion_point(field_add:to.ComputeCorrectedResultsRequest.measuredResults)
  return measuredresults_.Add();
}
::google::protobuf::RepeatedPtrField< ::to::FinalResult >*
ComputeCorrectedResultsRequest::mutable_measuredresults() {
  // @@protoc_insertion_point(field_mutable_list:to.ComputeCorrectedResultsRequest.measuredResults)
  return &measuredresults_;
}
const ::google::protobuf::RepeatedPtrField< ::to::FinalResult >&
ComputeCorrectedResultsRequest::measuredresults() const {
  // @@protoc_insertion_point(field_list:to.ComputeCorrectedResultsRequest.measuredResults)
  return measuredresults_;
}

// repeated .to.FinalResult correctedResults = 2;
int ComputeCorrectedResultsRequest::correctedresults_size() const {
  return correctedresults_.size();
}
void ComputeCorrectedResultsRequest::clear_correctedresults() {
  correctedresults_.Clear();
}
const ::to::FinalResult& ComputeCorrectedResultsRequest::correctedresults(int index) const {
  // @@protoc_insertion_point(field_get:to.ComputeCorrectedResultsRequest.correctedResults)
  return correctedresults_.Get(index);
}
::to::FinalResult* ComputeCorrectedResultsRequest::mutable_correctedresults(int index) {
  // @@protoc_insertion_point(field_mutable:to.ComputeCorrectedResultsRequest.correctedResults)
  return correctedresults_.Mutable(index);
}
::to::FinalResult* ComputeCorrectedResultsRequest::add_correctedresults() {
  // @@protoc_insertion_point(field_add:to.ComputeCorrectedResultsRequest.correctedResults)
  return correctedresults_.Add();
}
::google::protobuf::RepeatedPtrField< ::to::FinalResult >*
ComputeCorrectedResultsRequest::mutable_correctedresults() {
  // @@protoc_insertion_point(field_mutable_list:to.ComputeCorrectedResultsRequest.correctedResults)
  return &correctedresults_;
}
const ::google::protobuf::RepeatedPtrField< ::to::FinalResult >&
ComputeCorrectedResultsRequest::correctedresults() const {
  // @@protoc_insertion_point(field_list:to.ComputeCorrectedResultsRequest.correctedResults)
  return correctedresults_;
}

// optional double temperature = 3;
void ComputeCorrectedResultsRequest::clear_temperature() {
  temperature_ = 0;
}
 double ComputeCorrectedResultsRequest::temperature() const {
  // @@protoc_insertion_point(field_get:to.ComputeCorrectedResultsRequest.temperature)
  return temperature_;
}
 void ComputeCorrectedResultsRequest::set_temperature(double value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:to.ComputeCorrectedResultsRequest.temperature)
}

// optional double pressure = 4;
void ComputeCorrectedResultsRequest::clear_pressure() {
  pressure_ = 0;
}
 double ComputeCorrectedResultsRequest::pressure() const {
  // @@protoc_insertion_point(field_get:to.ComputeCorrectedResultsRequest.pressure)
  return pressure_;
}
 void ComputeCorrectedResultsRequest::set_pressure(double value) {
  
  pressure_ = value;
  // @@protoc_insertion_point(field_set:to.ComputeCorrectedResultsRequest.pressure)
}

// optional double FiO2 = 5;
void ComputeCorrectedResultsRequest::clear_fio2() {
  fio2_ = 0;
}
 double ComputeCorrectedResultsRequest::fio2() const {
  // @@protoc_insertion_point(field_get:to.ComputeCorrectedResultsRequest.FiO2)
  return fio2_;
}
 void ComputeCorrectedResultsRequest::set_fio2(double value) {
  
  fio2_ = value;
  // @@protoc_insertion_point(field_set:to.ComputeCorrectedResultsRequest.FiO2)
}

// optional double RQ = 6;
void ComputeCorrectedResultsRequest::clear_rq() {
  rq_ = 0;
}
 double ComputeCorrectedResultsRequest::rq() const {
  // @@protoc_insertion_point(field_get:to.ComputeCorrectedResultsRequest.RQ)
  return rq_;
}
 void ComputeCorrectedResultsRequest::set_rq(double value) {
  
  rq_ = value;
  // @@protoc_insertion_point(field_set:to.ComputeCorrectedResultsRequest.RQ)
}

// optional bool calculateAlveolar = 7;
void ComputeCorrectedResultsRequest::clear_calculatealveolar() {
  calculatealveolar_ = false;
}
 bool ComputeCorrectedResultsRequest::calculatealveolar() const {
  // @@protoc_insertion_point(field_get:to.ComputeCorrectedResultsRequest.calculateAlveolar)
  return calculatealveolar_;
}
 void ComputeCorrectedResultsRequest::set_calculatealveolar(bool value) {
  
  calculatealveolar_ = value;
  // @@protoc_insertion_point(field_set:to.ComputeCorrectedResultsRequest.calculateAlveolar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)
