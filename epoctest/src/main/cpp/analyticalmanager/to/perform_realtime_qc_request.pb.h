// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perform_realtime_qc_request.proto

#ifndef PROTOBUF_perform_5frealtime_5fqc_5frequest_2eproto__INCLUDED
#define PROTOBUF_perform_5frealtime_5fqc_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "sensor_readings.pb.h"
#include "realtime_qc.pb.h"
// @@protoc_insertion_point(includes)

namespace to {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto();
void protobuf_AssignDesc_perform_5frealtime_5fqc_5frequest_2eproto();
void protobuf_ShutdownFile_perform_5frealtime_5fqc_5frequest_2eproto();

class PerformRealTimeQCRequest;

// ===================================================================

class PerformRealTimeQCRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:to.PerformRealTimeQCRequest) */ {
 public:
  PerformRealTimeQCRequest();
  virtual ~PerformRealTimeQCRequest();

  PerformRealTimeQCRequest(const PerformRealTimeQCRequest& from);

  inline PerformRealTimeQCRequest& operator=(const PerformRealTimeQCRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const PerformRealTimeQCRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PerformRealTimeQCRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PerformRealTimeQCRequest* other);

  // implements Message ----------------------------------------------

  inline PerformRealTimeQCRequest* New() const { return New(NULL); }

  PerformRealTimeQCRequest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PerformRealTimeQCRequest& from);
  void MergeFrom(const PerformRealTimeQCRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerformRealTimeQCRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .to.SensorReadings testReadings = 1;
  int testreadings_size() const;
  void clear_testreadings();
  static const int kTestReadingsFieldNumber = 1;
  const ::to::SensorReadings& testreadings(int index) const;
  ::to::SensorReadings* mutable_testreadings(int index);
  ::to::SensorReadings* add_testreadings();
  ::google::protobuf::RepeatedPtrField< ::to::SensorReadings >*
      mutable_testreadings();
  const ::google::protobuf::RepeatedPtrField< ::to::SensorReadings >&
      testreadings() const;

  // optional .to.RealTimeQC qcStruct = 2;
  bool has_qcstruct() const;
  void clear_qcstruct();
  static const int kQcStructFieldNumber = 2;
  const ::to::RealTimeQC& qcstruct() const;
  ::to::RealTimeQC* mutable_qcstruct();
  ::to::RealTimeQC* release_qcstruct();
  void set_allocated_qcstruct(::to::RealTimeQC* qcstruct);

  // optional float lastRecordedTime = 3;
  void clear_lastrecordedtime();
  static const int kLastRecordedTimeFieldNumber = 3;
  float lastrecordedtime() const;
  void set_lastrecordedtime(float value);

  // @@protoc_insertion_point(class_scope:to.PerformRealTimeQCRequest)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::to::SensorReadings > testreadings_;
  ::to::RealTimeQC* qcstruct_;
  float lastrecordedtime_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_perform_5frealtime_5fqc_5frequest_2eproto();
  #endif
  friend void protobuf_AssignDesc_perform_5frealtime_5fqc_5frequest_2eproto();
  friend void protobuf_ShutdownFile_perform_5frealtime_5fqc_5frequest_2eproto();

  void InitAsDefaultInstance();
  static PerformRealTimeQCRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PerformRealTimeQCRequest

// repeated .to.SensorReadings testReadings = 1;
inline int PerformRealTimeQCRequest::testreadings_size() const {
  return testreadings_.size();
}
inline void PerformRealTimeQCRequest::clear_testreadings() {
  testreadings_.Clear();
}
inline const ::to::SensorReadings& PerformRealTimeQCRequest::testreadings(int index) const {
  // @@protoc_insertion_point(field_get:to.PerformRealTimeQCRequest.testReadings)
  return testreadings_.Get(index);
}
inline ::to::SensorReadings* PerformRealTimeQCRequest::mutable_testreadings(int index) {
  // @@protoc_insertion_point(field_mutable:to.PerformRealTimeQCRequest.testReadings)
  return testreadings_.Mutable(index);
}
inline ::to::SensorReadings* PerformRealTimeQCRequest::add_testreadings() {
  // @@protoc_insertion_point(field_add:to.PerformRealTimeQCRequest.testReadings)
  return testreadings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::to::SensorReadings >*
PerformRealTimeQCRequest::mutable_testreadings() {
  // @@protoc_insertion_point(field_mutable_list:to.PerformRealTimeQCRequest.testReadings)
  return &testreadings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::to::SensorReadings >&
PerformRealTimeQCRequest::testreadings() const {
  // @@protoc_insertion_point(field_list:to.PerformRealTimeQCRequest.testReadings)
  return testreadings_;
}

// optional .to.RealTimeQC qcStruct = 2;
inline bool PerformRealTimeQCRequest::has_qcstruct() const {
  return !_is_default_instance_ && qcstruct_ != NULL;
}
inline void PerformRealTimeQCRequest::clear_qcstruct() {
  if (GetArenaNoVirtual() == NULL && qcstruct_ != NULL) delete qcstruct_;
  qcstruct_ = NULL;
}
inline const ::to::RealTimeQC& PerformRealTimeQCRequest::qcstruct() const {
  // @@protoc_insertion_point(field_get:to.PerformRealTimeQCRequest.qcStruct)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return qcstruct_ != NULL ? *qcstruct_ : *default_instance().qcstruct_;
#else
  return qcstruct_ != NULL ? *qcstruct_ : *default_instance_->qcstruct_;
#endif
}
inline ::to::RealTimeQC* PerformRealTimeQCRequest::mutable_qcstruct() {
  
  if (qcstruct_ == NULL) {
    qcstruct_ = new ::to::RealTimeQC;
  }
  // @@protoc_insertion_point(field_mutable:to.PerformRealTimeQCRequest.qcStruct)
  return qcstruct_;
}
inline ::to::RealTimeQC* PerformRealTimeQCRequest::release_qcstruct() {
  // @@protoc_insertion_point(field_release:to.PerformRealTimeQCRequest.qcStruct)
  
  ::to::RealTimeQC* temp = qcstruct_;
  qcstruct_ = NULL;
  return temp;
}
inline void PerformRealTimeQCRequest::set_allocated_qcstruct(::to::RealTimeQC* qcstruct) {
  delete qcstruct_;
  qcstruct_ = qcstruct;
  if (qcstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.PerformRealTimeQCRequest.qcStruct)
}

// optional float lastRecordedTime = 3;
inline void PerformRealTimeQCRequest::clear_lastrecordedtime() {
  lastrecordedtime_ = 0;
}
inline float PerformRealTimeQCRequest::lastrecordedtime() const {
  // @@protoc_insertion_point(field_get:to.PerformRealTimeQCRequest.lastRecordedTime)
  return lastrecordedtime_;
}
inline void PerformRealTimeQCRequest::set_lastrecordedtime(float value) {
  
  lastrecordedtime_ = value;
  // @@protoc_insertion_point(field_set:to.PerformRealTimeQCRequest.lastRecordedTime)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perform_5frealtime_5fqc_5frequest_2eproto__INCLUDED
