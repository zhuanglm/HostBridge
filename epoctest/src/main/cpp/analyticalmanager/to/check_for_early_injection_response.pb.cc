// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: check_for_early_injection_response.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "check_for_early_injection_response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace to {

void protobuf_ShutdownFile_check_5ffor_5fearly_5finjection_5fresponse_2eproto() {
  delete CheckForEarlyInjectionResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::to::protobuf_AddDesc_sensor_5freadings_2eproto();
  CheckForEarlyInjectionResponse::default_instance_ = new CheckForEarlyInjectionResponse();
  CheckForEarlyInjectionResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_check_5ffor_5fearly_5finjection_5fresponse_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto_once_);
void protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto_once_,
                 &protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_check_5ffor_5fearly_5finjection_5fresponse_2eproto {
  StaticDescriptorInitializer_check_5ffor_5fearly_5finjection_5fresponse_2eproto() {
    protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto();
  }
} static_descriptor_initializer_check_5ffor_5fearly_5finjection_5fresponse_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckForEarlyInjectionResponse::kErrorCodeFieldNumber;
const int CheckForEarlyInjectionResponse::kErrorMessageFieldNumber;
const int CheckForEarlyInjectionResponse::kAmReturnCodeFieldNumber;
const int CheckForEarlyInjectionResponse::kHematocritReadingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckForEarlyInjectionResponse::CheckForEarlyInjectionResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:to.CheckForEarlyInjectionResponse)
}

void CheckForEarlyInjectionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hematocritreadings_ = const_cast< ::to::SensorReadings*>(
      ::to::SensorReadings::internal_default_instance());
#else
  hematocritreadings_ = const_cast< ::to::SensorReadings*>(&::to::SensorReadings::default_instance());
#endif
}

CheckForEarlyInjectionResponse::CheckForEarlyInjectionResponse(const CheckForEarlyInjectionResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:to.CheckForEarlyInjectionResponse)
}

void CheckForEarlyInjectionResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 0;
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amreturncode_ = 0;
  hematocritreadings_ = NULL;
}

CheckForEarlyInjectionResponse::~CheckForEarlyInjectionResponse() {
  // @@protoc_insertion_point(destructor:to.CheckForEarlyInjectionResponse)
  SharedDtor();
}

void CheckForEarlyInjectionResponse::SharedDtor() {
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hematocritreadings_;
  }
}

void CheckForEarlyInjectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckForEarlyInjectionResponse& CheckForEarlyInjectionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_check_5ffor_5fearly_5finjection_5fresponse_2eproto();
#endif
  return *default_instance_;
}

CheckForEarlyInjectionResponse* CheckForEarlyInjectionResponse::default_instance_ = NULL;

CheckForEarlyInjectionResponse* CheckForEarlyInjectionResponse::New(::google::protobuf::Arena* arena) const {
  CheckForEarlyInjectionResponse* n = new CheckForEarlyInjectionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckForEarlyInjectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:to.CheckForEarlyInjectionResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CheckForEarlyInjectionResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CheckForEarlyInjectionResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(errorcode_, amreturncode_);
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && hematocritreadings_ != NULL) delete hematocritreadings_;
  hematocritreadings_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool CheckForEarlyInjectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to.CheckForEarlyInjectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errorCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errorMessage;
        break;
      }

      // optional string errorMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to.CheckForEarlyInjectionResponse.errorMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_amReturnCode;
        break;
      }

      // optional int32 amReturnCode = 3;
      case 3: {
        if (tag == 24) {
         parse_amReturnCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amreturncode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hematocritReadings;
        break;
      }

      // optional .to.SensorReadings hematocritReadings = 4;
      case 4: {
        if (tag == 34) {
         parse_hematocritReadings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hematocritreadings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to.CheckForEarlyInjectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to.CheckForEarlyInjectionResponse)
  return false;
#undef DO_
}

void CheckForEarlyInjectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to.CheckForEarlyInjectionResponse)
  // optional int32 errorCode = 1;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to.CheckForEarlyInjectionResponse.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormessage(), output);
  }

  // optional int32 amReturnCode = 3;
  if (this->amreturncode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->amreturncode(), output);
  }

  // optional .to.SensorReadings hematocritReadings = 4;
  if (this->has_hematocritreadings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->hematocritreadings_, output);
  }

  // @@protoc_insertion_point(serialize_end:to.CheckForEarlyInjectionResponse)
}

int CheckForEarlyInjectionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:to.CheckForEarlyInjectionResponse)
  int total_size = 0;

  // optional int32 errorCode = 1;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // optional int32 amReturnCode = 3;
  if (this->amreturncode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amreturncode());
  }

  // optional .to.SensorReadings hematocritReadings = 4;
  if (this->has_hematocritreadings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hematocritreadings_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckForEarlyInjectionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckForEarlyInjectionResponse*>(&from));
}

void CheckForEarlyInjectionResponse::MergeFrom(const CheckForEarlyInjectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to.CheckForEarlyInjectionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.amreturncode() != 0) {
    set_amreturncode(from.amreturncode());
  }
  if (from.has_hematocritreadings()) {
    mutable_hematocritreadings()->::to::SensorReadings::MergeFrom(from.hematocritreadings());
  }
}

void CheckForEarlyInjectionResponse::CopyFrom(const CheckForEarlyInjectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to.CheckForEarlyInjectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckForEarlyInjectionResponse::IsInitialized() const {

  return true;
}

void CheckForEarlyInjectionResponse::Swap(CheckForEarlyInjectionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckForEarlyInjectionResponse::InternalSwap(CheckForEarlyInjectionResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  errormessage_.Swap(&other->errormessage_);
  std::swap(amreturncode_, other->amreturncode_);
  std::swap(hematocritreadings_, other->hematocritreadings_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckForEarlyInjectionResponse::GetTypeName() const {
  return "to.CheckForEarlyInjectionResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckForEarlyInjectionResponse

// optional int32 errorCode = 1;
void CheckForEarlyInjectionResponse::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 CheckForEarlyInjectionResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionResponse.errorCode)
  return errorcode_;
}
 void CheckForEarlyInjectionResponse::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionResponse.errorCode)
}

// optional string errorMessage = 2;
void CheckForEarlyInjectionResponse::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckForEarlyInjectionResponse::errormessage() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionResponse.errorMessage)
  return errormessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckForEarlyInjectionResponse::set_errormessage(const ::std::string& value) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionResponse.errorMessage)
}
 void CheckForEarlyInjectionResponse::set_errormessage(const char* value) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.CheckForEarlyInjectionResponse.errorMessage)
}
 void CheckForEarlyInjectionResponse::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.CheckForEarlyInjectionResponse.errorMessage)
}
 ::std::string* CheckForEarlyInjectionResponse::mutable_errormessage() {
  
  // @@protoc_insertion_point(field_mutable:to.CheckForEarlyInjectionResponse.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckForEarlyInjectionResponse::release_errormessage() {
  // @@protoc_insertion_point(field_release:to.CheckForEarlyInjectionResponse.errorMessage)
  
  return errormessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckForEarlyInjectionResponse::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:to.CheckForEarlyInjectionResponse.errorMessage)
}

// optional int32 amReturnCode = 3;
void CheckForEarlyInjectionResponse::clear_amreturncode() {
  amreturncode_ = 0;
}
 ::google::protobuf::int32 CheckForEarlyInjectionResponse::amreturncode() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionResponse.amReturnCode)
  return amreturncode_;
}
 void CheckForEarlyInjectionResponse::set_amreturncode(::google::protobuf::int32 value) {
  
  amreturncode_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionResponse.amReturnCode)
}

// optional .to.SensorReadings hematocritReadings = 4;
bool CheckForEarlyInjectionResponse::has_hematocritreadings() const {
  return !_is_default_instance_ && hematocritreadings_ != NULL;
}
void CheckForEarlyInjectionResponse::clear_hematocritreadings() {
  if (GetArenaNoVirtual() == NULL && hematocritreadings_ != NULL) delete hematocritreadings_;
  hematocritreadings_ = NULL;
}
const ::to::SensorReadings& CheckForEarlyInjectionResponse::hematocritreadings() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionResponse.hematocritReadings)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return hematocritreadings_ != NULL ? *hematocritreadings_ : *default_instance().hematocritreadings_;
#else
  return hematocritreadings_ != NULL ? *hematocritreadings_ : *default_instance_->hematocritreadings_;
#endif
}
::to::SensorReadings* CheckForEarlyInjectionResponse::mutable_hematocritreadings() {
  
  if (hematocritreadings_ == NULL) {
    hematocritreadings_ = new ::to::SensorReadings;
  }
  // @@protoc_insertion_point(field_mutable:to.CheckForEarlyInjectionResponse.hematocritReadings)
  return hematocritreadings_;
}
::to::SensorReadings* CheckForEarlyInjectionResponse::release_hematocritreadings() {
  // @@protoc_insertion_point(field_release:to.CheckForEarlyInjectionResponse.hematocritReadings)
  
  ::to::SensorReadings* temp = hematocritreadings_;
  hematocritreadings_ = NULL;
  return temp;
}
void CheckForEarlyInjectionResponse::set_allocated_hematocritreadings(::to::SensorReadings* hematocritreadings) {
  delete hematocritreadings_;
  hematocritreadings_ = hematocritreadings;
  if (hematocritreadings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.CheckForEarlyInjectionResponse.hematocritReadings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)
