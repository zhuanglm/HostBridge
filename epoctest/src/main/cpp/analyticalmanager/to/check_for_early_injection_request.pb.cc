// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: check_for_early_injection_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "check_for_early_injection_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace to {

void protobuf_ShutdownFile_check_5ffor_5fearly_5finjection_5frequest_2eproto() {
  delete CheckForEarlyInjectionRequest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::to::protobuf_AddDesc_sensor_5freadings_2eproto();
  CheckForEarlyInjectionRequest::default_instance_ = new CheckForEarlyInjectionRequest();
  CheckForEarlyInjectionRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_check_5ffor_5fearly_5finjection_5frequest_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto_once_);
void protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto_once_,
                 &protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_check_5ffor_5fearly_5finjection_5frequest_2eproto {
  StaticDescriptorInitializer_check_5ffor_5fearly_5finjection_5frequest_2eproto() {
    protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto();
  }
} static_descriptor_initializer_check_5ffor_5fearly_5finjection_5frequest_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckForEarlyInjectionRequest::kHematocritReadingsFieldNumber;
const int CheckForEarlyInjectionRequest::kTopHeaterReadingsFieldNumber;
const int CheckForEarlyInjectionRequest::kPreviousReturnCodeFieldNumber;
const int CheckForEarlyInjectionRequest::kAirAfterFluidThresholdFieldNumber;
const int CheckForEarlyInjectionRequest::kLastRecordedTimeFieldNumber;
const int CheckForEarlyInjectionRequest::kFirstFluidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckForEarlyInjectionRequest::CheckForEarlyInjectionRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:to.CheckForEarlyInjectionRequest)
}

void CheckForEarlyInjectionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hematocritreadings_ = const_cast< ::to::SensorReadings*>(
      ::to::SensorReadings::internal_default_instance());
#else
  hematocritreadings_ = const_cast< ::to::SensorReadings*>(&::to::SensorReadings::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  topheaterreadings_ = const_cast< ::to::SensorReadings*>(
      ::to::SensorReadings::internal_default_instance());
#else
  topheaterreadings_ = const_cast< ::to::SensorReadings*>(&::to::SensorReadings::default_instance());
#endif
}

CheckForEarlyInjectionRequest::CheckForEarlyInjectionRequest(const CheckForEarlyInjectionRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:to.CheckForEarlyInjectionRequest)
}

void CheckForEarlyInjectionRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  hematocritreadings_ = NULL;
  topheaterreadings_ = NULL;
  previousreturncode_ = 0;
  airafterfluidthreshold_ = 0;
  lastrecordedtime_ = 0;
  firstfluid_ = 0;
}

CheckForEarlyInjectionRequest::~CheckForEarlyInjectionRequest() {
  // @@protoc_insertion_point(destructor:to.CheckForEarlyInjectionRequest)
  SharedDtor();
}

void CheckForEarlyInjectionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hematocritreadings_;
    delete topheaterreadings_;
  }
}

void CheckForEarlyInjectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckForEarlyInjectionRequest& CheckForEarlyInjectionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_check_5ffor_5fearly_5finjection_5frequest_2eproto();
#endif
  return *default_instance_;
}

CheckForEarlyInjectionRequest* CheckForEarlyInjectionRequest::default_instance_ = NULL;

CheckForEarlyInjectionRequest* CheckForEarlyInjectionRequest::New(::google::protobuf::Arena* arena) const {
  CheckForEarlyInjectionRequest* n = new CheckForEarlyInjectionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckForEarlyInjectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:to.CheckForEarlyInjectionRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CheckForEarlyInjectionRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CheckForEarlyInjectionRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(airafterfluidthreshold_, firstfluid_);
  if (GetArenaNoVirtual() == NULL && hematocritreadings_ != NULL) delete hematocritreadings_;
  hematocritreadings_ = NULL;
  if (GetArenaNoVirtual() == NULL && topheaterreadings_ != NULL) delete topheaterreadings_;
  topheaterreadings_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool CheckForEarlyInjectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to.CheckForEarlyInjectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .to.SensorReadings hematocritReadings = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hematocritreadings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topHeaterReadings;
        break;
      }

      // optional .to.SensorReadings topHeaterReadings = 2;
      case 2: {
        if (tag == 18) {
         parse_topHeaterReadings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topheaterreadings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_previousReturnCode;
        break;
      }

      // optional int32 previousReturnCode = 3;
      case 3: {
        if (tag == 24) {
         parse_previousReturnCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &previousreturncode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_airAfterFluidThreshold;
        break;
      }

      // optional double airAfterFluidThreshold = 4;
      case 4: {
        if (tag == 33) {
         parse_airAfterFluidThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &airafterfluidthreshold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_lastRecordedTime;
        break;
      }

      // optional float lastRecordedTime = 5;
      case 5: {
        if (tag == 45) {
         parse_lastRecordedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastrecordedtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_firstFluid;
        break;
      }

      // optional double firstFluid = 6;
      case 6: {
        if (tag == 49) {
         parse_firstFluid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &firstfluid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to.CheckForEarlyInjectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to.CheckForEarlyInjectionRequest)
  return false;
#undef DO_
}

void CheckForEarlyInjectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to.CheckForEarlyInjectionRequest)
  // optional .to.SensorReadings hematocritReadings = 1;
  if (this->has_hematocritreadings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->hematocritreadings_, output);
  }

  // optional .to.SensorReadings topHeaterReadings = 2;
  if (this->has_topheaterreadings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->topheaterreadings_, output);
  }

  // optional int32 previousReturnCode = 3;
  if (this->previousreturncode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->previousreturncode(), output);
  }

  // optional double airAfterFluidThreshold = 4;
  if (this->airafterfluidthreshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->airafterfluidthreshold(), output);
  }

  // optional float lastRecordedTime = 5;
  if (this->lastrecordedtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lastrecordedtime(), output);
  }

  // optional double firstFluid = 6;
  if (this->firstfluid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->firstfluid(), output);
  }

  // @@protoc_insertion_point(serialize_end:to.CheckForEarlyInjectionRequest)
}

int CheckForEarlyInjectionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:to.CheckForEarlyInjectionRequest)
  int total_size = 0;

  // optional .to.SensorReadings hematocritReadings = 1;
  if (this->has_hematocritreadings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hematocritreadings_);
  }

  // optional .to.SensorReadings topHeaterReadings = 2;
  if (this->has_topheaterreadings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topheaterreadings_);
  }

  // optional int32 previousReturnCode = 3;
  if (this->previousreturncode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->previousreturncode());
  }

  // optional double airAfterFluidThreshold = 4;
  if (this->airafterfluidthreshold() != 0) {
    total_size += 1 + 8;
  }

  // optional float lastRecordedTime = 5;
  if (this->lastrecordedtime() != 0) {
    total_size += 1 + 4;
  }

  // optional double firstFluid = 6;
  if (this->firstfluid() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckForEarlyInjectionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckForEarlyInjectionRequest*>(&from));
}

void CheckForEarlyInjectionRequest::MergeFrom(const CheckForEarlyInjectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to.CheckForEarlyInjectionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_hematocritreadings()) {
    mutable_hematocritreadings()->::to::SensorReadings::MergeFrom(from.hematocritreadings());
  }
  if (from.has_topheaterreadings()) {
    mutable_topheaterreadings()->::to::SensorReadings::MergeFrom(from.topheaterreadings());
  }
  if (from.previousreturncode() != 0) {
    set_previousreturncode(from.previousreturncode());
  }
  if (from.airafterfluidthreshold() != 0) {
    set_airafterfluidthreshold(from.airafterfluidthreshold());
  }
  if (from.lastrecordedtime() != 0) {
    set_lastrecordedtime(from.lastrecordedtime());
  }
  if (from.firstfluid() != 0) {
    set_firstfluid(from.firstfluid());
  }
}

void CheckForEarlyInjectionRequest::CopyFrom(const CheckForEarlyInjectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to.CheckForEarlyInjectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckForEarlyInjectionRequest::IsInitialized() const {

  return true;
}

void CheckForEarlyInjectionRequest::Swap(CheckForEarlyInjectionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckForEarlyInjectionRequest::InternalSwap(CheckForEarlyInjectionRequest* other) {
  std::swap(hematocritreadings_, other->hematocritreadings_);
  std::swap(topheaterreadings_, other->topheaterreadings_);
  std::swap(previousreturncode_, other->previousreturncode_);
  std::swap(airafterfluidthreshold_, other->airafterfluidthreshold_);
  std::swap(lastrecordedtime_, other->lastrecordedtime_);
  std::swap(firstfluid_, other->firstfluid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckForEarlyInjectionRequest::GetTypeName() const {
  return "to.CheckForEarlyInjectionRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckForEarlyInjectionRequest

// optional .to.SensorReadings hematocritReadings = 1;
bool CheckForEarlyInjectionRequest::has_hematocritreadings() const {
  return !_is_default_instance_ && hematocritreadings_ != NULL;
}
void CheckForEarlyInjectionRequest::clear_hematocritreadings() {
  if (GetArenaNoVirtual() == NULL && hematocritreadings_ != NULL) delete hematocritreadings_;
  hematocritreadings_ = NULL;
}
const ::to::SensorReadings& CheckForEarlyInjectionRequest::hematocritreadings() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.hematocritReadings)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return hematocritreadings_ != NULL ? *hematocritreadings_ : *default_instance().hematocritreadings_;
#else
  return hematocritreadings_ != NULL ? *hematocritreadings_ : *default_instance_->hematocritreadings_;
#endif
}
::to::SensorReadings* CheckForEarlyInjectionRequest::mutable_hematocritreadings() {
  
  if (hematocritreadings_ == NULL) {
    hematocritreadings_ = new ::to::SensorReadings;
  }
  // @@protoc_insertion_point(field_mutable:to.CheckForEarlyInjectionRequest.hematocritReadings)
  return hematocritreadings_;
}
::to::SensorReadings* CheckForEarlyInjectionRequest::release_hematocritreadings() {
  // @@protoc_insertion_point(field_release:to.CheckForEarlyInjectionRequest.hematocritReadings)
  
  ::to::SensorReadings* temp = hematocritreadings_;
  hematocritreadings_ = NULL;
  return temp;
}
void CheckForEarlyInjectionRequest::set_allocated_hematocritreadings(::to::SensorReadings* hematocritreadings) {
  delete hematocritreadings_;
  hematocritreadings_ = hematocritreadings;
  if (hematocritreadings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.CheckForEarlyInjectionRequest.hematocritReadings)
}

// optional .to.SensorReadings topHeaterReadings = 2;
bool CheckForEarlyInjectionRequest::has_topheaterreadings() const {
  return !_is_default_instance_ && topheaterreadings_ != NULL;
}
void CheckForEarlyInjectionRequest::clear_topheaterreadings() {
  if (GetArenaNoVirtual() == NULL && topheaterreadings_ != NULL) delete topheaterreadings_;
  topheaterreadings_ = NULL;
}
const ::to::SensorReadings& CheckForEarlyInjectionRequest::topheaterreadings() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.topHeaterReadings)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return topheaterreadings_ != NULL ? *topheaterreadings_ : *default_instance().topheaterreadings_;
#else
  return topheaterreadings_ != NULL ? *topheaterreadings_ : *default_instance_->topheaterreadings_;
#endif
}
::to::SensorReadings* CheckForEarlyInjectionRequest::mutable_topheaterreadings() {
  
  if (topheaterreadings_ == NULL) {
    topheaterreadings_ = new ::to::SensorReadings;
  }
  // @@protoc_insertion_point(field_mutable:to.CheckForEarlyInjectionRequest.topHeaterReadings)
  return topheaterreadings_;
}
::to::SensorReadings* CheckForEarlyInjectionRequest::release_topheaterreadings() {
  // @@protoc_insertion_point(field_release:to.CheckForEarlyInjectionRequest.topHeaterReadings)
  
  ::to::SensorReadings* temp = topheaterreadings_;
  topheaterreadings_ = NULL;
  return temp;
}
void CheckForEarlyInjectionRequest::set_allocated_topheaterreadings(::to::SensorReadings* topheaterreadings) {
  delete topheaterreadings_;
  topheaterreadings_ = topheaterreadings;
  if (topheaterreadings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.CheckForEarlyInjectionRequest.topHeaterReadings)
}

// optional int32 previousReturnCode = 3;
void CheckForEarlyInjectionRequest::clear_previousreturncode() {
  previousreturncode_ = 0;
}
 ::google::protobuf::int32 CheckForEarlyInjectionRequest::previousreturncode() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.previousReturnCode)
  return previousreturncode_;
}
 void CheckForEarlyInjectionRequest::set_previousreturncode(::google::protobuf::int32 value) {
  
  previousreturncode_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionRequest.previousReturnCode)
}

// optional double airAfterFluidThreshold = 4;
void CheckForEarlyInjectionRequest::clear_airafterfluidthreshold() {
  airafterfluidthreshold_ = 0;
}
 double CheckForEarlyInjectionRequest::airafterfluidthreshold() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.airAfterFluidThreshold)
  return airafterfluidthreshold_;
}
 void CheckForEarlyInjectionRequest::set_airafterfluidthreshold(double value) {
  
  airafterfluidthreshold_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionRequest.airAfterFluidThreshold)
}

// optional float lastRecordedTime = 5;
void CheckForEarlyInjectionRequest::clear_lastrecordedtime() {
  lastrecordedtime_ = 0;
}
 float CheckForEarlyInjectionRequest::lastrecordedtime() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.lastRecordedTime)
  return lastrecordedtime_;
}
 void CheckForEarlyInjectionRequest::set_lastrecordedtime(float value) {
  
  lastrecordedtime_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionRequest.lastRecordedTime)
}

// optional double firstFluid = 6;
void CheckForEarlyInjectionRequest::clear_firstfluid() {
  firstfluid_ = 0;
}
 double CheckForEarlyInjectionRequest::firstfluid() const {
  // @@protoc_insertion_point(field_get:to.CheckForEarlyInjectionRequest.firstFluid)
  return firstfluid_;
}
 void CheckForEarlyInjectionRequest::set_firstfluid(double value) {
  
  firstfluid_ = value;
  // @@protoc_insertion_point(field_set:to.CheckForEarlyInjectionRequest.firstFluid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)
