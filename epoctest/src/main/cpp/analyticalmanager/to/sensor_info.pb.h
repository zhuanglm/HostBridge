// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_info.proto

#ifndef PROTOBUF_sensor_5finfo_2eproto__INCLUDED
#define PROTOBUF_sensor_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace to {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sensor_5finfo_2eproto();
void protobuf_AssignDesc_sensor_5finfo_2eproto();
void protobuf_ShutdownFile_sensor_5finfo_2eproto();

class SensorInfo;

// ===================================================================

class SensorInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:to.SensorInfo) */ {
 public:
  SensorInfo();
  virtual ~SensorInfo();

  SensorInfo(const SensorInfo& from);

  inline SensorInfo& operator=(const SensorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SensorInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SensorInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SensorInfo* other);

  // implements Message ----------------------------------------------

  inline SensorInfo* New() const { return New(NULL); }

  SensorInfo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SensorInfo& from);
  void MergeFrom(const SensorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channelType = 1;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 1;
  ::google::protobuf::int32 channeltype() const;
  void set_channeltype(::google::protobuf::int32 value);

  // optional int32 sensorType = 2;
  void clear_sensortype();
  static const int kSensorTypeFieldNumber = 2;
  ::google::protobuf::int32 sensortype() const;
  void set_sensortype(::google::protobuf::int32 value);

  // optional int32 sensorDescriptorNumber = 3;
  void clear_sensordescriptornumber();
  static const int kSensorDescriptorNumberFieldNumber = 3;
  ::google::protobuf::int32 sensordescriptornumber() const;
  void set_sensordescriptornumber(::google::protobuf::int32 value);

  // optional double calDelimit = 4;
  void clear_caldelimit();
  static const int kCalDelimitFieldNumber = 4;
  double caldelimit() const;
  void set_caldelimit(double value);

  // optional double sampleDelimit = 5;
  void clear_sampledelimit();
  static const int kSampleDelimitFieldNumber = 5;
  double sampledelimit() const;
  void set_sampledelimit(double value);

  // optional double postDelimit = 6;
  void clear_postdelimit();
  static const int kPostDelimitFieldNumber = 6;
  double postdelimit() const;
  void set_postdelimit(double value);

  // optional double extrapolation = 7;
  void clear_extrapolation();
  static const int kExtrapolationFieldNumber = 7;
  double extrapolation() const;
  void set_extrapolation(double value);

  // optional double calWindowSize = 8;
  void clear_calwindowsize();
  static const int kCalWindowSizeFieldNumber = 8;
  double calwindowsize() const;
  void set_calwindowsize(double value);

  // optional double sampleWindowSize = 9;
  void clear_samplewindowsize();
  static const int kSampleWindowSizeFieldNumber = 9;
  double samplewindowsize() const;
  void set_samplewindowsize(double value);

  // optional double postWindowSize = 10;
  void clear_postwindowsize();
  static const int kPostWindowSizeFieldNumber = 10;
  double postwindowsize() const;
  void set_postwindowsize(double value);

  // optional double calCurveWeight = 11;
  void clear_calcurveweight();
  static const int kCalCurveWeightFieldNumber = 11;
  double calcurveweight() const;
  void set_calcurveweight(double value);

  // optional double sampleCurveWeight = 12;
  void clear_samplecurveweight();
  static const int kSampleCurveWeightFieldNumber = 12;
  double samplecurveweight() const;
  void set_samplecurveweight(double value);

  // optional double calConcentration = 13;
  void clear_calconcentration();
  static const int kCalConcentrationFieldNumber = 13;
  double calconcentration() const;
  void set_calconcentration(double value);

  // optional double offset = 14;
  void clear_offset();
  static const int kOffsetFieldNumber = 14;
  double offset() const;
  void set_offset(double value);

  // optional double slopeFactor = 15;
  void clear_slopefactor();
  static const int kSlopeFactorFieldNumber = 15;
  double slopefactor() const;
  void set_slopefactor(double value);

  // optional double CalMeanLowQC = 16;
  void clear_calmeanlowqc();
  static const int kCalMeanLowQCFieldNumber = 16;
  double calmeanlowqc() const;
  void set_calmeanlowqc(double value);

  // optional double CalMeanHighQC = 17;
  void clear_calmeanhighqc();
  static const int kCalMeanHighQCFieldNumber = 17;
  double calmeanhighqc() const;
  void set_calmeanhighqc(double value);

  // optional double CalDriftLowQC = 18;
  void clear_caldriftlowqc();
  static const int kCalDriftLowQCFieldNumber = 18;
  double caldriftlowqc() const;
  void set_caldriftlowqc(double value);

  // optional double CalDriftHighQC = 19;
  void clear_caldrifthighqc();
  static const int kCalDriftHighQCFieldNumber = 19;
  double caldrifthighqc() const;
  void set_caldrifthighqc(double value);

  // optional double CalSecondLowQC = 20;
  void clear_calsecondlowqc();
  static const int kCalSecondLowQCFieldNumber = 20;
  double calsecondlowqc() const;
  void set_calsecondlowqc(double value);

  // optional double CalSecondHighQC = 21;
  void clear_calsecondhighqc();
  static const int kCalSecondHighQCFieldNumber = 21;
  double calsecondhighqc() const;
  void set_calsecondhighqc(double value);

  // optional double CalNoiseHighQC = 22;
  void clear_calnoisehighqc();
  static const int kCalNoiseHighQCFieldNumber = 22;
  double calnoisehighqc() const;
  void set_calnoisehighqc(double value);

  // optional double SampleMeanLowQC = 23;
  void clear_samplemeanlowqc();
  static const int kSampleMeanLowQCFieldNumber = 23;
  double samplemeanlowqc() const;
  void set_samplemeanlowqc(double value);

  // optional double SampleMeanHighQC = 24;
  void clear_samplemeanhighqc();
  static const int kSampleMeanHighQCFieldNumber = 24;
  double samplemeanhighqc() const;
  void set_samplemeanhighqc(double value);

  // optional double SampleDriftLowQC = 25;
  void clear_sampledriftlowqc();
  static const int kSampleDriftLowQCFieldNumber = 25;
  double sampledriftlowqc() const;
  void set_sampledriftlowqc(double value);

  // optional double SampleDriftHighQC = 26;
  void clear_sampledrifthighqc();
  static const int kSampleDriftHighQCFieldNumber = 26;
  double sampledrifthighqc() const;
  void set_sampledrifthighqc(double value);

  // optional double SampleSecondLowQC = 27;
  void clear_samplesecondlowqc();
  static const int kSampleSecondLowQCFieldNumber = 27;
  double samplesecondlowqc() const;
  void set_samplesecondlowqc(double value);

  // optional double SampleSecondHighQC = 28;
  void clear_samplesecondhighqc();
  static const int kSampleSecondHighQCFieldNumber = 28;
  double samplesecondhighqc() const;
  void set_samplesecondhighqc(double value);

  // optional double SampleNoiseHighQC = 29;
  void clear_samplenoisehighqc();
  static const int kSampleNoiseHighQCFieldNumber = 29;
  double samplenoisehighqc() const;
  void set_samplenoisehighqc(double value);

  // optional double PostMeanLowQC = 30;
  void clear_postmeanlowqc();
  static const int kPostMeanLowQCFieldNumber = 30;
  double postmeanlowqc() const;
  void set_postmeanlowqc(double value);

  // optional double PostMeanHighQC = 31;
  void clear_postmeanhighqc();
  static const int kPostMeanHighQCFieldNumber = 31;
  double postmeanhighqc() const;
  void set_postmeanhighqc(double value);

  // optional double PostDriftLowQC = 32;
  void clear_postdriftlowqc();
  static const int kPostDriftLowQCFieldNumber = 32;
  double postdriftlowqc() const;
  void set_postdriftlowqc(double value);

  // optional double PostDriftHighQC = 33;
  void clear_postdrifthighqc();
  static const int kPostDriftHighQCFieldNumber = 33;
  double postdrifthighqc() const;
  void set_postdrifthighqc(double value);

  // optional double PostSecondLowQC = 34;
  void clear_postsecondlowqc();
  static const int kPostSecondLowQCFieldNumber = 34;
  double postsecondlowqc() const;
  void set_postsecondlowqc(double value);

  // optional double PostSecondHighQC = 35;
  void clear_postsecondhighqc();
  static const int kPostSecondHighQCFieldNumber = 35;
  double postsecondhighqc() const;
  void set_postsecondhighqc(double value);

  // optional double PostNoiseHighQC = 36;
  void clear_postnoisehighqc();
  static const int kPostNoiseHighQCFieldNumber = 36;
  double postnoisehighqc() const;
  void set_postnoisehighqc(double value);

  // optional double DeltaDriftLowQC = 37;
  void clear_deltadriftlowqc();
  static const int kDeltaDriftLowQCFieldNumber = 37;
  double deltadriftlowqc() const;
  void set_deltadriftlowqc(double value);

  // optional double DeltaDriftHighQC = 38;
  void clear_deltadrifthighqc();
  static const int kDeltaDriftHighQCFieldNumber = 38;
  double deltadrifthighqc() const;
  void set_deltadrifthighqc(double value);

  // optional double param1 = 39;
  void clear_param1();
  static const int kParam1FieldNumber = 39;
  double param1() const;
  void set_param1(double value);

  // optional double param2 = 40;
  void clear_param2();
  static const int kParam2FieldNumber = 40;
  double param2() const;
  void set_param2(double value);

  // optional double param3 = 41;
  void clear_param3();
  static const int kParam3FieldNumber = 41;
  double param3() const;
  void set_param3(double value);

  // optional double param4 = 42;
  void clear_param4();
  static const int kParam4FieldNumber = 42;
  double param4() const;
  void set_param4(double value);

  // optional double param5 = 43;
  void clear_param5();
  static const int kParam5FieldNumber = 43;
  double param5() const;
  void set_param5(double value);

  // optional double param6 = 44;
  void clear_param6();
  static const int kParam6FieldNumber = 44;
  double param6() const;
  void set_param6(double value);

  // optional double param7 = 45;
  void clear_param7();
  static const int kParam7FieldNumber = 45;
  double param7() const;
  void set_param7(double value);

  // optional double param8 = 46;
  void clear_param8();
  static const int kParam8FieldNumber = 46;
  double param8() const;
  void set_param8(double value);

  // optional double param9 = 47;
  void clear_param9();
  static const int kParam9FieldNumber = 47;
  double param9() const;
  void set_param9(double value);

  // optional double param10 = 48;
  void clear_param10();
  static const int kParam10FieldNumber = 48;
  double param10() const;
  void set_param10(double value);

  // optional double param11 = 49;
  void clear_param11();
  static const int kParam11FieldNumber = 49;
  double param11() const;
  void set_param11(double value);

  // optional double param12 = 50;
  void clear_param12();
  static const int kParam12FieldNumber = 50;
  double param12() const;
  void set_param12(double value);

  // optional double param13 = 51;
  void clear_param13();
  static const int kParam13FieldNumber = 51;
  double param13() const;
  void set_param13(double value);

  // optional double param14 = 52;
  void clear_param14();
  static const int kParam14FieldNumber = 52;
  double param14() const;
  void set_param14(double value);

  // optional double param15 = 53;
  void clear_param15();
  static const int kParam15FieldNumber = 53;
  double param15() const;
  void set_param15(double value);

  // optional double param16 = 54;
  void clear_param16();
  static const int kParam16FieldNumber = 54;
  double param16() const;
  void set_param16(double value);

  // optional double param17 = 55;
  void clear_param17();
  static const int kParam17FieldNumber = 55;
  double param17() const;
  void set_param17(double value);

  // optional double param18 = 56;
  void clear_param18();
  static const int kParam18FieldNumber = 56;
  double param18() const;
  void set_param18(double value);

  // optional double param19 = 57;
  void clear_param19();
  static const int kParam19FieldNumber = 57;
  double param19() const;
  void set_param19(double value);

  // optional double param20 = 58;
  void clear_param20();
  static const int kParam20FieldNumber = 58;
  double param20() const;
  void set_param20(double value);

  // optional double param21 = 59;
  void clear_param21();
  static const int kParam21FieldNumber = 59;
  double param21() const;
  void set_param21(double value);

  // optional double param22 = 60;
  void clear_param22();
  static const int kParam22FieldNumber = 60;
  double param22() const;
  void set_param22(double value);

  // optional double param23 = 61;
  void clear_param23();
  static const int kParam23FieldNumber = 61;
  double param23() const;
  void set_param23(double value);

  // optional double param24 = 62;
  void clear_param24();
  static const int kParam24FieldNumber = 62;
  double param24() const;
  void set_param24(double value);

  // optional double param25 = 63;
  void clear_param25();
  static const int kParam25FieldNumber = 63;
  double param25() const;
  void set_param25(double value);

  // optional double param26 = 64;
  void clear_param26();
  static const int kParam26FieldNumber = 64;
  double param26() const;
  void set_param26(double value);

  // optional double param27 = 65;
  void clear_param27();
  static const int kParam27FieldNumber = 65;
  double param27() const;
  void set_param27(double value);

  // optional double param28 = 66;
  void clear_param28();
  static const int kParam28FieldNumber = 66;
  double param28() const;
  void set_param28(double value);

  // optional double param29 = 67;
  void clear_param29();
  static const int kParam29FieldNumber = 67;
  double param29() const;
  void set_param29(double value);

  // optional double param30 = 68;
  void clear_param30();
  static const int kParam30FieldNumber = 68;
  double param30() const;
  void set_param30(double value);

  // optional double param31 = 69;
  void clear_param31();
  static const int kParam31FieldNumber = 69;
  double param31() const;
  void set_param31(double value);

  // optional double param32 = 70;
  void clear_param32();
  static const int kParam32FieldNumber = 70;
  double param32() const;
  void set_param32(double value);

  // optional double param33 = 71;
  void clear_param33();
  static const int kParam33FieldNumber = 71;
  double param33() const;
  void set_param33(double value);

  // optional double param34 = 72;
  void clear_param34();
  static const int kParam34FieldNumber = 72;
  double param34() const;
  void set_param34(double value);

  // optional double param35 = 73;
  void clear_param35();
  static const int kParam35FieldNumber = 73;
  double param35() const;
  void set_param35(double value);

  // optional double param36 = 74;
  void clear_param36();
  static const int kParam36FieldNumber = 74;
  double param36() const;
  void set_param36(double value);

  // optional double param37 = 75;
  void clear_param37();
  static const int kParam37FieldNumber = 75;
  double param37() const;
  void set_param37(double value);

  // optional double param38 = 76;
  void clear_param38();
  static const int kParam38FieldNumber = 76;
  double param38() const;
  void set_param38(double value);

  // optional double param39 = 77;
  void clear_param39();
  static const int kParam39FieldNumber = 77;
  double param39() const;
  void set_param39(double value);

  // optional double param40 = 78;
  void clear_param40();
  static const int kParam40FieldNumber = 78;
  double param40() const;
  void set_param40(double value);

  // optional double param41 = 79;
  void clear_param41();
  static const int kParam41FieldNumber = 79;
  double param41() const;
  void set_param41(double value);

  // optional double param42 = 80;
  void clear_param42();
  static const int kParam42FieldNumber = 80;
  double param42() const;
  void set_param42(double value);

  // optional double param43 = 81;
  void clear_param43();
  static const int kParam43FieldNumber = 81;
  double param43() const;
  void set_param43(double value);

  // optional double param44 = 82;
  void clear_param44();
  static const int kParam44FieldNumber = 82;
  double param44() const;
  void set_param44(double value);

  // optional double param45 = 83;
  void clear_param45();
  static const int kParam45FieldNumber = 83;
  double param45() const;
  void set_param45(double value);

  // optional double param46 = 84;
  void clear_param46();
  static const int kParam46FieldNumber = 84;
  double param46() const;
  void set_param46(double value);

  // optional double param47 = 85;
  void clear_param47();
  static const int kParam47FieldNumber = 85;
  double param47() const;
  void set_param47(double value);

  // optional double param48 = 86;
  void clear_param48();
  static const int kParam48FieldNumber = 86;
  double param48() const;
  void set_param48(double value);

  // optional double param49 = 87;
  void clear_param49();
  static const int kParam49FieldNumber = 87;
  double param49() const;
  void set_param49(double value);

  // optional double param50 = 88;
  void clear_param50();
  static const int kParam50FieldNumber = 88;
  double param50() const;
  void set_param50(double value);

  // optional double param51 = 89;
  void clear_param51();
  static const int kParam51FieldNumber = 89;
  double param51() const;
  void set_param51(double value);

  // optional double param52 = 90;
  void clear_param52();
  static const int kParam52FieldNumber = 90;
  double param52() const;
  void set_param52(double value);

  // optional double param53 = 91;
  void clear_param53();
  static const int kParam53FieldNumber = 91;
  double param53() const;
  void set_param53(double value);

  // optional double param54 = 92;
  void clear_param54();
  static const int kParam54FieldNumber = 92;
  double param54() const;
  void set_param54(double value);

  // optional double param55 = 93;
  void clear_param55();
  static const int kParam55FieldNumber = 93;
  double param55() const;
  void set_param55(double value);

  // optional double param56 = 94;
  void clear_param56();
  static const int kParam56FieldNumber = 94;
  double param56() const;
  void set_param56(double value);

  // optional double param57 = 95;
  void clear_param57();
  static const int kParam57FieldNumber = 95;
  double param57() const;
  void set_param57(double value);

  // optional double param58 = 96;
  void clear_param58();
  static const int kParam58FieldNumber = 96;
  double param58() const;
  void set_param58(double value);

  // optional double param59 = 97;
  void clear_param59();
  static const int kParam59FieldNumber = 97;
  double param59() const;
  void set_param59(double value);

  // optional double param60 = 98;
  void clear_param60();
  static const int kParam60FieldNumber = 98;
  double param60() const;
  void set_param60(double value);

  // optional double param61 = 99;
  void clear_param61();
  static const int kParam61FieldNumber = 99;
  double param61() const;
  void set_param61(double value);

  // optional double param62 = 100;
  void clear_param62();
  static const int kParam62FieldNumber = 100;
  double param62() const;
  void set_param62(double value);

  // optional double param63 = 101;
  void clear_param63();
  static const int kParam63FieldNumber = 101;
  double param63() const;
  void set_param63(double value);

  // optional double param64 = 102;
  void clear_param64();
  static const int kParam64FieldNumber = 102;
  double param64() const;
  void set_param64(double value);

  // optional double param65 = 103;
  void clear_param65();
  static const int kParam65FieldNumber = 103;
  double param65() const;
  void set_param65(double value);

  // optional double param66 = 104;
  void clear_param66();
  static const int kParam66FieldNumber = 104;
  double param66() const;
  void set_param66(double value);

  // optional double param67 = 105;
  void clear_param67();
  static const int kParam67FieldNumber = 105;
  double param67() const;
  void set_param67(double value);

  // optional double param68 = 106;
  void clear_param68();
  static const int kParam68FieldNumber = 106;
  double param68() const;
  void set_param68(double value);

  // optional double param69 = 107;
  void clear_param69();
  static const int kParam69FieldNumber = 107;
  double param69() const;
  void set_param69(double value);

  // optional double param70 = 108;
  void clear_param70();
  static const int kParam70FieldNumber = 108;
  double param70() const;
  void set_param70(double value);

  // optional double param71 = 109;
  void clear_param71();
  static const int kParam71FieldNumber = 109;
  double param71() const;
  void set_param71(double value);

  // optional double param72 = 110;
  void clear_param72();
  static const int kParam72FieldNumber = 110;
  double param72() const;
  void set_param72(double value);

  // optional double param73 = 111;
  void clear_param73();
  static const int kParam73FieldNumber = 111;
  double param73() const;
  void set_param73(double value);

  // optional double param74 = 112;
  void clear_param74();
  static const int kParam74FieldNumber = 112;
  double param74() const;
  void set_param74(double value);

  // optional double param75 = 113;
  void clear_param75();
  static const int kParam75FieldNumber = 113;
  double param75() const;
  void set_param75(double value);

  // optional double param76 = 114;
  void clear_param76();
  static const int kParam76FieldNumber = 114;
  double param76() const;
  void set_param76(double value);

  // optional double param77 = 115;
  void clear_param77();
  static const int kParam77FieldNumber = 115;
  double param77() const;
  void set_param77(double value);

  // optional double param78 = 116;
  void clear_param78();
  static const int kParam78FieldNumber = 116;
  double param78() const;
  void set_param78(double value);

  // optional double param79 = 117;
  void clear_param79();
  static const int kParam79FieldNumber = 117;
  double param79() const;
  void set_param79(double value);

  // optional double param80 = 118;
  void clear_param80();
  static const int kParam80FieldNumber = 118;
  double param80() const;
  void set_param80(double value);

  // optional double param81 = 119;
  void clear_param81();
  static const int kParam81FieldNumber = 119;
  double param81() const;
  void set_param81(double value);

  // optional double param82 = 120;
  void clear_param82();
  static const int kParam82FieldNumber = 120;
  double param82() const;
  void set_param82(double value);

  // optional double param83 = 121;
  void clear_param83();
  static const int kParam83FieldNumber = 121;
  double param83() const;
  void set_param83(double value);

  // optional double param84 = 122;
  void clear_param84();
  static const int kParam84FieldNumber = 122;
  double param84() const;
  void set_param84(double value);

  // optional double param85 = 123;
  void clear_param85();
  static const int kParam85FieldNumber = 123;
  double param85() const;
  void set_param85(double value);

  // optional double param86 = 124;
  void clear_param86();
  static const int kParam86FieldNumber = 124;
  double param86() const;
  void set_param86(double value);

  // optional double param87 = 125;
  void clear_param87();
  static const int kParam87FieldNumber = 125;
  double param87() const;
  void set_param87(double value);

  // optional double param88 = 126;
  void clear_param88();
  static const int kParam88FieldNumber = 126;
  double param88() const;
  void set_param88(double value);

  // optional double param89 = 127;
  void clear_param89();
  static const int kParam89FieldNumber = 127;
  double param89() const;
  void set_param89(double value);

  // optional double param90 = 128;
  void clear_param90();
  static const int kParam90FieldNumber = 128;
  double param90() const;
  void set_param90(double value);

  // optional double param91 = 129;
  void clear_param91();
  static const int kParam91FieldNumber = 129;
  double param91() const;
  void set_param91(double value);

  // optional double param92 = 130;
  void clear_param92();
  static const int kParam92FieldNumber = 130;
  double param92() const;
  void set_param92(double value);

  // optional double param93 = 131;
  void clear_param93();
  static const int kParam93FieldNumber = 131;
  double param93() const;
  void set_param93(double value);

  // optional double param94 = 132;
  void clear_param94();
  static const int kParam94FieldNumber = 132;
  double param94() const;
  void set_param94(double value);

  // optional double param95 = 133;
  void clear_param95();
  static const int kParam95FieldNumber = 133;
  double param95() const;
  void set_param95(double value);

  // optional double param96 = 134;
  void clear_param96();
  static const int kParam96FieldNumber = 134;
  double param96() const;
  void set_param96(double value);

  // optional double param97 = 135;
  void clear_param97();
  static const int kParam97FieldNumber = 135;
  double param97() const;
  void set_param97(double value);

  // optional double param98 = 136;
  void clear_param98();
  static const int kParam98FieldNumber = 136;
  double param98() const;
  void set_param98(double value);

  // optional double param99 = 137;
  void clear_param99();
  static const int kParam99FieldNumber = 137;
  double param99() const;
  void set_param99(double value);

  // optional double param100 = 138;
  void clear_param100();
  static const int kParam100FieldNumber = 138;
  double param100() const;
  void set_param100(double value);

  // optional float readerMeanLow = 139;
  void clear_readermeanlow();
  static const int kReaderMeanLowFieldNumber = 139;
  float readermeanlow() const;
  void set_readermeanlow(float value);

  // optional float readerMeanHigh = 140;
  void clear_readermeanhigh();
  static const int kReaderMeanHighFieldNumber = 140;
  float readermeanhigh() const;
  void set_readermeanhigh(float value);

  // optional float readerDriftLow = 141;
  void clear_readerdriftlow();
  static const int kReaderDriftLowFieldNumber = 141;
  float readerdriftlow() const;
  void set_readerdriftlow(float value);

  // optional float readerDriftHigh = 142;
  void clear_readerdrifthigh();
  static const int kReaderDriftHighFieldNumber = 142;
  float readerdrifthigh() const;
  void set_readerdrifthigh(float value);

  // optional float readerNoiseLow = 143;
  void clear_readernoiselow();
  static const int kReaderNoiseLowFieldNumber = 143;
  float readernoiselow() const;
  void set_readernoiselow(float value);

  // optional float readerNoiseHigh = 144;
  void clear_readernoisehigh();
  static const int kReaderNoiseHighFieldNumber = 144;
  float readernoisehigh() const;
  void set_readernoisehigh(float value);

  // optional double tMinus = 145;
  void clear_tminus();
  static const int kTMinusFieldNumber = 145;
  double tminus() const;
  void set_tminus(double value);

  // optional double tPlus = 146;
  void clear_tplus();
  static const int kTPlusFieldNumber = 146;
  double tplus() const;
  void set_tplus(double value);

  // optional double postCurvatureWeight = 147;
  void clear_postcurvatureweight();
  static const int kPostCurvatureWeightFieldNumber = 147;
  double postcurvatureweight() const;
  void set_postcurvatureweight(double value);

  // optional int32 bloodPointsToSkip = 148;
  void clear_bloodpointstoskip();
  static const int kBloodPointsToSkipFieldNumber = 148;
  ::google::protobuf::int32 bloodpointstoskip() const;
  void set_bloodpointstoskip(::google::protobuf::int32 value);

  // optional int32 bloodPointsInWindow = 149;
  void clear_bloodpointsinwindow();
  static const int kBloodPointsInWindowFieldNumber = 149;
  ::google::protobuf::int32 bloodpointsinwindow() const;
  void set_bloodpointsinwindow(::google::protobuf::int32 value);

  // optional double bloodNoiseHigh = 150;
  void clear_bloodnoisehigh();
  static const int kBloodNoiseHighFieldNumber = 150;
  double bloodnoisehigh() const;
  void set_bloodnoisehigh(double value);

  // optional int32 aqPointsToSkip = 151;
  void clear_aqpointstoskip();
  static const int kAqPointsToSkipFieldNumber = 151;
  ::google::protobuf::int32 aqpointstoskip() const;
  void set_aqpointstoskip(::google::protobuf::int32 value);

  // optional int32 aqPointsInWindow = 152;
  void clear_aqpointsinwindow();
  static const int kAqPointsInWindowFieldNumber = 152;
  ::google::protobuf::int32 aqpointsinwindow() const;
  void set_aqpointsinwindow(::google::protobuf::int32 value);

  // optional double aqNoiseHigh = 153;
  void clear_aqnoisehigh();
  static const int kAqNoiseHighFieldNumber = 153;
  double aqnoisehigh() const;
  void set_aqnoisehigh(double value);

  // optional int32 lateBloodPointsToSkip = 154;
  void clear_latebloodpointstoskip();
  static const int kLateBloodPointsToSkipFieldNumber = 154;
  ::google::protobuf::int32 latebloodpointstoskip() const;
  void set_latebloodpointstoskip(::google::protobuf::int32 value);

  // optional int32 lateBloodPointsInWindow = 155;
  void clear_latebloodpointsinwindow();
  static const int kLateBloodPointsInWindowFieldNumber = 155;
  ::google::protobuf::int32 latebloodpointsinwindow() const;
  void set_latebloodpointsinwindow(::google::protobuf::int32 value);

  // optional double lateBloodNoiseHigh = 156;
  void clear_latebloodnoisehigh();
  static const int kLateBloodNoiseHighFieldNumber = 156;
  double latebloodnoisehigh() const;
  void set_latebloodnoisehigh(double value);

  // optional int32 lateAqPointsToSkip = 157;
  void clear_lateaqpointstoskip();
  static const int kLateAqPointsToSkipFieldNumber = 157;
  ::google::protobuf::int32 lateaqpointstoskip() const;
  void set_lateaqpointstoskip(::google::protobuf::int32 value);

  // optional int32 lateAqPointsInWindow = 158;
  void clear_lateaqpointsinwindow();
  static const int kLateAqPointsInWindowFieldNumber = 158;
  ::google::protobuf::int32 lateaqpointsinwindow() const;
  void set_lateaqpointsinwindow(::google::protobuf::int32 value);

  // optional double lateAqNoiseHigh = 159;
  void clear_lateaqnoisehigh();
  static const int kLateAqNoiseHighFieldNumber = 159;
  double lateaqnoisehigh() const;
  void set_lateaqnoisehigh(double value);

  // optional double rtPointLimitLow = 160;
  void clear_rtpointlimitlow();
  static const int kRtPointLimitLowFieldNumber = 160;
  double rtpointlimitlow() const;
  void set_rtpointlimitlow(double value);

  // optional double rtPointLimitHigh = 161;
  void clear_rtpointlimithigh();
  static const int kRtPointLimitHighFieldNumber = 161;
  double rtpointlimithigh() const;
  void set_rtpointlimithigh(double value);

  // optional double d1Low = 162;
  void clear_d1low();
  static const int kD1LowFieldNumber = 162;
  double d1low() const;
  void set_d1low(double value);

  // optional double d1High = 163;
  void clear_d1high();
  static const int kD1HighFieldNumber = 163;
  double d1high() const;
  void set_d1high(double value);

  // optional double p1d2Low = 164;
  void clear_p1d2low();
  static const int kP1D2LowFieldNumber = 164;
  double p1d2low() const;
  void set_p1d2low(double value);

  // optional double p1d2High = 165;
  void clear_p1d2high();
  static const int kP1D2HighFieldNumber = 165;
  double p1d2high() const;
  void set_p1d2high(double value);

  // optional double p2d2Low = 166;
  void clear_p2d2low();
  static const int kP2D2LowFieldNumber = 166;
  double p2d2low() const;
  void set_p2d2low(double value);

  // optional double p2d2High = 167;
  void clear_p2d2high();
  static const int kP2D2HighFieldNumber = 167;
  double p2d2high() const;
  void set_p2d2high(double value);

  // optional double p3d2Low = 168;
  void clear_p3d2low();
  static const int kP3D2LowFieldNumber = 168;
  double p3d2low() const;
  void set_p3d2low(double value);

  // optional double p3d2High = 169;
  void clear_p3d2high();
  static const int kP3D2HighFieldNumber = 169;
  double p3d2high() const;
  void set_p3d2high(double value);

  // optional double A = 170;
  void clear_a();
  static const int kAFieldNumber = 170;
  double a() const;
  void set_a(double value);

  // optional double B = 171;
  void clear_b();
  static const int kBFieldNumber = 171;
  double b() const;
  void set_b(double value);

  // optional double C = 172;
  void clear_c();
  static const int kCFieldNumber = 172;
  double c() const;
  void set_c(double value);

  // optional double D = 173;
  void clear_d();
  static const int kDFieldNumber = 173;
  double d() const;
  void set_d(double value);

  // optional double F = 174;
  void clear_f();
  static const int kFFieldNumber = 174;
  double f() const;
  void set_f(double value);

  // optional double G = 175;
  void clear_g();
  static const int kGFieldNumber = 175;
  double g() const;
  void set_g(double value);

  // optional double TAmbOffset = 176;
  void clear_tamboffset();
  static const int kTAmbOffsetFieldNumber = 176;
  double tamboffset() const;
  void set_tamboffset(double value);

  // optional double InjectionTimeOffset = 177;
  void clear_injectiontimeoffset();
  static const int kInjectionTimeOffsetFieldNumber = 177;
  double injectiontimeoffset() const;
  void set_injectiontimeoffset(double value);

  // optional double AgeOffset = 178;
  void clear_ageoffset();
  static const int kAgeOffsetFieldNumber = 178;
  double ageoffset() const;
  void set_ageoffset(double value);

  // optional double PowerOffset = 179;
  void clear_poweroffset();
  static const int kPowerOffsetFieldNumber = 179;
  double poweroffset() const;
  void set_poweroffset(double value);

  // optional string NeuralNetBlood = 180;
  void clear_neuralnetblood();
  static const int kNeuralNetBloodFieldNumber = 180;
  const ::std::string& neuralnetblood() const;
  void set_neuralnetblood(const ::std::string& value);
  void set_neuralnetblood(const char* value);
  void set_neuralnetblood(const char* value, size_t size);
  ::std::string* mutable_neuralnetblood();
  ::std::string* release_neuralnetblood();
  void set_allocated_neuralnetblood(::std::string* neuralnetblood);

  // optional string NeuralNetAQ = 181;
  void clear_neuralnetaq();
  static const int kNeuralNetAQFieldNumber = 181;
  const ::std::string& neuralnetaq() const;
  void set_neuralnetaq(const ::std::string& value);
  void set_neuralnetaq(const char* value);
  void set_neuralnetaq(const char* value, size_t size);
  ::std::string* mutable_neuralnetaq();
  ::std::string* release_neuralnetaq();
  void set_allocated_neuralnetaq(::std::string* neuralnetaq);

  // @@protoc_insertion_point(class_scope:to.SensorInfo)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 channeltype_;
  ::google::protobuf::int32 sensortype_;
  double caldelimit_;
  double sampledelimit_;
  double postdelimit_;
  double extrapolation_;
  double calwindowsize_;
  double samplewindowsize_;
  double postwindowsize_;
  double calcurveweight_;
  double samplecurveweight_;
  double calconcentration_;
  double offset_;
  double slopefactor_;
  double calmeanlowqc_;
  double calmeanhighqc_;
  double caldriftlowqc_;
  double caldrifthighqc_;
  double calsecondlowqc_;
  double calsecondhighqc_;
  double calnoisehighqc_;
  double samplemeanlowqc_;
  double samplemeanhighqc_;
  double sampledriftlowqc_;
  double sampledrifthighqc_;
  double samplesecondlowqc_;
  double samplesecondhighqc_;
  double samplenoisehighqc_;
  double postmeanlowqc_;
  double postmeanhighqc_;
  double postdriftlowqc_;
  double postdrifthighqc_;
  double postsecondlowqc_;
  double postsecondhighqc_;
  double postnoisehighqc_;
  double deltadriftlowqc_;
  double deltadrifthighqc_;
  double param1_;
  double param2_;
  double param3_;
  double param4_;
  double param5_;
  double param6_;
  double param7_;
  double param8_;
  double param9_;
  double param10_;
  double param11_;
  double param12_;
  double param13_;
  double param14_;
  double param15_;
  double param16_;
  double param17_;
  double param18_;
  double param19_;
  double param20_;
  double param21_;
  double param22_;
  double param23_;
  double param24_;
  double param25_;
  double param26_;
  double param27_;
  double param28_;
  double param29_;
  double param30_;
  double param31_;
  double param32_;
  double param33_;
  ::google::protobuf::int32 sensordescriptornumber_;
  float readermeanlow_;
  double param34_;
  double param35_;
  double param36_;
  double param37_;
  double param38_;
  double param39_;
  double param40_;
  double param41_;
  double param42_;
  double param43_;
  double param44_;
  double param45_;
  double param46_;
  double param47_;
  double param48_;
  double param49_;
  double param50_;
  double param51_;
  double param52_;
  double param53_;
  double param54_;
  double param55_;
  double param56_;
  double param57_;
  double param58_;
  double param59_;
  double param60_;
  double param61_;
  double param62_;
  double param63_;
  double param64_;
  double param65_;
  double param66_;
  double param67_;
  double param68_;
  double param69_;
  double param70_;
  double param71_;
  double param72_;
  double param73_;
  double param74_;
  double param75_;
  double param76_;
  double param77_;
  double param78_;
  double param79_;
  double param80_;
  double param81_;
  double param82_;
  double param83_;
  double param84_;
  double param85_;
  double param86_;
  double param87_;
  double param88_;
  double param89_;
  double param90_;
  double param91_;
  double param92_;
  double param93_;
  double param94_;
  double param95_;
  double param96_;
  double param97_;
  double param98_;
  double param99_;
  double param100_;
  float readermeanhigh_;
  float readerdriftlow_;
  float readerdrifthigh_;
  float readernoiselow_;
  double tminus_;
  double tplus_;
  float readernoisehigh_;
  ::google::protobuf::int32 bloodpointstoskip_;
  double postcurvatureweight_;
  double bloodnoisehigh_;
  ::google::protobuf::int32 bloodpointsinwindow_;
  ::google::protobuf::int32 aqpointstoskip_;
  double aqnoisehigh_;
  ::google::protobuf::int32 aqpointsinwindow_;
  ::google::protobuf::int32 latebloodpointstoskip_;
  double latebloodnoisehigh_;
  ::google::protobuf::int32 latebloodpointsinwindow_;
  ::google::protobuf::int32 lateaqpointstoskip_;
  double lateaqnoisehigh_;
  double rtpointlimitlow_;
  double rtpointlimithigh_;
  double d1low_;
  double d1high_;
  double p1d2low_;
  double p1d2high_;
  double p2d2low_;
  double p2d2high_;
  double p3d2low_;
  double p3d2high_;
  double a_;
  double b_;
  double c_;
  double d_;
  double f_;
  double g_;
  double tamboffset_;
  double injectiontimeoffset_;
  double ageoffset_;
  double poweroffset_;
  ::google::protobuf::internal::ArenaStringPtr neuralnetblood_;
  ::google::protobuf::internal::ArenaStringPtr neuralnetaq_;
  ::google::protobuf::int32 lateaqpointsinwindow_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sensor_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sensor_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_sensor_5finfo_2eproto();
  friend void protobuf_ShutdownFile_sensor_5finfo_2eproto();

  void InitAsDefaultInstance();
  static SensorInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorInfo

// optional int32 channelType = 1;
inline void SensorInfo::clear_channeltype() {
  channeltype_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::channeltype() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.channelType)
  return channeltype_;
}
inline void SensorInfo::set_channeltype(::google::protobuf::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.channelType)
}

// optional int32 sensorType = 2;
inline void SensorInfo::clear_sensortype() {
  sensortype_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::sensortype() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.sensorType)
  return sensortype_;
}
inline void SensorInfo::set_sensortype(::google::protobuf::int32 value) {
  
  sensortype_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.sensorType)
}

// optional int32 sensorDescriptorNumber = 3;
inline void SensorInfo::clear_sensordescriptornumber() {
  sensordescriptornumber_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::sensordescriptornumber() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.sensorDescriptorNumber)
  return sensordescriptornumber_;
}
inline void SensorInfo::set_sensordescriptornumber(::google::protobuf::int32 value) {
  
  sensordescriptornumber_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.sensorDescriptorNumber)
}

// optional double calDelimit = 4;
inline void SensorInfo::clear_caldelimit() {
  caldelimit_ = 0;
}
inline double SensorInfo::caldelimit() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.calDelimit)
  return caldelimit_;
}
inline void SensorInfo::set_caldelimit(double value) {
  
  caldelimit_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.calDelimit)
}

// optional double sampleDelimit = 5;
inline void SensorInfo::clear_sampledelimit() {
  sampledelimit_ = 0;
}
inline double SensorInfo::sampledelimit() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.sampleDelimit)
  return sampledelimit_;
}
inline void SensorInfo::set_sampledelimit(double value) {
  
  sampledelimit_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.sampleDelimit)
}

// optional double postDelimit = 6;
inline void SensorInfo::clear_postdelimit() {
  postdelimit_ = 0;
}
inline double SensorInfo::postdelimit() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.postDelimit)
  return postdelimit_;
}
inline void SensorInfo::set_postdelimit(double value) {
  
  postdelimit_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.postDelimit)
}

// optional double extrapolation = 7;
inline void SensorInfo::clear_extrapolation() {
  extrapolation_ = 0;
}
inline double SensorInfo::extrapolation() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.extrapolation)
  return extrapolation_;
}
inline void SensorInfo::set_extrapolation(double value) {
  
  extrapolation_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.extrapolation)
}

// optional double calWindowSize = 8;
inline void SensorInfo::clear_calwindowsize() {
  calwindowsize_ = 0;
}
inline double SensorInfo::calwindowsize() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.calWindowSize)
  return calwindowsize_;
}
inline void SensorInfo::set_calwindowsize(double value) {
  
  calwindowsize_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.calWindowSize)
}

// optional double sampleWindowSize = 9;
inline void SensorInfo::clear_samplewindowsize() {
  samplewindowsize_ = 0;
}
inline double SensorInfo::samplewindowsize() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.sampleWindowSize)
  return samplewindowsize_;
}
inline void SensorInfo::set_samplewindowsize(double value) {
  
  samplewindowsize_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.sampleWindowSize)
}

// optional double postWindowSize = 10;
inline void SensorInfo::clear_postwindowsize() {
  postwindowsize_ = 0;
}
inline double SensorInfo::postwindowsize() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.postWindowSize)
  return postwindowsize_;
}
inline void SensorInfo::set_postwindowsize(double value) {
  
  postwindowsize_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.postWindowSize)
}

// optional double calCurveWeight = 11;
inline void SensorInfo::clear_calcurveweight() {
  calcurveweight_ = 0;
}
inline double SensorInfo::calcurveweight() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.calCurveWeight)
  return calcurveweight_;
}
inline void SensorInfo::set_calcurveweight(double value) {
  
  calcurveweight_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.calCurveWeight)
}

// optional double sampleCurveWeight = 12;
inline void SensorInfo::clear_samplecurveweight() {
  samplecurveweight_ = 0;
}
inline double SensorInfo::samplecurveweight() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.sampleCurveWeight)
  return samplecurveweight_;
}
inline void SensorInfo::set_samplecurveweight(double value) {
  
  samplecurveweight_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.sampleCurveWeight)
}

// optional double calConcentration = 13;
inline void SensorInfo::clear_calconcentration() {
  calconcentration_ = 0;
}
inline double SensorInfo::calconcentration() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.calConcentration)
  return calconcentration_;
}
inline void SensorInfo::set_calconcentration(double value) {
  
  calconcentration_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.calConcentration)
}

// optional double offset = 14;
inline void SensorInfo::clear_offset() {
  offset_ = 0;
}
inline double SensorInfo::offset() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.offset)
  return offset_;
}
inline void SensorInfo::set_offset(double value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.offset)
}

// optional double slopeFactor = 15;
inline void SensorInfo::clear_slopefactor() {
  slopefactor_ = 0;
}
inline double SensorInfo::slopefactor() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.slopeFactor)
  return slopefactor_;
}
inline void SensorInfo::set_slopefactor(double value) {
  
  slopefactor_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.slopeFactor)
}

// optional double CalMeanLowQC = 16;
inline void SensorInfo::clear_calmeanlowqc() {
  calmeanlowqc_ = 0;
}
inline double SensorInfo::calmeanlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.CalMeanLowQC)
  return calmeanlowqc_;
}
inline void SensorInfo::set_calmeanlowqc(double value) {
  
  calmeanlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.CalMeanLowQC)
}

// optional double CalMeanHighQC = 17;
inline void SensorInfo::clear_calmeanhighqc() {
  calmeanhighqc_ = 0;
}
inline double SensorInfo::calmeanhighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.CalMeanHighQC)
  return calmeanhighqc_;
}
inline void SensorInfo::set_calmeanhighqc(double value) {
  
  calmeanhighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.CalMeanHighQC)
}

// optional double CalDriftLowQC = 18;
inline void SensorInfo::clear_caldriftlowqc() {
  caldriftlowqc_ = 0;
}
inline double SensorInfo::caldriftlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.CalDriftLowQC)
  return caldriftlowqc_;
}
inline void SensorInfo::set_caldriftlowqc(double value) {
  
  caldriftlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.CalDriftLowQC)
}

// optional double CalDriftHighQC = 19;
inline void SensorInfo::clear_caldrifthighqc() {
  caldrifthighqc_ = 0;
}
inline double SensorInfo::caldrifthighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.CalDriftHighQC)
  return caldrifthighqc_;
}
inline void SensorInfo::set_caldrifthighqc(double value) {
  
  caldrifthighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.CalDriftHighQC)
}

// optional double CalSecondLowQC = 20;
inline void SensorInfo::clear_calsecondlowqc() {
  calsecondlowqc_ = 0;
}
inline double SensorInfo::calsecondlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.CalSecondLowQC)
  return calsecondlowqc_;
}
inline void SensorInfo::set_calsecondlowqc(double value) {
  
  calsecondlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.CalSecondLowQC)
}

// optional double CalSecondHighQC = 21;
inline void SensorInfo::clear_calsecondhighqc() {
  calsecondhighqc_ = 0;
}
inline double SensorInfo::calsecondhighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.CalSecondHighQC)
  return calsecondhighqc_;
}
inline void SensorInfo::set_calsecondhighqc(double value) {
  
  calsecondhighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.CalSecondHighQC)
}

// optional double CalNoiseHighQC = 22;
inline void SensorInfo::clear_calnoisehighqc() {
  calnoisehighqc_ = 0;
}
inline double SensorInfo::calnoisehighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.CalNoiseHighQC)
  return calnoisehighqc_;
}
inline void SensorInfo::set_calnoisehighqc(double value) {
  
  calnoisehighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.CalNoiseHighQC)
}

// optional double SampleMeanLowQC = 23;
inline void SensorInfo::clear_samplemeanlowqc() {
  samplemeanlowqc_ = 0;
}
inline double SensorInfo::samplemeanlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.SampleMeanLowQC)
  return samplemeanlowqc_;
}
inline void SensorInfo::set_samplemeanlowqc(double value) {
  
  samplemeanlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.SampleMeanLowQC)
}

// optional double SampleMeanHighQC = 24;
inline void SensorInfo::clear_samplemeanhighqc() {
  samplemeanhighqc_ = 0;
}
inline double SensorInfo::samplemeanhighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.SampleMeanHighQC)
  return samplemeanhighqc_;
}
inline void SensorInfo::set_samplemeanhighqc(double value) {
  
  samplemeanhighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.SampleMeanHighQC)
}

// optional double SampleDriftLowQC = 25;
inline void SensorInfo::clear_sampledriftlowqc() {
  sampledriftlowqc_ = 0;
}
inline double SensorInfo::sampledriftlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.SampleDriftLowQC)
  return sampledriftlowqc_;
}
inline void SensorInfo::set_sampledriftlowqc(double value) {
  
  sampledriftlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.SampleDriftLowQC)
}

// optional double SampleDriftHighQC = 26;
inline void SensorInfo::clear_sampledrifthighqc() {
  sampledrifthighqc_ = 0;
}
inline double SensorInfo::sampledrifthighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.SampleDriftHighQC)
  return sampledrifthighqc_;
}
inline void SensorInfo::set_sampledrifthighqc(double value) {
  
  sampledrifthighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.SampleDriftHighQC)
}

// optional double SampleSecondLowQC = 27;
inline void SensorInfo::clear_samplesecondlowqc() {
  samplesecondlowqc_ = 0;
}
inline double SensorInfo::samplesecondlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.SampleSecondLowQC)
  return samplesecondlowqc_;
}
inline void SensorInfo::set_samplesecondlowqc(double value) {
  
  samplesecondlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.SampleSecondLowQC)
}

// optional double SampleSecondHighQC = 28;
inline void SensorInfo::clear_samplesecondhighqc() {
  samplesecondhighqc_ = 0;
}
inline double SensorInfo::samplesecondhighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.SampleSecondHighQC)
  return samplesecondhighqc_;
}
inline void SensorInfo::set_samplesecondhighqc(double value) {
  
  samplesecondhighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.SampleSecondHighQC)
}

// optional double SampleNoiseHighQC = 29;
inline void SensorInfo::clear_samplenoisehighqc() {
  samplenoisehighqc_ = 0;
}
inline double SensorInfo::samplenoisehighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.SampleNoiseHighQC)
  return samplenoisehighqc_;
}
inline void SensorInfo::set_samplenoisehighqc(double value) {
  
  samplenoisehighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.SampleNoiseHighQC)
}

// optional double PostMeanLowQC = 30;
inline void SensorInfo::clear_postmeanlowqc() {
  postmeanlowqc_ = 0;
}
inline double SensorInfo::postmeanlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.PostMeanLowQC)
  return postmeanlowqc_;
}
inline void SensorInfo::set_postmeanlowqc(double value) {
  
  postmeanlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.PostMeanLowQC)
}

// optional double PostMeanHighQC = 31;
inline void SensorInfo::clear_postmeanhighqc() {
  postmeanhighqc_ = 0;
}
inline double SensorInfo::postmeanhighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.PostMeanHighQC)
  return postmeanhighqc_;
}
inline void SensorInfo::set_postmeanhighqc(double value) {
  
  postmeanhighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.PostMeanHighQC)
}

// optional double PostDriftLowQC = 32;
inline void SensorInfo::clear_postdriftlowqc() {
  postdriftlowqc_ = 0;
}
inline double SensorInfo::postdriftlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.PostDriftLowQC)
  return postdriftlowqc_;
}
inline void SensorInfo::set_postdriftlowqc(double value) {
  
  postdriftlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.PostDriftLowQC)
}

// optional double PostDriftHighQC = 33;
inline void SensorInfo::clear_postdrifthighqc() {
  postdrifthighqc_ = 0;
}
inline double SensorInfo::postdrifthighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.PostDriftHighQC)
  return postdrifthighqc_;
}
inline void SensorInfo::set_postdrifthighqc(double value) {
  
  postdrifthighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.PostDriftHighQC)
}

// optional double PostSecondLowQC = 34;
inline void SensorInfo::clear_postsecondlowqc() {
  postsecondlowqc_ = 0;
}
inline double SensorInfo::postsecondlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.PostSecondLowQC)
  return postsecondlowqc_;
}
inline void SensorInfo::set_postsecondlowqc(double value) {
  
  postsecondlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.PostSecondLowQC)
}

// optional double PostSecondHighQC = 35;
inline void SensorInfo::clear_postsecondhighqc() {
  postsecondhighqc_ = 0;
}
inline double SensorInfo::postsecondhighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.PostSecondHighQC)
  return postsecondhighqc_;
}
inline void SensorInfo::set_postsecondhighqc(double value) {
  
  postsecondhighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.PostSecondHighQC)
}

// optional double PostNoiseHighQC = 36;
inline void SensorInfo::clear_postnoisehighqc() {
  postnoisehighqc_ = 0;
}
inline double SensorInfo::postnoisehighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.PostNoiseHighQC)
  return postnoisehighqc_;
}
inline void SensorInfo::set_postnoisehighqc(double value) {
  
  postnoisehighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.PostNoiseHighQC)
}

// optional double DeltaDriftLowQC = 37;
inline void SensorInfo::clear_deltadriftlowqc() {
  deltadriftlowqc_ = 0;
}
inline double SensorInfo::deltadriftlowqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.DeltaDriftLowQC)
  return deltadriftlowqc_;
}
inline void SensorInfo::set_deltadriftlowqc(double value) {
  
  deltadriftlowqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.DeltaDriftLowQC)
}

// optional double DeltaDriftHighQC = 38;
inline void SensorInfo::clear_deltadrifthighqc() {
  deltadrifthighqc_ = 0;
}
inline double SensorInfo::deltadrifthighqc() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.DeltaDriftHighQC)
  return deltadrifthighqc_;
}
inline void SensorInfo::set_deltadrifthighqc(double value) {
  
  deltadrifthighqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.DeltaDriftHighQC)
}

// optional double param1 = 39;
inline void SensorInfo::clear_param1() {
  param1_ = 0;
}
inline double SensorInfo::param1() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param1)
  return param1_;
}
inline void SensorInfo::set_param1(double value) {
  
  param1_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param1)
}

// optional double param2 = 40;
inline void SensorInfo::clear_param2() {
  param2_ = 0;
}
inline double SensorInfo::param2() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param2)
  return param2_;
}
inline void SensorInfo::set_param2(double value) {
  
  param2_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param2)
}

// optional double param3 = 41;
inline void SensorInfo::clear_param3() {
  param3_ = 0;
}
inline double SensorInfo::param3() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param3)
  return param3_;
}
inline void SensorInfo::set_param3(double value) {
  
  param3_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param3)
}

// optional double param4 = 42;
inline void SensorInfo::clear_param4() {
  param4_ = 0;
}
inline double SensorInfo::param4() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param4)
  return param4_;
}
inline void SensorInfo::set_param4(double value) {
  
  param4_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param4)
}

// optional double param5 = 43;
inline void SensorInfo::clear_param5() {
  param5_ = 0;
}
inline double SensorInfo::param5() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param5)
  return param5_;
}
inline void SensorInfo::set_param5(double value) {
  
  param5_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param5)
}

// optional double param6 = 44;
inline void SensorInfo::clear_param6() {
  param6_ = 0;
}
inline double SensorInfo::param6() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param6)
  return param6_;
}
inline void SensorInfo::set_param6(double value) {
  
  param6_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param6)
}

// optional double param7 = 45;
inline void SensorInfo::clear_param7() {
  param7_ = 0;
}
inline double SensorInfo::param7() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param7)
  return param7_;
}
inline void SensorInfo::set_param7(double value) {
  
  param7_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param7)
}

// optional double param8 = 46;
inline void SensorInfo::clear_param8() {
  param8_ = 0;
}
inline double SensorInfo::param8() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param8)
  return param8_;
}
inline void SensorInfo::set_param8(double value) {
  
  param8_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param8)
}

// optional double param9 = 47;
inline void SensorInfo::clear_param9() {
  param9_ = 0;
}
inline double SensorInfo::param9() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param9)
  return param9_;
}
inline void SensorInfo::set_param9(double value) {
  
  param9_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param9)
}

// optional double param10 = 48;
inline void SensorInfo::clear_param10() {
  param10_ = 0;
}
inline double SensorInfo::param10() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param10)
  return param10_;
}
inline void SensorInfo::set_param10(double value) {
  
  param10_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param10)
}

// optional double param11 = 49;
inline void SensorInfo::clear_param11() {
  param11_ = 0;
}
inline double SensorInfo::param11() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param11)
  return param11_;
}
inline void SensorInfo::set_param11(double value) {
  
  param11_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param11)
}

// optional double param12 = 50;
inline void SensorInfo::clear_param12() {
  param12_ = 0;
}
inline double SensorInfo::param12() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param12)
  return param12_;
}
inline void SensorInfo::set_param12(double value) {
  
  param12_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param12)
}

// optional double param13 = 51;
inline void SensorInfo::clear_param13() {
  param13_ = 0;
}
inline double SensorInfo::param13() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param13)
  return param13_;
}
inline void SensorInfo::set_param13(double value) {
  
  param13_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param13)
}

// optional double param14 = 52;
inline void SensorInfo::clear_param14() {
  param14_ = 0;
}
inline double SensorInfo::param14() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param14)
  return param14_;
}
inline void SensorInfo::set_param14(double value) {
  
  param14_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param14)
}

// optional double param15 = 53;
inline void SensorInfo::clear_param15() {
  param15_ = 0;
}
inline double SensorInfo::param15() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param15)
  return param15_;
}
inline void SensorInfo::set_param15(double value) {
  
  param15_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param15)
}

// optional double param16 = 54;
inline void SensorInfo::clear_param16() {
  param16_ = 0;
}
inline double SensorInfo::param16() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param16)
  return param16_;
}
inline void SensorInfo::set_param16(double value) {
  
  param16_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param16)
}

// optional double param17 = 55;
inline void SensorInfo::clear_param17() {
  param17_ = 0;
}
inline double SensorInfo::param17() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param17)
  return param17_;
}
inline void SensorInfo::set_param17(double value) {
  
  param17_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param17)
}

// optional double param18 = 56;
inline void SensorInfo::clear_param18() {
  param18_ = 0;
}
inline double SensorInfo::param18() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param18)
  return param18_;
}
inline void SensorInfo::set_param18(double value) {
  
  param18_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param18)
}

// optional double param19 = 57;
inline void SensorInfo::clear_param19() {
  param19_ = 0;
}
inline double SensorInfo::param19() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param19)
  return param19_;
}
inline void SensorInfo::set_param19(double value) {
  
  param19_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param19)
}

// optional double param20 = 58;
inline void SensorInfo::clear_param20() {
  param20_ = 0;
}
inline double SensorInfo::param20() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param20)
  return param20_;
}
inline void SensorInfo::set_param20(double value) {
  
  param20_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param20)
}

// optional double param21 = 59;
inline void SensorInfo::clear_param21() {
  param21_ = 0;
}
inline double SensorInfo::param21() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param21)
  return param21_;
}
inline void SensorInfo::set_param21(double value) {
  
  param21_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param21)
}

// optional double param22 = 60;
inline void SensorInfo::clear_param22() {
  param22_ = 0;
}
inline double SensorInfo::param22() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param22)
  return param22_;
}
inline void SensorInfo::set_param22(double value) {
  
  param22_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param22)
}

// optional double param23 = 61;
inline void SensorInfo::clear_param23() {
  param23_ = 0;
}
inline double SensorInfo::param23() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param23)
  return param23_;
}
inline void SensorInfo::set_param23(double value) {
  
  param23_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param23)
}

// optional double param24 = 62;
inline void SensorInfo::clear_param24() {
  param24_ = 0;
}
inline double SensorInfo::param24() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param24)
  return param24_;
}
inline void SensorInfo::set_param24(double value) {
  
  param24_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param24)
}

// optional double param25 = 63;
inline void SensorInfo::clear_param25() {
  param25_ = 0;
}
inline double SensorInfo::param25() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param25)
  return param25_;
}
inline void SensorInfo::set_param25(double value) {
  
  param25_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param25)
}

// optional double param26 = 64;
inline void SensorInfo::clear_param26() {
  param26_ = 0;
}
inline double SensorInfo::param26() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param26)
  return param26_;
}
inline void SensorInfo::set_param26(double value) {
  
  param26_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param26)
}

// optional double param27 = 65;
inline void SensorInfo::clear_param27() {
  param27_ = 0;
}
inline double SensorInfo::param27() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param27)
  return param27_;
}
inline void SensorInfo::set_param27(double value) {
  
  param27_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param27)
}

// optional double param28 = 66;
inline void SensorInfo::clear_param28() {
  param28_ = 0;
}
inline double SensorInfo::param28() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param28)
  return param28_;
}
inline void SensorInfo::set_param28(double value) {
  
  param28_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param28)
}

// optional double param29 = 67;
inline void SensorInfo::clear_param29() {
  param29_ = 0;
}
inline double SensorInfo::param29() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param29)
  return param29_;
}
inline void SensorInfo::set_param29(double value) {
  
  param29_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param29)
}

// optional double param30 = 68;
inline void SensorInfo::clear_param30() {
  param30_ = 0;
}
inline double SensorInfo::param30() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param30)
  return param30_;
}
inline void SensorInfo::set_param30(double value) {
  
  param30_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param30)
}

// optional double param31 = 69;
inline void SensorInfo::clear_param31() {
  param31_ = 0;
}
inline double SensorInfo::param31() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param31)
  return param31_;
}
inline void SensorInfo::set_param31(double value) {
  
  param31_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param31)
}

// optional double param32 = 70;
inline void SensorInfo::clear_param32() {
  param32_ = 0;
}
inline double SensorInfo::param32() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param32)
  return param32_;
}
inline void SensorInfo::set_param32(double value) {
  
  param32_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param32)
}

// optional double param33 = 71;
inline void SensorInfo::clear_param33() {
  param33_ = 0;
}
inline double SensorInfo::param33() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param33)
  return param33_;
}
inline void SensorInfo::set_param33(double value) {
  
  param33_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param33)
}

// optional double param34 = 72;
inline void SensorInfo::clear_param34() {
  param34_ = 0;
}
inline double SensorInfo::param34() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param34)
  return param34_;
}
inline void SensorInfo::set_param34(double value) {
  
  param34_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param34)
}

// optional double param35 = 73;
inline void SensorInfo::clear_param35() {
  param35_ = 0;
}
inline double SensorInfo::param35() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param35)
  return param35_;
}
inline void SensorInfo::set_param35(double value) {
  
  param35_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param35)
}

// optional double param36 = 74;
inline void SensorInfo::clear_param36() {
  param36_ = 0;
}
inline double SensorInfo::param36() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param36)
  return param36_;
}
inline void SensorInfo::set_param36(double value) {
  
  param36_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param36)
}

// optional double param37 = 75;
inline void SensorInfo::clear_param37() {
  param37_ = 0;
}
inline double SensorInfo::param37() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param37)
  return param37_;
}
inline void SensorInfo::set_param37(double value) {
  
  param37_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param37)
}

// optional double param38 = 76;
inline void SensorInfo::clear_param38() {
  param38_ = 0;
}
inline double SensorInfo::param38() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param38)
  return param38_;
}
inline void SensorInfo::set_param38(double value) {
  
  param38_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param38)
}

// optional double param39 = 77;
inline void SensorInfo::clear_param39() {
  param39_ = 0;
}
inline double SensorInfo::param39() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param39)
  return param39_;
}
inline void SensorInfo::set_param39(double value) {
  
  param39_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param39)
}

// optional double param40 = 78;
inline void SensorInfo::clear_param40() {
  param40_ = 0;
}
inline double SensorInfo::param40() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param40)
  return param40_;
}
inline void SensorInfo::set_param40(double value) {
  
  param40_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param40)
}

// optional double param41 = 79;
inline void SensorInfo::clear_param41() {
  param41_ = 0;
}
inline double SensorInfo::param41() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param41)
  return param41_;
}
inline void SensorInfo::set_param41(double value) {
  
  param41_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param41)
}

// optional double param42 = 80;
inline void SensorInfo::clear_param42() {
  param42_ = 0;
}
inline double SensorInfo::param42() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param42)
  return param42_;
}
inline void SensorInfo::set_param42(double value) {
  
  param42_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param42)
}

// optional double param43 = 81;
inline void SensorInfo::clear_param43() {
  param43_ = 0;
}
inline double SensorInfo::param43() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param43)
  return param43_;
}
inline void SensorInfo::set_param43(double value) {
  
  param43_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param43)
}

// optional double param44 = 82;
inline void SensorInfo::clear_param44() {
  param44_ = 0;
}
inline double SensorInfo::param44() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param44)
  return param44_;
}
inline void SensorInfo::set_param44(double value) {
  
  param44_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param44)
}

// optional double param45 = 83;
inline void SensorInfo::clear_param45() {
  param45_ = 0;
}
inline double SensorInfo::param45() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param45)
  return param45_;
}
inline void SensorInfo::set_param45(double value) {
  
  param45_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param45)
}

// optional double param46 = 84;
inline void SensorInfo::clear_param46() {
  param46_ = 0;
}
inline double SensorInfo::param46() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param46)
  return param46_;
}
inline void SensorInfo::set_param46(double value) {
  
  param46_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param46)
}

// optional double param47 = 85;
inline void SensorInfo::clear_param47() {
  param47_ = 0;
}
inline double SensorInfo::param47() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param47)
  return param47_;
}
inline void SensorInfo::set_param47(double value) {
  
  param47_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param47)
}

// optional double param48 = 86;
inline void SensorInfo::clear_param48() {
  param48_ = 0;
}
inline double SensorInfo::param48() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param48)
  return param48_;
}
inline void SensorInfo::set_param48(double value) {
  
  param48_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param48)
}

// optional double param49 = 87;
inline void SensorInfo::clear_param49() {
  param49_ = 0;
}
inline double SensorInfo::param49() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param49)
  return param49_;
}
inline void SensorInfo::set_param49(double value) {
  
  param49_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param49)
}

// optional double param50 = 88;
inline void SensorInfo::clear_param50() {
  param50_ = 0;
}
inline double SensorInfo::param50() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param50)
  return param50_;
}
inline void SensorInfo::set_param50(double value) {
  
  param50_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param50)
}

// optional double param51 = 89;
inline void SensorInfo::clear_param51() {
  param51_ = 0;
}
inline double SensorInfo::param51() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param51)
  return param51_;
}
inline void SensorInfo::set_param51(double value) {
  
  param51_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param51)
}

// optional double param52 = 90;
inline void SensorInfo::clear_param52() {
  param52_ = 0;
}
inline double SensorInfo::param52() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param52)
  return param52_;
}
inline void SensorInfo::set_param52(double value) {
  
  param52_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param52)
}

// optional double param53 = 91;
inline void SensorInfo::clear_param53() {
  param53_ = 0;
}
inline double SensorInfo::param53() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param53)
  return param53_;
}
inline void SensorInfo::set_param53(double value) {
  
  param53_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param53)
}

// optional double param54 = 92;
inline void SensorInfo::clear_param54() {
  param54_ = 0;
}
inline double SensorInfo::param54() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param54)
  return param54_;
}
inline void SensorInfo::set_param54(double value) {
  
  param54_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param54)
}

// optional double param55 = 93;
inline void SensorInfo::clear_param55() {
  param55_ = 0;
}
inline double SensorInfo::param55() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param55)
  return param55_;
}
inline void SensorInfo::set_param55(double value) {
  
  param55_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param55)
}

// optional double param56 = 94;
inline void SensorInfo::clear_param56() {
  param56_ = 0;
}
inline double SensorInfo::param56() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param56)
  return param56_;
}
inline void SensorInfo::set_param56(double value) {
  
  param56_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param56)
}

// optional double param57 = 95;
inline void SensorInfo::clear_param57() {
  param57_ = 0;
}
inline double SensorInfo::param57() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param57)
  return param57_;
}
inline void SensorInfo::set_param57(double value) {
  
  param57_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param57)
}

// optional double param58 = 96;
inline void SensorInfo::clear_param58() {
  param58_ = 0;
}
inline double SensorInfo::param58() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param58)
  return param58_;
}
inline void SensorInfo::set_param58(double value) {
  
  param58_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param58)
}

// optional double param59 = 97;
inline void SensorInfo::clear_param59() {
  param59_ = 0;
}
inline double SensorInfo::param59() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param59)
  return param59_;
}
inline void SensorInfo::set_param59(double value) {
  
  param59_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param59)
}

// optional double param60 = 98;
inline void SensorInfo::clear_param60() {
  param60_ = 0;
}
inline double SensorInfo::param60() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param60)
  return param60_;
}
inline void SensorInfo::set_param60(double value) {
  
  param60_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param60)
}

// optional double param61 = 99;
inline void SensorInfo::clear_param61() {
  param61_ = 0;
}
inline double SensorInfo::param61() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param61)
  return param61_;
}
inline void SensorInfo::set_param61(double value) {
  
  param61_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param61)
}

// optional double param62 = 100;
inline void SensorInfo::clear_param62() {
  param62_ = 0;
}
inline double SensorInfo::param62() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param62)
  return param62_;
}
inline void SensorInfo::set_param62(double value) {
  
  param62_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param62)
}

// optional double param63 = 101;
inline void SensorInfo::clear_param63() {
  param63_ = 0;
}
inline double SensorInfo::param63() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param63)
  return param63_;
}
inline void SensorInfo::set_param63(double value) {
  
  param63_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param63)
}

// optional double param64 = 102;
inline void SensorInfo::clear_param64() {
  param64_ = 0;
}
inline double SensorInfo::param64() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param64)
  return param64_;
}
inline void SensorInfo::set_param64(double value) {
  
  param64_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param64)
}

// optional double param65 = 103;
inline void SensorInfo::clear_param65() {
  param65_ = 0;
}
inline double SensorInfo::param65() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param65)
  return param65_;
}
inline void SensorInfo::set_param65(double value) {
  
  param65_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param65)
}

// optional double param66 = 104;
inline void SensorInfo::clear_param66() {
  param66_ = 0;
}
inline double SensorInfo::param66() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param66)
  return param66_;
}
inline void SensorInfo::set_param66(double value) {
  
  param66_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param66)
}

// optional double param67 = 105;
inline void SensorInfo::clear_param67() {
  param67_ = 0;
}
inline double SensorInfo::param67() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param67)
  return param67_;
}
inline void SensorInfo::set_param67(double value) {
  
  param67_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param67)
}

// optional double param68 = 106;
inline void SensorInfo::clear_param68() {
  param68_ = 0;
}
inline double SensorInfo::param68() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param68)
  return param68_;
}
inline void SensorInfo::set_param68(double value) {
  
  param68_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param68)
}

// optional double param69 = 107;
inline void SensorInfo::clear_param69() {
  param69_ = 0;
}
inline double SensorInfo::param69() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param69)
  return param69_;
}
inline void SensorInfo::set_param69(double value) {
  
  param69_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param69)
}

// optional double param70 = 108;
inline void SensorInfo::clear_param70() {
  param70_ = 0;
}
inline double SensorInfo::param70() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param70)
  return param70_;
}
inline void SensorInfo::set_param70(double value) {
  
  param70_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param70)
}

// optional double param71 = 109;
inline void SensorInfo::clear_param71() {
  param71_ = 0;
}
inline double SensorInfo::param71() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param71)
  return param71_;
}
inline void SensorInfo::set_param71(double value) {
  
  param71_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param71)
}

// optional double param72 = 110;
inline void SensorInfo::clear_param72() {
  param72_ = 0;
}
inline double SensorInfo::param72() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param72)
  return param72_;
}
inline void SensorInfo::set_param72(double value) {
  
  param72_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param72)
}

// optional double param73 = 111;
inline void SensorInfo::clear_param73() {
  param73_ = 0;
}
inline double SensorInfo::param73() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param73)
  return param73_;
}
inline void SensorInfo::set_param73(double value) {
  
  param73_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param73)
}

// optional double param74 = 112;
inline void SensorInfo::clear_param74() {
  param74_ = 0;
}
inline double SensorInfo::param74() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param74)
  return param74_;
}
inline void SensorInfo::set_param74(double value) {
  
  param74_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param74)
}

// optional double param75 = 113;
inline void SensorInfo::clear_param75() {
  param75_ = 0;
}
inline double SensorInfo::param75() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param75)
  return param75_;
}
inline void SensorInfo::set_param75(double value) {
  
  param75_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param75)
}

// optional double param76 = 114;
inline void SensorInfo::clear_param76() {
  param76_ = 0;
}
inline double SensorInfo::param76() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param76)
  return param76_;
}
inline void SensorInfo::set_param76(double value) {
  
  param76_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param76)
}

// optional double param77 = 115;
inline void SensorInfo::clear_param77() {
  param77_ = 0;
}
inline double SensorInfo::param77() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param77)
  return param77_;
}
inline void SensorInfo::set_param77(double value) {
  
  param77_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param77)
}

// optional double param78 = 116;
inline void SensorInfo::clear_param78() {
  param78_ = 0;
}
inline double SensorInfo::param78() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param78)
  return param78_;
}
inline void SensorInfo::set_param78(double value) {
  
  param78_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param78)
}

// optional double param79 = 117;
inline void SensorInfo::clear_param79() {
  param79_ = 0;
}
inline double SensorInfo::param79() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param79)
  return param79_;
}
inline void SensorInfo::set_param79(double value) {
  
  param79_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param79)
}

// optional double param80 = 118;
inline void SensorInfo::clear_param80() {
  param80_ = 0;
}
inline double SensorInfo::param80() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param80)
  return param80_;
}
inline void SensorInfo::set_param80(double value) {
  
  param80_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param80)
}

// optional double param81 = 119;
inline void SensorInfo::clear_param81() {
  param81_ = 0;
}
inline double SensorInfo::param81() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param81)
  return param81_;
}
inline void SensorInfo::set_param81(double value) {
  
  param81_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param81)
}

// optional double param82 = 120;
inline void SensorInfo::clear_param82() {
  param82_ = 0;
}
inline double SensorInfo::param82() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param82)
  return param82_;
}
inline void SensorInfo::set_param82(double value) {
  
  param82_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param82)
}

// optional double param83 = 121;
inline void SensorInfo::clear_param83() {
  param83_ = 0;
}
inline double SensorInfo::param83() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param83)
  return param83_;
}
inline void SensorInfo::set_param83(double value) {
  
  param83_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param83)
}

// optional double param84 = 122;
inline void SensorInfo::clear_param84() {
  param84_ = 0;
}
inline double SensorInfo::param84() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param84)
  return param84_;
}
inline void SensorInfo::set_param84(double value) {
  
  param84_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param84)
}

// optional double param85 = 123;
inline void SensorInfo::clear_param85() {
  param85_ = 0;
}
inline double SensorInfo::param85() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param85)
  return param85_;
}
inline void SensorInfo::set_param85(double value) {
  
  param85_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param85)
}

// optional double param86 = 124;
inline void SensorInfo::clear_param86() {
  param86_ = 0;
}
inline double SensorInfo::param86() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param86)
  return param86_;
}
inline void SensorInfo::set_param86(double value) {
  
  param86_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param86)
}

// optional double param87 = 125;
inline void SensorInfo::clear_param87() {
  param87_ = 0;
}
inline double SensorInfo::param87() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param87)
  return param87_;
}
inline void SensorInfo::set_param87(double value) {
  
  param87_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param87)
}

// optional double param88 = 126;
inline void SensorInfo::clear_param88() {
  param88_ = 0;
}
inline double SensorInfo::param88() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param88)
  return param88_;
}
inline void SensorInfo::set_param88(double value) {
  
  param88_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param88)
}

// optional double param89 = 127;
inline void SensorInfo::clear_param89() {
  param89_ = 0;
}
inline double SensorInfo::param89() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param89)
  return param89_;
}
inline void SensorInfo::set_param89(double value) {
  
  param89_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param89)
}

// optional double param90 = 128;
inline void SensorInfo::clear_param90() {
  param90_ = 0;
}
inline double SensorInfo::param90() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param90)
  return param90_;
}
inline void SensorInfo::set_param90(double value) {
  
  param90_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param90)
}

// optional double param91 = 129;
inline void SensorInfo::clear_param91() {
  param91_ = 0;
}
inline double SensorInfo::param91() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param91)
  return param91_;
}
inline void SensorInfo::set_param91(double value) {
  
  param91_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param91)
}

// optional double param92 = 130;
inline void SensorInfo::clear_param92() {
  param92_ = 0;
}
inline double SensorInfo::param92() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param92)
  return param92_;
}
inline void SensorInfo::set_param92(double value) {
  
  param92_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param92)
}

// optional double param93 = 131;
inline void SensorInfo::clear_param93() {
  param93_ = 0;
}
inline double SensorInfo::param93() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param93)
  return param93_;
}
inline void SensorInfo::set_param93(double value) {
  
  param93_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param93)
}

// optional double param94 = 132;
inline void SensorInfo::clear_param94() {
  param94_ = 0;
}
inline double SensorInfo::param94() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param94)
  return param94_;
}
inline void SensorInfo::set_param94(double value) {
  
  param94_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param94)
}

// optional double param95 = 133;
inline void SensorInfo::clear_param95() {
  param95_ = 0;
}
inline double SensorInfo::param95() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param95)
  return param95_;
}
inline void SensorInfo::set_param95(double value) {
  
  param95_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param95)
}

// optional double param96 = 134;
inline void SensorInfo::clear_param96() {
  param96_ = 0;
}
inline double SensorInfo::param96() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param96)
  return param96_;
}
inline void SensorInfo::set_param96(double value) {
  
  param96_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param96)
}

// optional double param97 = 135;
inline void SensorInfo::clear_param97() {
  param97_ = 0;
}
inline double SensorInfo::param97() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param97)
  return param97_;
}
inline void SensorInfo::set_param97(double value) {
  
  param97_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param97)
}

// optional double param98 = 136;
inline void SensorInfo::clear_param98() {
  param98_ = 0;
}
inline double SensorInfo::param98() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param98)
  return param98_;
}
inline void SensorInfo::set_param98(double value) {
  
  param98_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param98)
}

// optional double param99 = 137;
inline void SensorInfo::clear_param99() {
  param99_ = 0;
}
inline double SensorInfo::param99() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param99)
  return param99_;
}
inline void SensorInfo::set_param99(double value) {
  
  param99_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param99)
}

// optional double param100 = 138;
inline void SensorInfo::clear_param100() {
  param100_ = 0;
}
inline double SensorInfo::param100() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.param100)
  return param100_;
}
inline void SensorInfo::set_param100(double value) {
  
  param100_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.param100)
}

// optional float readerMeanLow = 139;
inline void SensorInfo::clear_readermeanlow() {
  readermeanlow_ = 0;
}
inline float SensorInfo::readermeanlow() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.readerMeanLow)
  return readermeanlow_;
}
inline void SensorInfo::set_readermeanlow(float value) {
  
  readermeanlow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.readerMeanLow)
}

// optional float readerMeanHigh = 140;
inline void SensorInfo::clear_readermeanhigh() {
  readermeanhigh_ = 0;
}
inline float SensorInfo::readermeanhigh() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.readerMeanHigh)
  return readermeanhigh_;
}
inline void SensorInfo::set_readermeanhigh(float value) {
  
  readermeanhigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.readerMeanHigh)
}

// optional float readerDriftLow = 141;
inline void SensorInfo::clear_readerdriftlow() {
  readerdriftlow_ = 0;
}
inline float SensorInfo::readerdriftlow() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.readerDriftLow)
  return readerdriftlow_;
}
inline void SensorInfo::set_readerdriftlow(float value) {
  
  readerdriftlow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.readerDriftLow)
}

// optional float readerDriftHigh = 142;
inline void SensorInfo::clear_readerdrifthigh() {
  readerdrifthigh_ = 0;
}
inline float SensorInfo::readerdrifthigh() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.readerDriftHigh)
  return readerdrifthigh_;
}
inline void SensorInfo::set_readerdrifthigh(float value) {
  
  readerdrifthigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.readerDriftHigh)
}

// optional float readerNoiseLow = 143;
inline void SensorInfo::clear_readernoiselow() {
  readernoiselow_ = 0;
}
inline float SensorInfo::readernoiselow() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.readerNoiseLow)
  return readernoiselow_;
}
inline void SensorInfo::set_readernoiselow(float value) {
  
  readernoiselow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.readerNoiseLow)
}

// optional float readerNoiseHigh = 144;
inline void SensorInfo::clear_readernoisehigh() {
  readernoisehigh_ = 0;
}
inline float SensorInfo::readernoisehigh() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.readerNoiseHigh)
  return readernoisehigh_;
}
inline void SensorInfo::set_readernoisehigh(float value) {
  
  readernoisehigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.readerNoiseHigh)
}

// optional double tMinus = 145;
inline void SensorInfo::clear_tminus() {
  tminus_ = 0;
}
inline double SensorInfo::tminus() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.tMinus)
  return tminus_;
}
inline void SensorInfo::set_tminus(double value) {
  
  tminus_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.tMinus)
}

// optional double tPlus = 146;
inline void SensorInfo::clear_tplus() {
  tplus_ = 0;
}
inline double SensorInfo::tplus() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.tPlus)
  return tplus_;
}
inline void SensorInfo::set_tplus(double value) {
  
  tplus_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.tPlus)
}

// optional double postCurvatureWeight = 147;
inline void SensorInfo::clear_postcurvatureweight() {
  postcurvatureweight_ = 0;
}
inline double SensorInfo::postcurvatureweight() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.postCurvatureWeight)
  return postcurvatureweight_;
}
inline void SensorInfo::set_postcurvatureweight(double value) {
  
  postcurvatureweight_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.postCurvatureWeight)
}

// optional int32 bloodPointsToSkip = 148;
inline void SensorInfo::clear_bloodpointstoskip() {
  bloodpointstoskip_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::bloodpointstoskip() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.bloodPointsToSkip)
  return bloodpointstoskip_;
}
inline void SensorInfo::set_bloodpointstoskip(::google::protobuf::int32 value) {
  
  bloodpointstoskip_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.bloodPointsToSkip)
}

// optional int32 bloodPointsInWindow = 149;
inline void SensorInfo::clear_bloodpointsinwindow() {
  bloodpointsinwindow_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::bloodpointsinwindow() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.bloodPointsInWindow)
  return bloodpointsinwindow_;
}
inline void SensorInfo::set_bloodpointsinwindow(::google::protobuf::int32 value) {
  
  bloodpointsinwindow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.bloodPointsInWindow)
}

// optional double bloodNoiseHigh = 150;
inline void SensorInfo::clear_bloodnoisehigh() {
  bloodnoisehigh_ = 0;
}
inline double SensorInfo::bloodnoisehigh() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.bloodNoiseHigh)
  return bloodnoisehigh_;
}
inline void SensorInfo::set_bloodnoisehigh(double value) {
  
  bloodnoisehigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.bloodNoiseHigh)
}

// optional int32 aqPointsToSkip = 151;
inline void SensorInfo::clear_aqpointstoskip() {
  aqpointstoskip_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::aqpointstoskip() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.aqPointsToSkip)
  return aqpointstoskip_;
}
inline void SensorInfo::set_aqpointstoskip(::google::protobuf::int32 value) {
  
  aqpointstoskip_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.aqPointsToSkip)
}

// optional int32 aqPointsInWindow = 152;
inline void SensorInfo::clear_aqpointsinwindow() {
  aqpointsinwindow_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::aqpointsinwindow() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.aqPointsInWindow)
  return aqpointsinwindow_;
}
inline void SensorInfo::set_aqpointsinwindow(::google::protobuf::int32 value) {
  
  aqpointsinwindow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.aqPointsInWindow)
}

// optional double aqNoiseHigh = 153;
inline void SensorInfo::clear_aqnoisehigh() {
  aqnoisehigh_ = 0;
}
inline double SensorInfo::aqnoisehigh() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.aqNoiseHigh)
  return aqnoisehigh_;
}
inline void SensorInfo::set_aqnoisehigh(double value) {
  
  aqnoisehigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.aqNoiseHigh)
}

// optional int32 lateBloodPointsToSkip = 154;
inline void SensorInfo::clear_latebloodpointstoskip() {
  latebloodpointstoskip_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::latebloodpointstoskip() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.lateBloodPointsToSkip)
  return latebloodpointstoskip_;
}
inline void SensorInfo::set_latebloodpointstoskip(::google::protobuf::int32 value) {
  
  latebloodpointstoskip_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.lateBloodPointsToSkip)
}

// optional int32 lateBloodPointsInWindow = 155;
inline void SensorInfo::clear_latebloodpointsinwindow() {
  latebloodpointsinwindow_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::latebloodpointsinwindow() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.lateBloodPointsInWindow)
  return latebloodpointsinwindow_;
}
inline void SensorInfo::set_latebloodpointsinwindow(::google::protobuf::int32 value) {
  
  latebloodpointsinwindow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.lateBloodPointsInWindow)
}

// optional double lateBloodNoiseHigh = 156;
inline void SensorInfo::clear_latebloodnoisehigh() {
  latebloodnoisehigh_ = 0;
}
inline double SensorInfo::latebloodnoisehigh() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.lateBloodNoiseHigh)
  return latebloodnoisehigh_;
}
inline void SensorInfo::set_latebloodnoisehigh(double value) {
  
  latebloodnoisehigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.lateBloodNoiseHigh)
}

// optional int32 lateAqPointsToSkip = 157;
inline void SensorInfo::clear_lateaqpointstoskip() {
  lateaqpointstoskip_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::lateaqpointstoskip() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.lateAqPointsToSkip)
  return lateaqpointstoskip_;
}
inline void SensorInfo::set_lateaqpointstoskip(::google::protobuf::int32 value) {
  
  lateaqpointstoskip_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.lateAqPointsToSkip)
}

// optional int32 lateAqPointsInWindow = 158;
inline void SensorInfo::clear_lateaqpointsinwindow() {
  lateaqpointsinwindow_ = 0;
}
inline ::google::protobuf::int32 SensorInfo::lateaqpointsinwindow() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.lateAqPointsInWindow)
  return lateaqpointsinwindow_;
}
inline void SensorInfo::set_lateaqpointsinwindow(::google::protobuf::int32 value) {
  
  lateaqpointsinwindow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.lateAqPointsInWindow)
}

// optional double lateAqNoiseHigh = 159;
inline void SensorInfo::clear_lateaqnoisehigh() {
  lateaqnoisehigh_ = 0;
}
inline double SensorInfo::lateaqnoisehigh() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.lateAqNoiseHigh)
  return lateaqnoisehigh_;
}
inline void SensorInfo::set_lateaqnoisehigh(double value) {
  
  lateaqnoisehigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.lateAqNoiseHigh)
}

// optional double rtPointLimitLow = 160;
inline void SensorInfo::clear_rtpointlimitlow() {
  rtpointlimitlow_ = 0;
}
inline double SensorInfo::rtpointlimitlow() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.rtPointLimitLow)
  return rtpointlimitlow_;
}
inline void SensorInfo::set_rtpointlimitlow(double value) {
  
  rtpointlimitlow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.rtPointLimitLow)
}

// optional double rtPointLimitHigh = 161;
inline void SensorInfo::clear_rtpointlimithigh() {
  rtpointlimithigh_ = 0;
}
inline double SensorInfo::rtpointlimithigh() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.rtPointLimitHigh)
  return rtpointlimithigh_;
}
inline void SensorInfo::set_rtpointlimithigh(double value) {
  
  rtpointlimithigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.rtPointLimitHigh)
}

// optional double d1Low = 162;
inline void SensorInfo::clear_d1low() {
  d1low_ = 0;
}
inline double SensorInfo::d1low() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.d1Low)
  return d1low_;
}
inline void SensorInfo::set_d1low(double value) {
  
  d1low_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.d1Low)
}

// optional double d1High = 163;
inline void SensorInfo::clear_d1high() {
  d1high_ = 0;
}
inline double SensorInfo::d1high() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.d1High)
  return d1high_;
}
inline void SensorInfo::set_d1high(double value) {
  
  d1high_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.d1High)
}

// optional double p1d2Low = 164;
inline void SensorInfo::clear_p1d2low() {
  p1d2low_ = 0;
}
inline double SensorInfo::p1d2low() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.p1d2Low)
  return p1d2low_;
}
inline void SensorInfo::set_p1d2low(double value) {
  
  p1d2low_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.p1d2Low)
}

// optional double p1d2High = 165;
inline void SensorInfo::clear_p1d2high() {
  p1d2high_ = 0;
}
inline double SensorInfo::p1d2high() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.p1d2High)
  return p1d2high_;
}
inline void SensorInfo::set_p1d2high(double value) {
  
  p1d2high_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.p1d2High)
}

// optional double p2d2Low = 166;
inline void SensorInfo::clear_p2d2low() {
  p2d2low_ = 0;
}
inline double SensorInfo::p2d2low() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.p2d2Low)
  return p2d2low_;
}
inline void SensorInfo::set_p2d2low(double value) {
  
  p2d2low_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.p2d2Low)
}

// optional double p2d2High = 167;
inline void SensorInfo::clear_p2d2high() {
  p2d2high_ = 0;
}
inline double SensorInfo::p2d2high() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.p2d2High)
  return p2d2high_;
}
inline void SensorInfo::set_p2d2high(double value) {
  
  p2d2high_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.p2d2High)
}

// optional double p3d2Low = 168;
inline void SensorInfo::clear_p3d2low() {
  p3d2low_ = 0;
}
inline double SensorInfo::p3d2low() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.p3d2Low)
  return p3d2low_;
}
inline void SensorInfo::set_p3d2low(double value) {
  
  p3d2low_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.p3d2Low)
}

// optional double p3d2High = 169;
inline void SensorInfo::clear_p3d2high() {
  p3d2high_ = 0;
}
inline double SensorInfo::p3d2high() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.p3d2High)
  return p3d2high_;
}
inline void SensorInfo::set_p3d2high(double value) {
  
  p3d2high_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.p3d2High)
}

// optional double A = 170;
inline void SensorInfo::clear_a() {
  a_ = 0;
}
inline double SensorInfo::a() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.A)
  return a_;
}
inline void SensorInfo::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.A)
}

// optional double B = 171;
inline void SensorInfo::clear_b() {
  b_ = 0;
}
inline double SensorInfo::b() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.B)
  return b_;
}
inline void SensorInfo::set_b(double value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.B)
}

// optional double C = 172;
inline void SensorInfo::clear_c() {
  c_ = 0;
}
inline double SensorInfo::c() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.C)
  return c_;
}
inline void SensorInfo::set_c(double value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.C)
}

// optional double D = 173;
inline void SensorInfo::clear_d() {
  d_ = 0;
}
inline double SensorInfo::d() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.D)
  return d_;
}
inline void SensorInfo::set_d(double value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.D)
}

// optional double F = 174;
inline void SensorInfo::clear_f() {
  f_ = 0;
}
inline double SensorInfo::f() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.F)
  return f_;
}
inline void SensorInfo::set_f(double value) {
  
  f_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.F)
}

// optional double G = 175;
inline void SensorInfo::clear_g() {
  g_ = 0;
}
inline double SensorInfo::g() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.G)
  return g_;
}
inline void SensorInfo::set_g(double value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.G)
}

// optional double TAmbOffset = 176;
inline void SensorInfo::clear_tamboffset() {
  tamboffset_ = 0;
}
inline double SensorInfo::tamboffset() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.TAmbOffset)
  return tamboffset_;
}
inline void SensorInfo::set_tamboffset(double value) {
  
  tamboffset_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.TAmbOffset)
}

// optional double InjectionTimeOffset = 177;
inline void SensorInfo::clear_injectiontimeoffset() {
  injectiontimeoffset_ = 0;
}
inline double SensorInfo::injectiontimeoffset() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.InjectionTimeOffset)
  return injectiontimeoffset_;
}
inline void SensorInfo::set_injectiontimeoffset(double value) {
  
  injectiontimeoffset_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.InjectionTimeOffset)
}

// optional double AgeOffset = 178;
inline void SensorInfo::clear_ageoffset() {
  ageoffset_ = 0;
}
inline double SensorInfo::ageoffset() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.AgeOffset)
  return ageoffset_;
}
inline void SensorInfo::set_ageoffset(double value) {
  
  ageoffset_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.AgeOffset)
}

// optional double PowerOffset = 179;
inline void SensorInfo::clear_poweroffset() {
  poweroffset_ = 0;
}
inline double SensorInfo::poweroffset() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.PowerOffset)
  return poweroffset_;
}
inline void SensorInfo::set_poweroffset(double value) {
  
  poweroffset_ = value;
  // @@protoc_insertion_point(field_set:to.SensorInfo.PowerOffset)
}

// optional string NeuralNetBlood = 180;
inline void SensorInfo::clear_neuralnetblood() {
  neuralnetblood_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorInfo::neuralnetblood() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.NeuralNetBlood)
  return neuralnetblood_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInfo::set_neuralnetblood(const ::std::string& value) {
  
  neuralnetblood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorInfo.NeuralNetBlood)
}
inline void SensorInfo::set_neuralnetblood(const char* value) {
  
  neuralnetblood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorInfo.NeuralNetBlood)
}
inline void SensorInfo::set_neuralnetblood(const char* value, size_t size) {
  
  neuralnetblood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorInfo.NeuralNetBlood)
}
inline ::std::string* SensorInfo::mutable_neuralnetblood() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorInfo.NeuralNetBlood)
  return neuralnetblood_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorInfo::release_neuralnetblood() {
  // @@protoc_insertion_point(field_release:to.SensorInfo.NeuralNetBlood)
  
  return neuralnetblood_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInfo::set_allocated_neuralnetblood(::std::string* neuralnetblood) {
  if (neuralnetblood != NULL) {
    
  } else {
    
  }
  neuralnetblood_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neuralnetblood);
  // @@protoc_insertion_point(field_set_allocated:to.SensorInfo.NeuralNetBlood)
}

// optional string NeuralNetAQ = 181;
inline void SensorInfo::clear_neuralnetaq() {
  neuralnetaq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorInfo::neuralnetaq() const {
  // @@protoc_insertion_point(field_get:to.SensorInfo.NeuralNetAQ)
  return neuralnetaq_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInfo::set_neuralnetaq(const ::std::string& value) {
  
  neuralnetaq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorInfo.NeuralNetAQ)
}
inline void SensorInfo::set_neuralnetaq(const char* value) {
  
  neuralnetaq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorInfo.NeuralNetAQ)
}
inline void SensorInfo::set_neuralnetaq(const char* value, size_t size) {
  
  neuralnetaq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorInfo.NeuralNetAQ)
}
inline ::std::string* SensorInfo::mutable_neuralnetaq() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorInfo.NeuralNetAQ)
  return neuralnetaq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorInfo::release_neuralnetaq() {
  // @@protoc_insertion_point(field_release:to.SensorInfo.NeuralNetAQ)
  
  return neuralnetaq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInfo::set_allocated_neuralnetaq(::std::string* neuralnetaq) {
  if (neuralnetaq != NULL) {
    
  } else {
    
  }
  neuralnetaq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neuralnetaq);
  // @@protoc_insertion_point(field_set_allocated:to.SensorInfo.NeuralNetAQ)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sensor_5finfo_2eproto__INCLUDED
