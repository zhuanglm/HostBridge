// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_readings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor_readings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace to {

void protobuf_ShutdownFile_sensor_5freadings_2eproto() {
  delete SensorReadings::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_sensor_5freadings_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_sensor_5freadings_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_sensor_5freadings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::to::protobuf_AddDesc_reading_2eproto();
  ::to::protobuf_AddDesc_sensor_5finfo_2eproto();
  ::to::protobuf_AddDesc_levels_2eproto();
  SensorReadings::default_instance_ = new SensorReadings();
  SensorReadings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensor_5freadings_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sensor_5freadings_2eproto_once_);
void protobuf_AddDesc_sensor_5freadings_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sensor_5freadings_2eproto_once_,
                 &protobuf_AddDesc_sensor_5freadings_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensor_5freadings_2eproto {
  StaticDescriptorInitializer_sensor_5freadings_2eproto() {
    protobuf_AddDesc_sensor_5freadings_2eproto();
  }
} static_descriptor_initializer_sensor_5freadings_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorReadings::kRequirementsFailedQCFieldNumber;
const int SensorReadings::kReturnCodeFieldNumber;
const int SensorReadings::kSensorTypeFieldNumber;
const int SensorReadings::kSensorDescriptorNumberFieldNumber;
const int SensorReadings::kChannelTypeFieldNumber;
const int SensorReadings::kAnalyteFieldNumber;
const int SensorReadings::kAnalyteStringFieldNumber;
const int SensorReadings::kReadingsFieldNumber;
const int SensorReadings::kReadingPointerFieldNumber;
const int SensorReadings::kNumThisTypeReadingFieldNumber;
const int SensorReadings::kResultFieldNumber;
const int SensorReadings::kMultiplicationFactorFieldNumber;
const int SensorReadings::kSensorDescriptorFieldNumber;
const int SensorReadings::kRealTimeQCPassedFieldNumber;
const int SensorReadings::kRealTimeQCFailedEverFieldNumber;
const int SensorReadings::kCheckRealtimeQCFieldNumber;
const int SensorReadings::kReportableLowFieldNumber;
const int SensorReadings::kReportableHighFieldNumber;
const int SensorReadings::kLevelsFieldNumber;
const int SensorReadings::kHumidityPassedFieldNumber;
const int SensorReadings::kInsanityLowFieldNumber;
const int SensorReadings::kInsanityHighFieldNumber;
const int SensorReadings::kInsanityQALowFieldNumber;
const int SensorReadings::kInsanityQAHighFieldNumber;
const int SensorReadings::kRealTimeQCFailureTotalFieldNumber;
const int SensorReadings::kHumidityQCFailureTotalFieldNumber;
const int SensorReadings::kAirQCFailureTotalFieldNumber;
const int SensorReadings::kRealTimeQCFailureOccuranceStringFieldNumber;
const int SensorReadings::kHumidityQCFailureOccuranceStringFieldNumber;
const int SensorReadings::kAirQCFailureOccuranceStringFieldNumber;
const int SensorReadings::kExtraStringFieldNumber;
const int SensorReadings::kResultStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorReadings::SensorReadings()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:to.SensorReadings)
}

void SensorReadings::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sensordescriptor_ = const_cast< ::to::SensorInfo*>(
      ::to::SensorInfo::internal_default_instance());
#else
  sensordescriptor_ = const_cast< ::to::SensorInfo*>(&::to::SensorInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  levels_ = const_cast< ::to::Levels*>(
      ::to::Levels::internal_default_instance());
#else
  levels_ = const_cast< ::to::Levels*>(&::to::Levels::default_instance());
#endif
}

SensorReadings::SensorReadings(const SensorReadings& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:to.SensorReadings)
}

void SensorReadings::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requirementsfailedqc_ = false;
  returncode_ = 0;
  sensortype_ = 0;
  sensordescriptornumber_ = 0;
  channeltype_ = 0;
  analyte_ = 0;
  analytestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readingpointer_ = 0;
  numthistypereading_ = 0;
  result_ = 0;
  multiplicationfactor_ = 0;
  sensordescriptor_ = NULL;
  realtimeqcpassed_ = 0;
  realtimeqcfailedever_ = 0;
  checkrealtimeqc_ = false;
  reportablelow_ = 0;
  reportablehigh_ = 0;
  levels_ = NULL;
  humiditypassed_ = 0;
  insanitylow_ = 0;
  insanityhigh_ = 0;
  insanityqalow_ = 0;
  insanityqahigh_ = 0;
  realtimeqcfailuretotal_ = 0;
  humidityqcfailuretotal_ = 0;
  airqcfailuretotal_ = 0;
  realtimeqcfailureoccurancestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  humidityqcfailureoccurancestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  airqcfailureoccurancestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extrastring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resultstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SensorReadings::~SensorReadings() {
  // @@protoc_insertion_point(destructor:to.SensorReadings)
  SharedDtor();
}

void SensorReadings::SharedDtor() {
  analytestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realtimeqcfailureoccurancestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  humidityqcfailureoccurancestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  airqcfailureoccurancestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extrastring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resultstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sensordescriptor_;
    delete levels_;
  }
}

void SensorReadings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SensorReadings& SensorReadings::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sensor_5freadings_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sensor_5freadings_2eproto();
#endif
  return *default_instance_;
}

SensorReadings* SensorReadings::default_instance_ = NULL;

SensorReadings* SensorReadings::New(::google::protobuf::Arena* arena) const {
  SensorReadings* n = new SensorReadings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorReadings::Clear() {
// @@protoc_insertion_point(message_clear_start:to.SensorReadings)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SensorReadings, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SensorReadings*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(returncode_, channeltype_);
  ZR_(analyte_, requirementsfailedqc_);
  analytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(readingpointer_, multiplicationfactor_);
  ZR_(realtimeqcpassed_, realtimeqcfailedever_);
  if (GetArenaNoVirtual() == NULL && sensordescriptor_ != NULL) delete sensordescriptor_;
  sensordescriptor_ = NULL;
  checkrealtimeqc_ = false;
  ZR_(reportablelow_, reportablehigh_);
  ZR_(insanitylow_, humiditypassed_);
  ZR_(insanityqalow_, insanityqahigh_);
  if (GetArenaNoVirtual() == NULL && levels_ != NULL) delete levels_;
  levels_ = NULL;
  ZR_(humidityqcfailuretotal_, airqcfailuretotal_);
  realtimeqcfailuretotal_ = 0;
  realtimeqcfailureoccurancestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  humidityqcfailureoccurancestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  airqcfailureoccurancestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extrastring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resultstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  readings_.Clear();
}

bool SensorReadings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to.SensorReadings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool requirementsFailedQC = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requirementsfailedqc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_returnCode;
        break;
      }

      // optional int32 returnCode = 2;
      case 2: {
        if (tag == 16) {
         parse_returnCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returncode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sensorType;
        break;
      }

      // optional int32 sensorType = 3;
      case 3: {
        if (tag == 24) {
         parse_sensorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensortype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sensorDescriptorNumber;
        break;
      }

      // optional int32 sensorDescriptorNumber = 4;
      case 4: {
        if (tag == 32) {
         parse_sensorDescriptorNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensordescriptornumber_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelType;
        break;
      }

      // optional int32 channelType = 5;
      case 5: {
        if (tag == 40) {
         parse_channelType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channeltype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_analyte;
        break;
      }

      // optional int32 analyte = 6;
      case 6: {
        if (tag == 48) {
         parse_analyte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analyte_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_analyteString;
        break;
      }

      // optional string analyteString = 7;
      case 7: {
        if (tag == 58) {
         parse_analyteString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analytestring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analytestring().data(), this->analytestring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to.SensorReadings.analyteString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_readings;
        break;
      }

      // repeated .to.Reading readings = 8;
      case 8: {
        if (tag == 66) {
         parse_readings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_readings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_readings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_readings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_readingPointer;
        break;
      }

      // optional int32 readingPointer = 9;
      case 9: {
        if (tag == 72) {
         parse_readingPointer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readingpointer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_numThisTypeReading;
        break;
      }

      // optional int32 numThisTypeReading = 10;
      case 10: {
        if (tag == 80) {
         parse_numThisTypeReading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numthistypereading_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_result;
        break;
      }

      // optional double result = 11;
      case 11: {
        if (tag == 89) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_multiplicationFactor;
        break;
      }

      // optional double multiplicationFactor = 12;
      case 12: {
        if (tag == 97) {
         parse_multiplicationFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &multiplicationfactor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sensorDescriptor;
        break;
      }

      // optional .to.SensorInfo sensorDescriptor = 13;
      case 13: {
        if (tag == 106) {
         parse_sensorDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensordescriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_realTimeQCPassed;
        break;
      }

      // optional int32 realTimeQCPassed = 14;
      case 14: {
        if (tag == 112) {
         parse_realTimeQCPassed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realtimeqcpassed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_realTimeQCFailedEver;
        break;
      }

      // optional int32 realTimeQCFailedEver = 15;
      case 15: {
        if (tag == 120) {
         parse_realTimeQCFailedEver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realtimeqcfailedever_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_checkRealtimeQC;
        break;
      }

      // optional bool checkRealtimeQC = 16;
      case 16: {
        if (tag == 128) {
         parse_checkRealtimeQC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkrealtimeqc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_reportableLow;
        break;
      }

      // optional double reportableLow = 17;
      case 17: {
        if (tag == 137) {
         parse_reportableLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reportablelow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_reportableHigh;
        break;
      }

      // optional double reportableHigh = 18;
      case 18: {
        if (tag == 145) {
         parse_reportableHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reportablehigh_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_levels;
        break;
      }

      // optional .to.Levels levels = 19;
      case 19: {
        if (tag == 154) {
         parse_levels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_levels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_humidityPassed;
        break;
      }

      // optional int32 humidityPassed = 20;
      case 20: {
        if (tag == 160) {
         parse_humidityPassed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &humiditypassed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_insanityLow;
        break;
      }

      // optional double insanityLow = 21;
      case 21: {
        if (tag == 169) {
         parse_insanityLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &insanitylow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_insanityHigh;
        break;
      }

      // optional double insanityHigh = 22;
      case 22: {
        if (tag == 177) {
         parse_insanityHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &insanityhigh_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_insanityQALow;
        break;
      }

      // optional double insanityQALow = 23;
      case 23: {
        if (tag == 185) {
         parse_insanityQALow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &insanityqalow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_insanityQAHigh;
        break;
      }

      // optional double insanityQAHigh = 24;
      case 24: {
        if (tag == 193) {
         parse_insanityQAHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &insanityqahigh_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_RealTimeQCFailureTotal;
        break;
      }

      // optional int32 RealTimeQCFailureTotal = 25;
      case 25: {
        if (tag == 200) {
         parse_RealTimeQCFailureTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realtimeqcfailuretotal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_HumidityQCFailureTotal;
        break;
      }

      // optional int32 HumidityQCFailureTotal = 26;
      case 26: {
        if (tag == 208) {
         parse_HumidityQCFailureTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &humidityqcfailuretotal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_AirQCFailureTotal;
        break;
      }

      // optional int32 AirQCFailureTotal = 27;
      case 27: {
        if (tag == 216) {
         parse_AirQCFailureTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &airqcfailuretotal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_RealTimeQCFailureOccuranceString;
        break;
      }

      // optional string RealTimeQCFailureOccuranceString = 28;
      case 28: {
        if (tag == 226) {
         parse_RealTimeQCFailureOccuranceString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realtimeqcfailureoccurancestring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->realtimeqcfailureoccurancestring().data(), this->realtimeqcfailureoccurancestring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to.SensorReadings.RealTimeQCFailureOccuranceString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_HumidityQCFailureOccuranceString;
        break;
      }

      // optional string HumidityQCFailureOccuranceString = 29;
      case 29: {
        if (tag == 234) {
         parse_HumidityQCFailureOccuranceString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_humidityqcfailureoccurancestring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->humidityqcfailureoccurancestring().data(), this->humidityqcfailureoccurancestring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to.SensorReadings.HumidityQCFailureOccuranceString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_AirQCFailureOccuranceString;
        break;
      }

      // optional string AirQCFailureOccuranceString = 30;
      case 30: {
        if (tag == 242) {
         parse_AirQCFailureOccuranceString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_airqcfailureoccurancestring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->airqcfailureoccurancestring().data(), this->airqcfailureoccurancestring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to.SensorReadings.AirQCFailureOccuranceString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_extraString;
        break;
      }

      // optional string extraString = 31;
      case 31: {
        if (tag == 250) {
         parse_extraString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extrastring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extrastring().data(), this->extrastring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to.SensorReadings.extraString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_resultString;
        break;
      }

      // optional string resultString = 32;
      case 32: {
        if (tag == 258) {
         parse_resultString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultstring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resultstring().data(), this->resultstring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to.SensorReadings.resultString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to.SensorReadings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to.SensorReadings)
  return false;
#undef DO_
}

void SensorReadings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to.SensorReadings)
  // optional bool requirementsFailedQC = 1;
  if (this->requirementsfailedqc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->requirementsfailedqc(), output);
  }

  // optional int32 returnCode = 2;
  if (this->returncode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->returncode(), output);
  }

  // optional int32 sensorType = 3;
  if (this->sensortype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sensortype(), output);
  }

  // optional int32 sensorDescriptorNumber = 4;
  if (this->sensordescriptornumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sensordescriptornumber(), output);
  }

  // optional int32 channelType = 5;
  if (this->channeltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channeltype(), output);
  }

  // optional int32 analyte = 6;
  if (this->analyte() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->analyte(), output);
  }

  // optional string analyteString = 7;
  if (this->analytestring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analytestring().data(), this->analytestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to.SensorReadings.analyteString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->analytestring(), output);
  }

  // repeated .to.Reading readings = 8;
  for (unsigned int i = 0, n = this->readings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->readings(i), output);
  }

  // optional int32 readingPointer = 9;
  if (this->readingpointer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->readingpointer(), output);
  }

  // optional int32 numThisTypeReading = 10;
  if (this->numthistypereading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->numthistypereading(), output);
  }

  // optional double result = 11;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->result(), output);
  }

  // optional double multiplicationFactor = 12;
  if (this->multiplicationfactor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->multiplicationfactor(), output);
  }

  // optional .to.SensorInfo sensorDescriptor = 13;
  if (this->has_sensordescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->sensordescriptor_, output);
  }

  // optional int32 realTimeQCPassed = 14;
  if (this->realtimeqcpassed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->realtimeqcpassed(), output);
  }

  // optional int32 realTimeQCFailedEver = 15;
  if (this->realtimeqcfailedever() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->realtimeqcfailedever(), output);
  }

  // optional bool checkRealtimeQC = 16;
  if (this->checkrealtimeqc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->checkrealtimeqc(), output);
  }

  // optional double reportableLow = 17;
  if (this->reportablelow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->reportablelow(), output);
  }

  // optional double reportableHigh = 18;
  if (this->reportablehigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->reportablehigh(), output);
  }

  // optional .to.Levels levels = 19;
  if (this->has_levels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, *this->levels_, output);
  }

  // optional int32 humidityPassed = 20;
  if (this->humiditypassed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->humiditypassed(), output);
  }

  // optional double insanityLow = 21;
  if (this->insanitylow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->insanitylow(), output);
  }

  // optional double insanityHigh = 22;
  if (this->insanityhigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->insanityhigh(), output);
  }

  // optional double insanityQALow = 23;
  if (this->insanityqalow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->insanityqalow(), output);
  }

  // optional double insanityQAHigh = 24;
  if (this->insanityqahigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->insanityqahigh(), output);
  }

  // optional int32 RealTimeQCFailureTotal = 25;
  if (this->realtimeqcfailuretotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->realtimeqcfailuretotal(), output);
  }

  // optional int32 HumidityQCFailureTotal = 26;
  if (this->humidityqcfailuretotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->humidityqcfailuretotal(), output);
  }

  // optional int32 AirQCFailureTotal = 27;
  if (this->airqcfailuretotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->airqcfailuretotal(), output);
  }

  // optional string RealTimeQCFailureOccuranceString = 28;
  if (this->realtimeqcfailureoccurancestring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->realtimeqcfailureoccurancestring().data(), this->realtimeqcfailureoccurancestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to.SensorReadings.RealTimeQCFailureOccuranceString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->realtimeqcfailureoccurancestring(), output);
  }

  // optional string HumidityQCFailureOccuranceString = 29;
  if (this->humidityqcfailureoccurancestring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->humidityqcfailureoccurancestring().data(), this->humidityqcfailureoccurancestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to.SensorReadings.HumidityQCFailureOccuranceString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->humidityqcfailureoccurancestring(), output);
  }

  // optional string AirQCFailureOccuranceString = 30;
  if (this->airqcfailureoccurancestring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->airqcfailureoccurancestring().data(), this->airqcfailureoccurancestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to.SensorReadings.AirQCFailureOccuranceString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->airqcfailureoccurancestring(), output);
  }

  // optional string extraString = 31;
  if (this->extrastring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extrastring().data(), this->extrastring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to.SensorReadings.extraString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->extrastring(), output);
  }

  // optional string resultString = 32;
  if (this->resultstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultstring().data(), this->resultstring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to.SensorReadings.resultString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->resultstring(), output);
  }

  // @@protoc_insertion_point(serialize_end:to.SensorReadings)
}

int SensorReadings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:to.SensorReadings)
  int total_size = 0;

  // optional bool requirementsFailedQC = 1;
  if (this->requirementsfailedqc() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 returnCode = 2;
  if (this->returncode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->returncode());
  }

  // optional int32 sensorType = 3;
  if (this->sensortype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensortype());
  }

  // optional int32 sensorDescriptorNumber = 4;
  if (this->sensordescriptornumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensordescriptornumber());
  }

  // optional int32 channelType = 5;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channeltype());
  }

  // optional int32 analyte = 6;
  if (this->analyte() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->analyte());
  }

  // optional string analyteString = 7;
  if (this->analytestring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analytestring());
  }

  // optional int32 readingPointer = 9;
  if (this->readingpointer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->readingpointer());
  }

  // optional int32 numThisTypeReading = 10;
  if (this->numthistypereading() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numthistypereading());
  }

  // optional double result = 11;
  if (this->result() != 0) {
    total_size += 1 + 8;
  }

  // optional double multiplicationFactor = 12;
  if (this->multiplicationfactor() != 0) {
    total_size += 1 + 8;
  }

  // optional .to.SensorInfo sensorDescriptor = 13;
  if (this->has_sensordescriptor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sensordescriptor_);
  }

  // optional int32 realTimeQCPassed = 14;
  if (this->realtimeqcpassed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->realtimeqcpassed());
  }

  // optional int32 realTimeQCFailedEver = 15;
  if (this->realtimeqcfailedever() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->realtimeqcfailedever());
  }

  // optional bool checkRealtimeQC = 16;
  if (this->checkrealtimeqc() != 0) {
    total_size += 2 + 1;
  }

  // optional double reportableLow = 17;
  if (this->reportablelow() != 0) {
    total_size += 2 + 8;
  }

  // optional double reportableHigh = 18;
  if (this->reportablehigh() != 0) {
    total_size += 2 + 8;
  }

  // optional .to.Levels levels = 19;
  if (this->has_levels()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->levels_);
  }

  // optional int32 humidityPassed = 20;
  if (this->humiditypassed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->humiditypassed());
  }

  // optional double insanityLow = 21;
  if (this->insanitylow() != 0) {
    total_size += 2 + 8;
  }

  // optional double insanityHigh = 22;
  if (this->insanityhigh() != 0) {
    total_size += 2 + 8;
  }

  // optional double insanityQALow = 23;
  if (this->insanityqalow() != 0) {
    total_size += 2 + 8;
  }

  // optional double insanityQAHigh = 24;
  if (this->insanityqahigh() != 0) {
    total_size += 2 + 8;
  }

  // optional int32 RealTimeQCFailureTotal = 25;
  if (this->realtimeqcfailuretotal() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->realtimeqcfailuretotal());
  }

  // optional int32 HumidityQCFailureTotal = 26;
  if (this->humidityqcfailuretotal() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->humidityqcfailuretotal());
  }

  // optional int32 AirQCFailureTotal = 27;
  if (this->airqcfailuretotal() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->airqcfailuretotal());
  }

  // optional string RealTimeQCFailureOccuranceString = 28;
  if (this->realtimeqcfailureoccurancestring().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->realtimeqcfailureoccurancestring());
  }

  // optional string HumidityQCFailureOccuranceString = 29;
  if (this->humidityqcfailureoccurancestring().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->humidityqcfailureoccurancestring());
  }

  // optional string AirQCFailureOccuranceString = 30;
  if (this->airqcfailureoccurancestring().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->airqcfailureoccurancestring());
  }

  // optional string extraString = 31;
  if (this->extrastring().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extrastring());
  }

  // optional string resultString = 32;
  if (this->resultstring().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resultstring());
  }

  // repeated .to.Reading readings = 8;
  total_size += 1 * this->readings_size();
  for (int i = 0; i < this->readings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->readings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorReadings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SensorReadings*>(&from));
}

void SensorReadings::MergeFrom(const SensorReadings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to.SensorReadings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  readings_.MergeFrom(from.readings_);
  if (from.requirementsfailedqc() != 0) {
    set_requirementsfailedqc(from.requirementsfailedqc());
  }
  if (from.returncode() != 0) {
    set_returncode(from.returncode());
  }
  if (from.sensortype() != 0) {
    set_sensortype(from.sensortype());
  }
  if (from.sensordescriptornumber() != 0) {
    set_sensordescriptornumber(from.sensordescriptornumber());
  }
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
  if (from.analyte() != 0) {
    set_analyte(from.analyte());
  }
  if (from.analytestring().size() > 0) {

    analytestring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analytestring_);
  }
  if (from.readingpointer() != 0) {
    set_readingpointer(from.readingpointer());
  }
  if (from.numthistypereading() != 0) {
    set_numthistypereading(from.numthistypereading());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.multiplicationfactor() != 0) {
    set_multiplicationfactor(from.multiplicationfactor());
  }
  if (from.has_sensordescriptor()) {
    mutable_sensordescriptor()->::to::SensorInfo::MergeFrom(from.sensordescriptor());
  }
  if (from.realtimeqcpassed() != 0) {
    set_realtimeqcpassed(from.realtimeqcpassed());
  }
  if (from.realtimeqcfailedever() != 0) {
    set_realtimeqcfailedever(from.realtimeqcfailedever());
  }
  if (from.checkrealtimeqc() != 0) {
    set_checkrealtimeqc(from.checkrealtimeqc());
  }
  if (from.reportablelow() != 0) {
    set_reportablelow(from.reportablelow());
  }
  if (from.reportablehigh() != 0) {
    set_reportablehigh(from.reportablehigh());
  }
  if (from.has_levels()) {
    mutable_levels()->::to::Levels::MergeFrom(from.levels());
  }
  if (from.humiditypassed() != 0) {
    set_humiditypassed(from.humiditypassed());
  }
  if (from.insanitylow() != 0) {
    set_insanitylow(from.insanitylow());
  }
  if (from.insanityhigh() != 0) {
    set_insanityhigh(from.insanityhigh());
  }
  if (from.insanityqalow() != 0) {
    set_insanityqalow(from.insanityqalow());
  }
  if (from.insanityqahigh() != 0) {
    set_insanityqahigh(from.insanityqahigh());
  }
  if (from.realtimeqcfailuretotal() != 0) {
    set_realtimeqcfailuretotal(from.realtimeqcfailuretotal());
  }
  if (from.humidityqcfailuretotal() != 0) {
    set_humidityqcfailuretotal(from.humidityqcfailuretotal());
  }
  if (from.airqcfailuretotal() != 0) {
    set_airqcfailuretotal(from.airqcfailuretotal());
  }
  if (from.realtimeqcfailureoccurancestring().size() > 0) {

    realtimeqcfailureoccurancestring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realtimeqcfailureoccurancestring_);
  }
  if (from.humidityqcfailureoccurancestring().size() > 0) {

    humidityqcfailureoccurancestring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.humidityqcfailureoccurancestring_);
  }
  if (from.airqcfailureoccurancestring().size() > 0) {

    airqcfailureoccurancestring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.airqcfailureoccurancestring_);
  }
  if (from.extrastring().size() > 0) {

    extrastring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extrastring_);
  }
  if (from.resultstring().size() > 0) {

    resultstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultstring_);
  }
}

void SensorReadings::CopyFrom(const SensorReadings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to.SensorReadings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorReadings::IsInitialized() const {

  return true;
}

void SensorReadings::Swap(SensorReadings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorReadings::InternalSwap(SensorReadings* other) {
  std::swap(requirementsfailedqc_, other->requirementsfailedqc_);
  std::swap(returncode_, other->returncode_);
  std::swap(sensortype_, other->sensortype_);
  std::swap(sensordescriptornumber_, other->sensordescriptornumber_);
  std::swap(channeltype_, other->channeltype_);
  std::swap(analyte_, other->analyte_);
  analytestring_.Swap(&other->analytestring_);
  readings_.UnsafeArenaSwap(&other->readings_);
  std::swap(readingpointer_, other->readingpointer_);
  std::swap(numthistypereading_, other->numthistypereading_);
  std::swap(result_, other->result_);
  std::swap(multiplicationfactor_, other->multiplicationfactor_);
  std::swap(sensordescriptor_, other->sensordescriptor_);
  std::swap(realtimeqcpassed_, other->realtimeqcpassed_);
  std::swap(realtimeqcfailedever_, other->realtimeqcfailedever_);
  std::swap(checkrealtimeqc_, other->checkrealtimeqc_);
  std::swap(reportablelow_, other->reportablelow_);
  std::swap(reportablehigh_, other->reportablehigh_);
  std::swap(levels_, other->levels_);
  std::swap(humiditypassed_, other->humiditypassed_);
  std::swap(insanitylow_, other->insanitylow_);
  std::swap(insanityhigh_, other->insanityhigh_);
  std::swap(insanityqalow_, other->insanityqalow_);
  std::swap(insanityqahigh_, other->insanityqahigh_);
  std::swap(realtimeqcfailuretotal_, other->realtimeqcfailuretotal_);
  std::swap(humidityqcfailuretotal_, other->humidityqcfailuretotal_);
  std::swap(airqcfailuretotal_, other->airqcfailuretotal_);
  realtimeqcfailureoccurancestring_.Swap(&other->realtimeqcfailureoccurancestring_);
  humidityqcfailureoccurancestring_.Swap(&other->humidityqcfailureoccurancestring_);
  airqcfailureoccurancestring_.Swap(&other->airqcfailureoccurancestring_);
  extrastring_.Swap(&other->extrastring_);
  resultstring_.Swap(&other->resultstring_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SensorReadings::GetTypeName() const {
  return "to.SensorReadings";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorReadings

// optional bool requirementsFailedQC = 1;
void SensorReadings::clear_requirementsfailedqc() {
  requirementsfailedqc_ = false;
}
 bool SensorReadings::requirementsfailedqc() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.requirementsFailedQC)
  return requirementsfailedqc_;
}
 void SensorReadings::set_requirementsfailedqc(bool value) {
  
  requirementsfailedqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.requirementsFailedQC)
}

// optional int32 returnCode = 2;
void SensorReadings::clear_returncode() {
  returncode_ = 0;
}
 ::google::protobuf::int32 SensorReadings::returncode() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.returnCode)
  return returncode_;
}
 void SensorReadings::set_returncode(::google::protobuf::int32 value) {
  
  returncode_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.returnCode)
}

// optional int32 sensorType = 3;
void SensorReadings::clear_sensortype() {
  sensortype_ = 0;
}
 ::google::protobuf::int32 SensorReadings::sensortype() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.sensorType)
  return sensortype_;
}
 void SensorReadings::set_sensortype(::google::protobuf::int32 value) {
  
  sensortype_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.sensorType)
}

// optional int32 sensorDescriptorNumber = 4;
void SensorReadings::clear_sensordescriptornumber() {
  sensordescriptornumber_ = 0;
}
 ::google::protobuf::int32 SensorReadings::sensordescriptornumber() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.sensorDescriptorNumber)
  return sensordescriptornumber_;
}
 void SensorReadings::set_sensordescriptornumber(::google::protobuf::int32 value) {
  
  sensordescriptornumber_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.sensorDescriptorNumber)
}

// optional int32 channelType = 5;
void SensorReadings::clear_channeltype() {
  channeltype_ = 0;
}
 ::google::protobuf::int32 SensorReadings::channeltype() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.channelType)
  return channeltype_;
}
 void SensorReadings::set_channeltype(::google::protobuf::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.channelType)
}

// optional int32 analyte = 6;
void SensorReadings::clear_analyte() {
  analyte_ = 0;
}
 ::google::protobuf::int32 SensorReadings::analyte() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.analyte)
  return analyte_;
}
 void SensorReadings::set_analyte(::google::protobuf::int32 value) {
  
  analyte_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.analyte)
}

// optional string analyteString = 7;
void SensorReadings::clear_analytestring() {
  analytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorReadings::analytestring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.analyteString)
  return analytestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_analytestring(const ::std::string& value) {
  
  analytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.analyteString)
}
 void SensorReadings::set_analytestring(const char* value) {
  
  analytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.analyteString)
}
 void SensorReadings::set_analytestring(const char* value, size_t size) {
  
  analytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.analyteString)
}
 ::std::string* SensorReadings::mutable_analytestring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.analyteString)
  return analytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorReadings::release_analytestring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.analyteString)
  
  return analytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_allocated_analytestring(::std::string* analytestring) {
  if (analytestring != NULL) {
    
  } else {
    
  }
  analytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), analytestring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.analyteString)
}

// repeated .to.Reading readings = 8;
int SensorReadings::readings_size() const {
  return readings_.size();
}
void SensorReadings::clear_readings() {
  readings_.Clear();
}
const ::to::Reading& SensorReadings::readings(int index) const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.readings)
  return readings_.Get(index);
}
::to::Reading* SensorReadings::mutable_readings(int index) {
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.readings)
  return readings_.Mutable(index);
}
::to::Reading* SensorReadings::add_readings() {
  // @@protoc_insertion_point(field_add:to.SensorReadings.readings)
  return readings_.Add();
}
::google::protobuf::RepeatedPtrField< ::to::Reading >*
SensorReadings::mutable_readings() {
  // @@protoc_insertion_point(field_mutable_list:to.SensorReadings.readings)
  return &readings_;
}
const ::google::protobuf::RepeatedPtrField< ::to::Reading >&
SensorReadings::readings() const {
  // @@protoc_insertion_point(field_list:to.SensorReadings.readings)
  return readings_;
}

// optional int32 readingPointer = 9;
void SensorReadings::clear_readingpointer() {
  readingpointer_ = 0;
}
 ::google::protobuf::int32 SensorReadings::readingpointer() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.readingPointer)
  return readingpointer_;
}
 void SensorReadings::set_readingpointer(::google::protobuf::int32 value) {
  
  readingpointer_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.readingPointer)
}

// optional int32 numThisTypeReading = 10;
void SensorReadings::clear_numthistypereading() {
  numthistypereading_ = 0;
}
 ::google::protobuf::int32 SensorReadings::numthistypereading() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.numThisTypeReading)
  return numthistypereading_;
}
 void SensorReadings::set_numthistypereading(::google::protobuf::int32 value) {
  
  numthistypereading_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.numThisTypeReading)
}

// optional double result = 11;
void SensorReadings::clear_result() {
  result_ = 0;
}
 double SensorReadings::result() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.result)
  return result_;
}
 void SensorReadings::set_result(double value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.result)
}

// optional double multiplicationFactor = 12;
void SensorReadings::clear_multiplicationfactor() {
  multiplicationfactor_ = 0;
}
 double SensorReadings::multiplicationfactor() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.multiplicationFactor)
  return multiplicationfactor_;
}
 void SensorReadings::set_multiplicationfactor(double value) {
  
  multiplicationfactor_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.multiplicationFactor)
}

// optional .to.SensorInfo sensorDescriptor = 13;
bool SensorReadings::has_sensordescriptor() const {
  return !_is_default_instance_ && sensordescriptor_ != NULL;
}
void SensorReadings::clear_sensordescriptor() {
  if (GetArenaNoVirtual() == NULL && sensordescriptor_ != NULL) delete sensordescriptor_;
  sensordescriptor_ = NULL;
}
const ::to::SensorInfo& SensorReadings::sensordescriptor() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.sensorDescriptor)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sensordescriptor_ != NULL ? *sensordescriptor_ : *default_instance().sensordescriptor_;
#else
  return sensordescriptor_ != NULL ? *sensordescriptor_ : *default_instance_->sensordescriptor_;
#endif
}
::to::SensorInfo* SensorReadings::mutable_sensordescriptor() {
  
  if (sensordescriptor_ == NULL) {
    sensordescriptor_ = new ::to::SensorInfo;
  }
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.sensorDescriptor)
  return sensordescriptor_;
}
::to::SensorInfo* SensorReadings::release_sensordescriptor() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.sensorDescriptor)
  
  ::to::SensorInfo* temp = sensordescriptor_;
  sensordescriptor_ = NULL;
  return temp;
}
void SensorReadings::set_allocated_sensordescriptor(::to::SensorInfo* sensordescriptor) {
  delete sensordescriptor_;
  sensordescriptor_ = sensordescriptor;
  if (sensordescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.sensorDescriptor)
}

// optional int32 realTimeQCPassed = 14;
void SensorReadings::clear_realtimeqcpassed() {
  realtimeqcpassed_ = 0;
}
 ::google::protobuf::int32 SensorReadings::realtimeqcpassed() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.realTimeQCPassed)
  return realtimeqcpassed_;
}
 void SensorReadings::set_realtimeqcpassed(::google::protobuf::int32 value) {
  
  realtimeqcpassed_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.realTimeQCPassed)
}

// optional int32 realTimeQCFailedEver = 15;
void SensorReadings::clear_realtimeqcfailedever() {
  realtimeqcfailedever_ = 0;
}
 ::google::protobuf::int32 SensorReadings::realtimeqcfailedever() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.realTimeQCFailedEver)
  return realtimeqcfailedever_;
}
 void SensorReadings::set_realtimeqcfailedever(::google::protobuf::int32 value) {
  
  realtimeqcfailedever_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.realTimeQCFailedEver)
}

// optional bool checkRealtimeQC = 16;
void SensorReadings::clear_checkrealtimeqc() {
  checkrealtimeqc_ = false;
}
 bool SensorReadings::checkrealtimeqc() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.checkRealtimeQC)
  return checkrealtimeqc_;
}
 void SensorReadings::set_checkrealtimeqc(bool value) {
  
  checkrealtimeqc_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.checkRealtimeQC)
}

// optional double reportableLow = 17;
void SensorReadings::clear_reportablelow() {
  reportablelow_ = 0;
}
 double SensorReadings::reportablelow() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.reportableLow)
  return reportablelow_;
}
 void SensorReadings::set_reportablelow(double value) {
  
  reportablelow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.reportableLow)
}

// optional double reportableHigh = 18;
void SensorReadings::clear_reportablehigh() {
  reportablehigh_ = 0;
}
 double SensorReadings::reportablehigh() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.reportableHigh)
  return reportablehigh_;
}
 void SensorReadings::set_reportablehigh(double value) {
  
  reportablehigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.reportableHigh)
}

// optional .to.Levels levels = 19;
bool SensorReadings::has_levels() const {
  return !_is_default_instance_ && levels_ != NULL;
}
void SensorReadings::clear_levels() {
  if (GetArenaNoVirtual() == NULL && levels_ != NULL) delete levels_;
  levels_ = NULL;
}
const ::to::Levels& SensorReadings::levels() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.levels)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return levels_ != NULL ? *levels_ : *default_instance().levels_;
#else
  return levels_ != NULL ? *levels_ : *default_instance_->levels_;
#endif
}
::to::Levels* SensorReadings::mutable_levels() {
  
  if (levels_ == NULL) {
    levels_ = new ::to::Levels;
  }
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.levels)
  return levels_;
}
::to::Levels* SensorReadings::release_levels() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.levels)
  
  ::to::Levels* temp = levels_;
  levels_ = NULL;
  return temp;
}
void SensorReadings::set_allocated_levels(::to::Levels* levels) {
  delete levels_;
  levels_ = levels;
  if (levels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.levels)
}

// optional int32 humidityPassed = 20;
void SensorReadings::clear_humiditypassed() {
  humiditypassed_ = 0;
}
 ::google::protobuf::int32 SensorReadings::humiditypassed() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.humidityPassed)
  return humiditypassed_;
}
 void SensorReadings::set_humiditypassed(::google::protobuf::int32 value) {
  
  humiditypassed_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.humidityPassed)
}

// optional double insanityLow = 21;
void SensorReadings::clear_insanitylow() {
  insanitylow_ = 0;
}
 double SensorReadings::insanitylow() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.insanityLow)
  return insanitylow_;
}
 void SensorReadings::set_insanitylow(double value) {
  
  insanitylow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.insanityLow)
}

// optional double insanityHigh = 22;
void SensorReadings::clear_insanityhigh() {
  insanityhigh_ = 0;
}
 double SensorReadings::insanityhigh() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.insanityHigh)
  return insanityhigh_;
}
 void SensorReadings::set_insanityhigh(double value) {
  
  insanityhigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.insanityHigh)
}

// optional double insanityQALow = 23;
void SensorReadings::clear_insanityqalow() {
  insanityqalow_ = 0;
}
 double SensorReadings::insanityqalow() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.insanityQALow)
  return insanityqalow_;
}
 void SensorReadings::set_insanityqalow(double value) {
  
  insanityqalow_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.insanityQALow)
}

// optional double insanityQAHigh = 24;
void SensorReadings::clear_insanityqahigh() {
  insanityqahigh_ = 0;
}
 double SensorReadings::insanityqahigh() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.insanityQAHigh)
  return insanityqahigh_;
}
 void SensorReadings::set_insanityqahigh(double value) {
  
  insanityqahigh_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.insanityQAHigh)
}

// optional int32 RealTimeQCFailureTotal = 25;
void SensorReadings::clear_realtimeqcfailuretotal() {
  realtimeqcfailuretotal_ = 0;
}
 ::google::protobuf::int32 SensorReadings::realtimeqcfailuretotal() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.RealTimeQCFailureTotal)
  return realtimeqcfailuretotal_;
}
 void SensorReadings::set_realtimeqcfailuretotal(::google::protobuf::int32 value) {
  
  realtimeqcfailuretotal_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.RealTimeQCFailureTotal)
}

// optional int32 HumidityQCFailureTotal = 26;
void SensorReadings::clear_humidityqcfailuretotal() {
  humidityqcfailuretotal_ = 0;
}
 ::google::protobuf::int32 SensorReadings::humidityqcfailuretotal() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.HumidityQCFailureTotal)
  return humidityqcfailuretotal_;
}
 void SensorReadings::set_humidityqcfailuretotal(::google::protobuf::int32 value) {
  
  humidityqcfailuretotal_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.HumidityQCFailureTotal)
}

// optional int32 AirQCFailureTotal = 27;
void SensorReadings::clear_airqcfailuretotal() {
  airqcfailuretotal_ = 0;
}
 ::google::protobuf::int32 SensorReadings::airqcfailuretotal() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.AirQCFailureTotal)
  return airqcfailuretotal_;
}
 void SensorReadings::set_airqcfailuretotal(::google::protobuf::int32 value) {
  
  airqcfailuretotal_ = value;
  // @@protoc_insertion_point(field_set:to.SensorReadings.AirQCFailureTotal)
}

// optional string RealTimeQCFailureOccuranceString = 28;
void SensorReadings::clear_realtimeqcfailureoccurancestring() {
  realtimeqcfailureoccurancestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorReadings::realtimeqcfailureoccurancestring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.RealTimeQCFailureOccuranceString)
  return realtimeqcfailureoccurancestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_realtimeqcfailureoccurancestring(const ::std::string& value) {
  
  realtimeqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.RealTimeQCFailureOccuranceString)
}
 void SensorReadings::set_realtimeqcfailureoccurancestring(const char* value) {
  
  realtimeqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.RealTimeQCFailureOccuranceString)
}
 void SensorReadings::set_realtimeqcfailureoccurancestring(const char* value, size_t size) {
  
  realtimeqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.RealTimeQCFailureOccuranceString)
}
 ::std::string* SensorReadings::mutable_realtimeqcfailureoccurancestring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.RealTimeQCFailureOccuranceString)
  return realtimeqcfailureoccurancestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorReadings::release_realtimeqcfailureoccurancestring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.RealTimeQCFailureOccuranceString)
  
  return realtimeqcfailureoccurancestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_allocated_realtimeqcfailureoccurancestring(::std::string* realtimeqcfailureoccurancestring) {
  if (realtimeqcfailureoccurancestring != NULL) {
    
  } else {
    
  }
  realtimeqcfailureoccurancestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realtimeqcfailureoccurancestring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.RealTimeQCFailureOccuranceString)
}

// optional string HumidityQCFailureOccuranceString = 29;
void SensorReadings::clear_humidityqcfailureoccurancestring() {
  humidityqcfailureoccurancestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorReadings::humidityqcfailureoccurancestring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.HumidityQCFailureOccuranceString)
  return humidityqcfailureoccurancestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_humidityqcfailureoccurancestring(const ::std::string& value) {
  
  humidityqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.HumidityQCFailureOccuranceString)
}
 void SensorReadings::set_humidityqcfailureoccurancestring(const char* value) {
  
  humidityqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.HumidityQCFailureOccuranceString)
}
 void SensorReadings::set_humidityqcfailureoccurancestring(const char* value, size_t size) {
  
  humidityqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.HumidityQCFailureOccuranceString)
}
 ::std::string* SensorReadings::mutable_humidityqcfailureoccurancestring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.HumidityQCFailureOccuranceString)
  return humidityqcfailureoccurancestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorReadings::release_humidityqcfailureoccurancestring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.HumidityQCFailureOccuranceString)
  
  return humidityqcfailureoccurancestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_allocated_humidityqcfailureoccurancestring(::std::string* humidityqcfailureoccurancestring) {
  if (humidityqcfailureoccurancestring != NULL) {
    
  } else {
    
  }
  humidityqcfailureoccurancestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), humidityqcfailureoccurancestring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.HumidityQCFailureOccuranceString)
}

// optional string AirQCFailureOccuranceString = 30;
void SensorReadings::clear_airqcfailureoccurancestring() {
  airqcfailureoccurancestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorReadings::airqcfailureoccurancestring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.AirQCFailureOccuranceString)
  return airqcfailureoccurancestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_airqcfailureoccurancestring(const ::std::string& value) {
  
  airqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.AirQCFailureOccuranceString)
}
 void SensorReadings::set_airqcfailureoccurancestring(const char* value) {
  
  airqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.AirQCFailureOccuranceString)
}
 void SensorReadings::set_airqcfailureoccurancestring(const char* value, size_t size) {
  
  airqcfailureoccurancestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.AirQCFailureOccuranceString)
}
 ::std::string* SensorReadings::mutable_airqcfailureoccurancestring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.AirQCFailureOccuranceString)
  return airqcfailureoccurancestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorReadings::release_airqcfailureoccurancestring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.AirQCFailureOccuranceString)
  
  return airqcfailureoccurancestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_allocated_airqcfailureoccurancestring(::std::string* airqcfailureoccurancestring) {
  if (airqcfailureoccurancestring != NULL) {
    
  } else {
    
  }
  airqcfailureoccurancestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), airqcfailureoccurancestring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.AirQCFailureOccuranceString)
}

// optional string extraString = 31;
void SensorReadings::clear_extrastring() {
  extrastring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorReadings::extrastring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.extraString)
  return extrastring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_extrastring(const ::std::string& value) {
  
  extrastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.extraString)
}
 void SensorReadings::set_extrastring(const char* value) {
  
  extrastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.extraString)
}
 void SensorReadings::set_extrastring(const char* value, size_t size) {
  
  extrastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.extraString)
}
 ::std::string* SensorReadings::mutable_extrastring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.extraString)
  return extrastring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorReadings::release_extrastring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.extraString)
  
  return extrastring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_allocated_extrastring(::std::string* extrastring) {
  if (extrastring != NULL) {
    
  } else {
    
  }
  extrastring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extrastring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.extraString)
}

// optional string resultString = 32;
void SensorReadings::clear_resultstring() {
  resultstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorReadings::resultstring() const {
  // @@protoc_insertion_point(field_get:to.SensorReadings.resultString)
  return resultstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_resultstring(const ::std::string& value) {
  
  resultstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to.SensorReadings.resultString)
}
 void SensorReadings::set_resultstring(const char* value) {
  
  resultstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to.SensorReadings.resultString)
}
 void SensorReadings::set_resultstring(const char* value, size_t size) {
  
  resultstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to.SensorReadings.resultString)
}
 ::std::string* SensorReadings::mutable_resultstring() {
  
  // @@protoc_insertion_point(field_mutable:to.SensorReadings.resultString)
  return resultstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorReadings::release_resultstring() {
  // @@protoc_insertion_point(field_release:to.SensorReadings.resultString)
  
  return resultstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorReadings::set_allocated_resultstring(::std::string* resultstring) {
  if (resultstring != NULL) {
    
  } else {
    
  }
  resultstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultstring);
  // @@protoc_insertion_point(field_set_allocated:to.SensorReadings.resultString)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace to

// @@protoc_insertion_point(global_scope)
